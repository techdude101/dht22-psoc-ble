ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"CyLib.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	cydelayFreqHz
  20              		.data
  21              		.align	2
  22              		.type	cydelayFreqHz, %object
  23              		.size	cydelayFreqHz, 4
  24              	cydelayFreqHz:
  25 0000 006CDC02 		.word	48000000
  26              		.global	cydelayFreqKhz
  27              		.align	2
  28              		.type	cydelayFreqKhz, %object
  29              		.size	cydelayFreqKhz, 4
  30              	cydelayFreqKhz:
  31 0004 80BB0000 		.word	48000
  32              		.global	cydelayFreqMhz
  33              		.type	cydelayFreqMhz, %object
  34              		.size	cydelayFreqMhz, 1
  35              	cydelayFreqMhz:
  36 0008 30       		.byte	48
  37              		.global	cydelay32kMs
  38 0009 000000   		.align	2
  39              		.type	cydelay32kMs, %object
  40              		.size	cydelay32kMs, 4
  41              	cydelay32kMs:
  42 000c 0000C05D 		.word	1572864000
  43              		.bss
  44              		.align	2
  45              	CySysTickCallbacks:
  46 0000 00000000 		.space	20
  46      00000000 
  46      00000000 
  46      00000000 
  46      00000000 
  47              		.global	CySysTickInitVar
  48              		.align	2
  49              		.type	CySysTickInitVar, %object
  50              		.size	CySysTickInitVar, 4
  51              	CySysTickInitVar:
  52 0014 00000000 		.space	4
  53              		.global	cyImoFreqMhz2Reg
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 2


  54              		.section	.rodata
  55              		.align	2
  56              		.type	cyImoFreqMhz2Reg, %object
  57              		.size	cyImoFreqMhz2Reg, 46
  58              	cyImoFreqMhz2Reg:
  59 0000 03       		.byte	3
  60 0001 04       		.byte	4
  61 0002 05       		.byte	5
  62 0003 06       		.byte	6
  63 0004 07       		.byte	7
  64 0005 08       		.byte	8
  65 0006 09       		.byte	9
  66 0007 0A       		.byte	10
  67 0008 0B       		.byte	11
  68 0009 0C       		.byte	12
  69 000a 0E       		.byte	14
  70 000b 0F       		.byte	15
  71 000c 10       		.byte	16
  72 000d 11       		.byte	17
  73 000e 12       		.byte	18
  74 000f 13       		.byte	19
  75 0010 14       		.byte	20
  76 0011 15       		.byte	21
  77 0012 16       		.byte	22
  78 0013 17       		.byte	23
  79 0014 18       		.byte	24
  80 0015 19       		.byte	25
  81 0016 1B       		.byte	27
  82 0017 1C       		.byte	28
  83 0018 1D       		.byte	29
  84 0019 1E       		.byte	30
  85 001a 1F       		.byte	31
  86 001b 20       		.byte	32
  87 001c 21       		.byte	33
  88 001d 22       		.byte	34
  89 001e 23       		.byte	35
  90 001f 25       		.byte	37
  91 0020 26       		.byte	38
  92 0021 27       		.byte	39
  93 0022 28       		.byte	40
  94 0023 29       		.byte	41
  95 0024 2A       		.byte	42
  96 0025 2B       		.byte	43
  97 0026 2E       		.byte	46
  98 0027 2F       		.byte	47
  99 0028 30       		.byte	48
 100 0029 31       		.byte	49
 101 002a 32       		.byte	50
 102 002b 33       		.byte	51
 103 002c 34       		.byte	52
 104 002d 35       		.byte	53
 105              		.global	CySysClkPumpConfig
 106              		.data
 107              		.align	2
 108              		.type	CySysClkPumpConfig, %object
 109              		.size	CySysClkPumpConfig, 4
 110              	CySysClkPumpConfig:
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 3


 111 0010 01000000 		.word	1
 112              		.section	.text.CySysClkImoStart,"ax",%progbits
 113              		.align	2
 114              		.global	CySysClkImoStart
 115              		.code	16
 116              		.thumb_func
 117              		.type	CySysClkImoStart, %function
 118              	CySysClkImoStart:
 119              	.LFB2:
 120              		.file 1 "Generated_Source\\PSoC4\\CyLib.c"
   1:Generated_Source\PSoC4/CyLib.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/CyLib.c **** * \file CyLib.c
   3:Generated_Source\PSoC4/CyLib.c **** * \version 6.0
   4:Generated_Source\PSoC4/CyLib.c **** *
   5:Generated_Source\PSoC4/CyLib.c **** * \brief Provides a system API for the Clocking, Interrupts, SysTick, and
   6:Generated_Source\PSoC4/CyLib.c **** * Voltage Detect.
   7:Generated_Source\PSoC4/CyLib.c **** *
   8:Generated_Source\PSoC4/CyLib.c **** * \note Documentation of the API's in this file is located in the PSoC 4 System
   9:Generated_Source\PSoC4/CyLib.c **** * Reference Guide provided with PSoC Creator.
  10:Generated_Source\PSoC4/CyLib.c **** *
  11:Generated_Source\PSoC4/CyLib.c **** ********************************************************************************
  12:Generated_Source\PSoC4/CyLib.c **** * \copyright
  13:Generated_Source\PSoC4/CyLib.c **** * Copyright 2010-2020, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/CyLib.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/CyLib.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/CyLib.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/CyLib.c **** 
  19:Generated_Source\PSoC4/CyLib.c **** #include "CyLib.h"
  20:Generated_Source\PSoC4/CyLib.c **** 
  21:Generated_Source\PSoC4/CyLib.c **** /* CySysClkWriteImoFreq() || CySysClkImoEnableWcoLock() */
  22:Generated_Source\PSoC4/CyLib.c **** #if ((CY_IP_SRSSV2 && CY_IP_FMLT) || CY_IP_IMO_TRIMMABLE_BY_WCO)
  23:Generated_Source\PSoC4/CyLib.c ****     #include "CyFlash.h"
  24:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_FMLT) */
  25:Generated_Source\PSoC4/CyLib.c **** 
  26:Generated_Source\PSoC4/CyLib.c **** /* Do not use these definitions directly in your application */
  27:Generated_Source\PSoC4/CyLib.c **** uint32 cydelayFreqHz  = CYDEV_BCLK__SYSCLK__HZ;
  28:Generated_Source\PSoC4/CyLib.c **** uint32 cydelayFreqKhz = (CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1K_MINUS_1_THRESHOLD) / CY_DELAY_1K_THRE
  29:Generated_Source\PSoC4/CyLib.c **** uint8  cydelayFreqMhz = (uint8)((CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1M_MINUS_1_THRESHOLD) / CY_DELAY
  30:Generated_Source\PSoC4/CyLib.c **** uint32 cydelay32kMs   = CY_DELAY_MS_OVERFLOW * ((CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1K_MINUS_1_THRES
  31:Generated_Source\PSoC4/CyLib.c ****                         CY_DELAY_1K_THRESHOLD);
  32:Generated_Source\PSoC4/CyLib.c **** 
  33:Generated_Source\PSoC4/CyLib.c **** 
  34:Generated_Source\PSoC4/CyLib.c **** static cySysTickCallback CySysTickCallbacks[CY_SYS_SYST_NUM_OF_CALLBACKS];
  35:Generated_Source\PSoC4/CyLib.c **** static void CySysTickServiceCallbacks(void);
  36:Generated_Source\PSoC4/CyLib.c **** 
  37:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_PLL)
  38:Generated_Source\PSoC4/CyLib.c ****     static uint32 CySysClkPllGetBypassMode(uint32 pll);
  39:Generated_Source\PSoC4/CyLib.c ****     static cystatus CySysClkPllConfigChangeAllowed(uint32 pll);
  40:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_PLL) */
  41:Generated_Source\PSoC4/CyLib.c **** 
  42:Generated_Source\PSoC4/CyLib.c **** 
  43:Generated_Source\PSoC4/CyLib.c **** /***************************************************************************//**
  44:Generated_Source\PSoC4/CyLib.c **** * Indicates whether or not the SysTick has been initialized. The variable is
  45:Generated_Source\PSoC4/CyLib.c **** * initialized to 0 and set to 1 the first time CySysTickStart() is called.
  46:Generated_Source\PSoC4/CyLib.c **** *
  47:Generated_Source\PSoC4/CyLib.c **** * This allows the component to restart without reinitialization after the first
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 4


  48:Generated_Source\PSoC4/CyLib.c **** * call to the CySysTickStart() routine.
  49:Generated_Source\PSoC4/CyLib.c **** *
  50:Generated_Source\PSoC4/CyLib.c **** * If reinitialization of the SysTick is required, call CySysTickInit() before
  51:Generated_Source\PSoC4/CyLib.c **** * calling CySysTickStart(). Alternatively, the SysTick can be reinitialized by
  52:Generated_Source\PSoC4/CyLib.c **** * calling the CySysTickInit() and CySysTickEnable() functions.
  53:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
  54:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickInitVar = 0u;
  55:Generated_Source\PSoC4/CyLib.c **** 
  56:Generated_Source\PSoC4/CyLib.c **** 
  57:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
  58:Generated_Source\PSoC4/CyLib.c ****         /* Conversion between CySysClkWriteImoFreq() parameter and register's value */
  59:Generated_Source\PSoC4/CyLib.c ****         const uint8 cyImoFreqMhz2Reg[CY_SYS_CLK_IMO_FREQ_TABLE_SIZE] = {
  60:Generated_Source\PSoC4/CyLib.c ****             /*  3 MHz */ 0x03u,  /*  4 MHz */ 0x04u,  /*  5 MHz */ 0x05u,  /*  6 MHz */ 0x06u,
  61:Generated_Source\PSoC4/CyLib.c ****             /*  7 MHz */ 0x07u,  /*  8 MHz */ 0x08u,  /*  9 MHz */ 0x09u,  /* 10 MHz */ 0x0Au,
  62:Generated_Source\PSoC4/CyLib.c ****             /* 11 MHz */ 0x0Bu,  /* 12 MHz */ 0x0Cu,  /* 13 MHz */ 0x0Eu,  /* 14 MHz */ 0x0Fu,
  63:Generated_Source\PSoC4/CyLib.c ****             /* 15 MHz */ 0x10u,  /* 16 MHz */ 0x11u,  /* 17 MHz */ 0x12u,  /* 18 MHz */ 0x13u,
  64:Generated_Source\PSoC4/CyLib.c ****             /* 19 MHz */ 0x14u,  /* 20 MHz */ 0x15u,  /* 21 MHz */ 0x16u,  /* 22 MHz */ 0x17u,
  65:Generated_Source\PSoC4/CyLib.c ****             /* 23 MHz */ 0x18u,  /* 24 MHz */ 0x19u,  /* 25 MHz */ 0x1Bu,  /* 26 MHz */ 0x1Cu,
  66:Generated_Source\PSoC4/CyLib.c ****             /* 27 MHz */ 0x1Du,  /* 28 MHz */ 0x1Eu,  /* 29 MHz */ 0x1Fu,  /* 30 MHz */ 0x20u,
  67:Generated_Source\PSoC4/CyLib.c ****             /* 31 MHz */ 0x21u,  /* 32 MHz */ 0x22u,  /* 33 MHz */ 0x23u,  /* 34 MHz */ 0x25u,
  68:Generated_Source\PSoC4/CyLib.c ****             /* 35 MHz */ 0x26u,  /* 36 MHz */ 0x27u,  /* 37 MHz */ 0x28u,  /* 38 MHz */ 0x29u,
  69:Generated_Source\PSoC4/CyLib.c ****             /* 39 MHz */ 0x2Au,  /* 40 MHz */ 0x2Bu,  /* 41 MHz */ 0x2Eu,  /* 42 MHz */ 0x2Fu,
  70:Generated_Source\PSoC4/CyLib.c ****             /* 43 MHz */ 0x30u,  /* 44 MHz */ 0x31u,  /* 45 MHz */ 0x32u,  /* 46 MHz */ 0x33u,
  71:Generated_Source\PSoC4/CyLib.c ****             /* 47 MHz */ 0x34u,  /* 48 MHz */ 0x35u };
  72:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
  73:Generated_Source\PSoC4/CyLib.c **** 
  74:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_USB && CY_IP_SRSSV2)
  75:Generated_Source\PSoC4/CyLib.c ****     #define CY_CRI_TESTPGM_6_REV            (6u)
  76:Generated_Source\PSoC4/CyLib.c ****     #define CY_CRI_TESTPGM_9_REV            (9u)
  77:Generated_Source\PSoC4/CyLib.c ****     #define CYSFLASH_CRI_testpgm_rev_MASK   (0x0000003Fu)
  78:Generated_Source\PSoC4/CyLib.c **** 
  79:Generated_Source\PSoC4/CyLib.c ****     /* Stored CY_SYS_CLK_IMO_TRIM4_REG when modified for USB lock */
  80:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoTrim4 = 0u;
  81:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoTrim5 = 0u;
  82:Generated_Source\PSoC4/CyLib.c **** 
  83:Generated_Source\PSoC4/CyLib.c ****     static void CySysClkImoSetPwrBgTrim5(void);
  84:Generated_Source\PSoC4/CyLib.c ****     static void CySysClkImoSetImoTrims(void);
  85:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_USB && CY_IP_SRSSV2) */
  86:Generated_Source\PSoC4/CyLib.c **** 
  87:Generated_Source\PSoC4/CyLib.c **** /* Stored PUMP_SEL configuration during disable (IMO output by default) */
  88:Generated_Source\PSoC4/CyLib.c **** uint32 CySysClkPumpConfig = CY_SYS_CLK_PUMP_ENABLE;
  89:Generated_Source\PSoC4/CyLib.c **** 
  90:Generated_Source\PSoC4/CyLib.c **** 
  91:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
  92:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkImoStart
  93:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
  94:Generated_Source\PSoC4/CyLib.c **** *
  95:Generated_Source\PSoC4/CyLib.c **** * Enables the IMO.
  96:Generated_Source\PSoC4/CyLib.c **** *
  97:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4100M / PSoC 4200M / PSoC 4000S / PSoC 4100S / PSoC 4500 / PSoC Analog
  98:Generated_Source\PSoC4/CyLib.c **** * Coprocessor devices, this function will also enable WCO lock if selected in
  99:Generated_Source\PSoC4/CyLib.c **** * the Design Wide Resources tab.
 100:Generated_Source\PSoC4/CyLib.c **** *
 101:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200L devices, this function will also enable USB lock if selected
 102:Generated_Source\PSoC4/CyLib.c **** * in the Design Wide Resources tab.
 103:Generated_Source\PSoC4/CyLib.c **** *
 104:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 5


 105:Generated_Source\PSoC4/CyLib.c **** void CySysClkImoStart(void)
 106:Generated_Source\PSoC4/CyLib.c **** {
 121              		.loc 1 106 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 1, uses_anonymous_args = 0
 125 0000 80B5     		push	{r7, lr}
 126              		.cfi_def_cfa_offset 8
 127              		.cfi_offset 7, -8
 128              		.cfi_offset 14, -4
 129 0002 00AF     		add	r7, sp, #0
 130              		.cfi_def_cfa_register 7
 107:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_IMO_CONFIG_REG |= CY_SYS_CLK_IMO_CONFIG_ENABLE;
 131              		.loc 1 107 0
 132 0004 044B     		ldr	r3, .L2
 133 0006 044A     		ldr	r2, .L2
 134 0008 1268     		ldr	r2, [r2]
 135 000a 8021     		movs	r1, #128
 136 000c 0906     		lsls	r1, r1, #24
 137 000e 0A43     		orrs	r2, r1
 138 0010 1A60     		str	r2, [r3]
 108:Generated_Source\PSoC4/CyLib.c **** 
 109:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 110:Generated_Source\PSoC4/CyLib.c ****         #if (CYDEV_IMO_TRIMMED_BY_WCO == 1u)
 111:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoEnableWcoLock();
 112:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_WCO == 1u) */
 113:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 114:Generated_Source\PSoC4/CyLib.c **** 
 115:Generated_Source\PSoC4/CyLib.c **** 
 116:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 117:Generated_Source\PSoC4/CyLib.c ****         #if (CYDEV_IMO_TRIMMED_BY_USB == 1u)
 118:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoEnableUsbLock();
 119:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 1u) */
 120:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 121:Generated_Source\PSoC4/CyLib.c **** 
 122:Generated_Source\PSoC4/CyLib.c **** }
 139              		.loc 1 122 0
 140 0012 C046     		nop
 141 0014 BD46     		mov	sp, r7
 142              		@ sp needed
 143 0016 80BD     		pop	{r7, pc}
 144              	.L3:
 145              		.align	2
 146              	.L2:
 147 0018 08010B40 		.word	1074462984
 148              		.cfi_endproc
 149              	.LFE2:
 150              		.size	CySysClkImoStart, .-CySysClkImoStart
 151              		.section	.text.CySysClkImoStop,"ax",%progbits
 152              		.align	2
 153              		.global	CySysClkImoStop
 154              		.code	16
 155              		.thumb_func
 156              		.type	CySysClkImoStop, %function
 157              	CySysClkImoStop:
 158              	.LFB3:
 123:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 6


 124:Generated_Source\PSoC4/CyLib.c **** 
 125:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 126:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkImoStop
 127:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 128:Generated_Source\PSoC4/CyLib.c **** *
 129:Generated_Source\PSoC4/CyLib.c **** * Disables the IMO.
 130:Generated_Source\PSoC4/CyLib.c **** *
 131:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4100M / PSoC 4200M / PSoC 4200L / PSoC 4000S / PSoC 4100S /
 132:Generated_Source\PSoC4/CyLib.c **** * PSoC 4500 / PSoC Analog Coprocessor devices, this function will also
 133:Generated_Source\PSoC4/CyLib.c **** * disable WCO lock.
 134:Generated_Source\PSoC4/CyLib.c **** *
 135:Generated_Source\PSoC4/CyLib.c **** * For PSoC PSoC 4200L devices, this function will also disable USB lock.
 136:Generated_Source\PSoC4/CyLib.c **** *
 137:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 138:Generated_Source\PSoC4/CyLib.c **** void CySysClkImoStop(void)
 139:Generated_Source\PSoC4/CyLib.c **** {
 159              		.loc 1 139 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 0
 162              		@ frame_needed = 1, uses_anonymous_args = 0
 163 0000 80B5     		push	{r7, lr}
 164              		.cfi_def_cfa_offset 8
 165              		.cfi_offset 7, -8
 166              		.cfi_offset 14, -4
 167 0002 00AF     		add	r7, sp, #0
 168              		.cfi_def_cfa_register 7
 140:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 141:Generated_Source\PSoC4/CyLib.c ****         CySysClkImoDisableWcoLock();
 142:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 143:Generated_Source\PSoC4/CyLib.c **** 
 144:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 145:Generated_Source\PSoC4/CyLib.c ****         CySysClkImoDisableUsbLock();
 146:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 147:Generated_Source\PSoC4/CyLib.c **** 
 148:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_IMO_CONFIG_REG &= ( uint32 ) ( ~( uint32 )CY_SYS_CLK_IMO_CONFIG_ENABLE);
 169              		.loc 1 148 0
 170 0004 044B     		ldr	r3, .L5
 171 0006 044A     		ldr	r2, .L5
 172 0008 1268     		ldr	r2, [r2]
 173 000a 5200     		lsls	r2, r2, #1
 174 000c 5208     		lsrs	r2, r2, #1
 175 000e 1A60     		str	r2, [r3]
 149:Generated_Source\PSoC4/CyLib.c **** }
 176              		.loc 1 149 0
 177 0010 C046     		nop
 178 0012 BD46     		mov	sp, r7
 179              		@ sp needed
 180 0014 80BD     		pop	{r7, pc}
 181              	.L6:
 182 0016 C046     		.align	2
 183              	.L5:
 184 0018 08010B40 		.word	1074462984
 185              		.cfi_endproc
 186              	.LFE3:
 187              		.size	CySysClkImoStop, .-CySysClkImoStop
 188              		.section	.text.CySysClkWriteHfclkDirect,"ax",%progbits
 189              		.align	2
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 7


 190              		.global	CySysClkWriteHfclkDirect
 191              		.code	16
 192              		.thumb_func
 193              		.type	CySysClkWriteHfclkDirect, %function
 194              	CySysClkWriteHfclkDirect:
 195              	.LFB4:
 150:Generated_Source\PSoC4/CyLib.c **** 
 151:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 152:Generated_Source\PSoC4/CyLib.c **** 
 153:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 154:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoEnableWcoLock
 155:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 156:Generated_Source\PSoC4/CyLib.c ****     *
 157:Generated_Source\PSoC4/CyLib.c ****     * Enables the IMO to WCO lock feature. This function works only if the WCO is
 158:Generated_Source\PSoC4/CyLib.c ****     * already enabled. If the WCO is not enabled then this function returns
 159:Generated_Source\PSoC4/CyLib.c ****     * without enabling the lock feature.
 160:Generated_Source\PSoC4/CyLib.c ****     *
 161:Generated_Source\PSoC4/CyLib.c ****     * It takes up to 20 ms for the IMO to stabilize. The delay is implemented with
 162:Generated_Source\PSoC4/CyLib.c ****     * CyDelay() function. The delay interval is measured based on the system
 163:Generated_Source\PSoC4/CyLib.c ****     * frequency defined by PSoC Creator at build time. If System clock frequency
 164:Generated_Source\PSoC4/CyLib.c ****     * is changed in runtime, the CyDelayFreq() with the appropriate parameter
 165:Generated_Source\PSoC4/CyLib.c ****     * should be called.
 166:Generated_Source\PSoC4/CyLib.c ****     *
 167:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, note that the IMO can lock to either WCO or USB
 168:Generated_Source\PSoC4/CyLib.c ****     * but not both.
 169:Generated_Source\PSoC4/CyLib.c ****     *
 170:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 171:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC 4500 / PSoC Analog Coprocessor / PSoC 4200L.
 172:Generated_Source\PSoC4/CyLib.c ****     *
 173:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 174:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoEnableWcoLock(void)
 175:Generated_Source\PSoC4/CyLib.c ****     {
 176:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 177:Generated_Source\PSoC4/CyLib.c ****             uint32 i;
 178:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 179:Generated_Source\PSoC4/CyLib.c **** 
 180:Generated_Source\PSoC4/CyLib.c ****         uint32 freq;
 181:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 182:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
 183:Generated_Source\PSoC4/CyLib.c ****         uint32 lfLimit = 0u;
 184:Generated_Source\PSoC4/CyLib.c ****         volatile uint32 flashCtlReg;
 185:Generated_Source\PSoC4/CyLib.c **** 
 186:Generated_Source\PSoC4/CyLib.c ****         if (0u != CySysClkWcoEnabled())
 187:Generated_Source\PSoC4/CyLib.c ****         {
 188:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
 189:Generated_Source\PSoC4/CyLib.c **** 
 190:Generated_Source\PSoC4/CyLib.c ****             /* Set oscillator interface control port to WCO */
 191:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB)
 192:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_OSCINTF_CTL_REG =
 193:Generated_Source\PSoC4/CyLib.c ****                     (CY_SYS_CLK_OSCINTF_CTL_REG & (uint32) ~CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_MASK) |
 194:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_WCO;
 195:Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB) */
 196:Generated_Source\PSoC4/CyLib.c **** 
 197:Generated_Source\PSoC4/CyLib.c ****             /* Get current IMO frequency based on the register value */
 198:Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSV2)
 199:Generated_Source\PSoC4/CyLib.c ****                 freq = CY_SYS_CLK_IMO_MIN_FREQ_MHZ;
 200:Generated_Source\PSoC4/CyLib.c ****                 for(i = 0u; i < CY_SYS_CLK_IMO_FREQ_TABLE_SIZE; i++)
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 8


 201:Generated_Source\PSoC4/CyLib.c ****                 {
 202:Generated_Source\PSoC4/CyLib.c ****                     if ((uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS_MASK) == cyImo
 203:Generated_Source\PSoC4/CyLib.c ****                     {
 204:Generated_Source\PSoC4/CyLib.c ****                         freq = i + CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET;
 205:Generated_Source\PSoC4/CyLib.c ****                         break;
 206:Generated_Source\PSoC4/CyLib.c ****                     }
 207:Generated_Source\PSoC4/CyLib.c ****                 }
 208:Generated_Source\PSoC4/CyLib.c ****             #else
 209:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate frequency by shifting register field value and adding constant. */
 210:Generated_Source\PSoC4/CyLib.c ****                 #if(CY_IP_SRSSLT)
 211:Generated_Source\PSoC4/CyLib.c ****                     freq = (((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT
 212:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ
 213:Generated_Source\PSoC4/CyLib.c ****                                       ((CY_SYS_CLK_SELECT_REG >> CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT)
 214:Generated_Source\PSoC4/CyLib.c ****                                        (uint32) CY_SYS_CLK_SELECT_HFCLK_DIV_MASK));
 215:Generated_Source\PSoC4/CyLib.c ****                 #else
 216:Generated_Source\PSoC4/CyLib.c ****                     freq = ((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT_
 217:Generated_Source\PSoC4/CyLib.c ****                                        CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ_
 218:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CY_IP_SRSSLT) */
 219:Generated_Source\PSoC4/CyLib.c **** 
 220:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_SRSSV2) */
 221:Generated_Source\PSoC4/CyLib.c **** 
 222:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = 0;
 223:Generated_Source\PSoC4/CyLib.c **** 
 224:Generated_Source\PSoC4/CyLib.c ****             /* For the WCO locking mode, the IMO gain needs to be CY_SYS_CLK_IMO_TRIM4_GAIN */
 225:Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSV2)
 226:Generated_Source\PSoC4/CyLib.c ****                 if ((CY_SYS_CLK_IMO_TRIM4_REG & CY_SYS_CLK_IMO_TRIM4_GAIN_MASK) == 0u)
 227:Generated_Source\PSoC4/CyLib.c ****                 {
 228:Generated_Source\PSoC4/CyLib.c ****                      CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IM
 229:Generated_Source\PSoC4/CyLib.c ****                                                  CY_SYS_CLK_IMO_TRIM4_WCO_GAIN;
 230:Generated_Source\PSoC4/CyLib.c ****                 }
 231:Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_SRSSV2) */
 232:Generated_Source\PSoC4/CyLib.c **** 
 233:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_WCO_DPLL_REG & ~(CY_SYS_CLK_WCO_DPLL_MULT_MASK |
 234:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN_MASK |
 235:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN_MASK |
 236:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MASK);
 237:Generated_Source\PSoC4/CyLib.c **** 
 238:Generated_Source\PSoC4/CyLib.c ****             /* Set multiplier to determine IMO frequency in multiples of the WCO frequency */
 239:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (CY_SYS_CLK_WCO_DPLL_MULT_VALUE(freq) & CY_SYS_CLK_WCO_DPLL_MULT_MASK);
 240:Generated_Source\PSoC4/CyLib.c **** 
 241:Generated_Source\PSoC4/CyLib.c ****             /* Set DPLL Loop Filter Integral and Proportional Gains Setting */
 242:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN | CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN);
 243:Generated_Source\PSoC4/CyLib.c **** 
 244:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_DPLL_REG = regTmp;
 245:Generated_Source\PSoC4/CyLib.c **** 
 246:Generated_Source\PSoC4/CyLib.c ****             flashCtlReg = CY_FLASH_CTL_REG;
 247:Generated_Source\PSoC4/CyLib.c ****             CySysFlashSetWaitCycles(CY_SYS_CLK_IMO_MAX_FREQ_MHZ);
 248:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_CONFIG_REG |= CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE;
 249:Generated_Source\PSoC4/CyLib.c **** 
 250:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_WCO_DPLL_REG & ~(CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MASK);
 251:Generated_Source\PSoC4/CyLib.c **** 
 252:Generated_Source\PSoC4/CyLib.c ****             while (lfLimit < (CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX - CY_SYS_CLK_WCO_CONFIG_DPLL_
 253:Generated_Source\PSoC4/CyLib.c ****             {
 254:Generated_Source\PSoC4/CyLib.c ****                 CyDelay(CY_SYS_CLK_WCO_DPLL_TIMEOUT_MS);
 255:Generated_Source\PSoC4/CyLib.c ****                 lfLimit += CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_STEP;
 256:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_WCO_DPLL_REG = (regTmp | (lfLimit << CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT
 257:Generated_Source\PSoC4/CyLib.c ****             }
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 9


 258:Generated_Source\PSoC4/CyLib.c **** 
 259:Generated_Source\PSoC4/CyLib.c ****             CyDelay(CY_SYS_CLK_WCO_DPLL_TIMEOUT_MS);
 260:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_DPLL_REG = (regTmp | (CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX <<
 261:Generated_Source\PSoC4/CyLib.c ****                                                  CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_SHIFT));
 262:Generated_Source\PSoC4/CyLib.c **** 
 263:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CTL_REG = flashCtlReg;
 264:Generated_Source\PSoC4/CyLib.c **** 
 265:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
 266:Generated_Source\PSoC4/CyLib.c ****         }
 267:Generated_Source\PSoC4/CyLib.c ****     }
 268:Generated_Source\PSoC4/CyLib.c **** 
 269:Generated_Source\PSoC4/CyLib.c **** 
 270:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 271:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoDisableWcoLock
 272:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 273:Generated_Source\PSoC4/CyLib.c ****     *
 274:Generated_Source\PSoC4/CyLib.c ****     * Disables the IMO to WCO lock feature.
 275:Generated_Source\PSoC4/CyLib.c ****     *
 276:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, note that the IMO can lock to either WCO or USB
 277:Generated_Source\PSoC4/CyLib.c ****     * but not both.
 278:Generated_Source\PSoC4/CyLib.c ****     *
 279:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 280:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC 4500 / PSoC Analog Coprocessor / PSoC 4200L.
 281:Generated_Source\PSoC4/CyLib.c ****     *
 282:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 283:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoDisableWcoLock(void)
 284:Generated_Source\PSoC4/CyLib.c ****     {
 285:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 286:Generated_Source\PSoC4/CyLib.c ****             uint32 i;
 287:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 288:Generated_Source\PSoC4/CyLib.c **** 
 289:Generated_Source\PSoC4/CyLib.c ****         uint32 freq;
 290:Generated_Source\PSoC4/CyLib.c **** 
 291:Generated_Source\PSoC4/CyLib.c ****         /* Get current IMO frequency based on the register value */
 292:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 293:Generated_Source\PSoC4/CyLib.c ****             freq = CY_SYS_CLK_IMO_MIN_FREQ_MHZ;
 294:Generated_Source\PSoC4/CyLib.c ****             for(i = 0u; i < CY_SYS_CLK_IMO_FREQ_TABLE_SIZE; i++)
 295:Generated_Source\PSoC4/CyLib.c ****             {
 296:Generated_Source\PSoC4/CyLib.c ****                 if ((uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS_MASK) == cyImoFreq
 297:Generated_Source\PSoC4/CyLib.c ****                 {
 298:Generated_Source\PSoC4/CyLib.c ****                     freq = i + CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET;
 299:Generated_Source\PSoC4/CyLib.c ****                     break;
 300:Generated_Source\PSoC4/CyLib.c ****                 }
 301:Generated_Source\PSoC4/CyLib.c ****             }
 302:Generated_Source\PSoC4/CyLib.c ****         #else
 303:Generated_Source\PSoC4/CyLib.c ****             /* Calculate frequency by shifting register field value and adding constant. */
 304:Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSLT)
 305:Generated_Source\PSoC4/CyLib.c ****                 freq = (((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT_FRE
 306:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ_MHZ
 307:Generated_Source\PSoC4/CyLib.c ****                                   ((CY_SYS_CLK_SELECT_REG >> CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT) &
 308:Generated_Source\PSoC4/CyLib.c ****                                    (uint32) CY_SYS_CLK_SELECT_HFCLK_DIV_MASK));
 309:Generated_Source\PSoC4/CyLib.c ****             #else
 310:Generated_Source\PSoC4/CyLib.c ****                 freq = ((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT_FREQ
 311:Generated_Source\PSoC4/CyLib.c ****                                    CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ_MHZ)
 312:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_SRSSLT) */
 313:Generated_Source\PSoC4/CyLib.c **** 
 314:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 10


 315:Generated_Source\PSoC4/CyLib.c **** 
 316:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_WCO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE;
 317:Generated_Source\PSoC4/CyLib.c **** 
 318:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSLT)
 319:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ);
 320:Generated_Source\PSoC4/CyLib.c ****         #else
 321:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFS
 322:Generated_Source\PSoC4/CyLib.c ****         #endif
 323:Generated_Source\PSoC4/CyLib.c ****     }
 324:Generated_Source\PSoC4/CyLib.c **** 
 325:Generated_Source\PSoC4/CyLib.c **** 
 326:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 327:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoGetWcoLock
 328:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 329:Generated_Source\PSoC4/CyLib.c ****     *
 330:Generated_Source\PSoC4/CyLib.c ****     * Reports the IMO to WCO lock enable state.
 331:Generated_Source\PSoC4/CyLib.c ****     *
 332:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 333:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC 4500 / PSoC Analog Coprocessor / PSoC 4200L.
 334:Generated_Source\PSoC4/CyLib.c ****     *
 335:Generated_Source\PSoC4/CyLib.c ****     * \return 1 if IMO to WCO lock is enabled.
 336:Generated_Source\PSoC4/CyLib.c ****     * \return 0 if IMO to WCO lock is disabled.
 337:Generated_Source\PSoC4/CyLib.c ****     *
 338:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 339:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoGetWcoLock(void)
 340:Generated_Source\PSoC4/CyLib.c ****     {
 341:Generated_Source\PSoC4/CyLib.c ****         return ((0u != (CY_SYS_CLK_WCO_CONFIG_REG & CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE)) ?
 342:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 1u :
 343:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 0u);
 344:Generated_Source\PSoC4/CyLib.c ****     }
 345:Generated_Source\PSoC4/CyLib.c **** 
 346:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 347:Generated_Source\PSoC4/CyLib.c **** 
 348:Generated_Source\PSoC4/CyLib.c **** 
 349:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 350:Generated_Source\PSoC4/CyLib.c **** 
 351:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 352:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoEnableUsbLock
 353:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 354:Generated_Source\PSoC4/CyLib.c ****     *
 355:Generated_Source\PSoC4/CyLib.c ****     * Enables the IMO to USB lock feature.
 356:Generated_Source\PSoC4/CyLib.c ****     *
 357:Generated_Source\PSoC4/CyLib.c ****     * This function must be called before CySysClkWriteImoFreq().
 358:Generated_Source\PSoC4/CyLib.c ****     *
 359:Generated_Source\PSoC4/CyLib.c ****     * This function is called from CySysClkImoStart() function if USB lock
 360:Generated_Source\PSoC4/CyLib.c ****     * selected in the Design Wide Resources tab.
 361:Generated_Source\PSoC4/CyLib.c ****     *
 362:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 363:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 364:Generated_Source\PSoC4/CyLib.c ****     *
 365:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 366:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoEnableUsbLock(void)
 367:Generated_Source\PSoC4/CyLib.c ****     {
 368:Generated_Source\PSoC4/CyLib.c ****         /* Set oscillator interface control port to USB */
 369:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB)
 370:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_OSCINTF_CTL_REG = (CY_SYS_CLK_OSCINTF_CTL_REG & (uint32) ~CY_SYS_CLK_OSCINTF
 371:Generated_Source\PSoC4/CyLib.c ****                                           CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_USB;
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 11


 372:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB) */
 373:Generated_Source\PSoC4/CyLib.c **** 
 374:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 375:Generated_Source\PSoC4/CyLib.c **** 
 376:Generated_Source\PSoC4/CyLib.c ****             /* Save trims to restore in CySysClkImoDisableUsbLock() */
 377:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoTrim4 = CY_SYS_CLK_IMO_TRIM4_REG;
 378:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoTrim5 = CY_PWR_BG_TRIM5_REG;
 379:Generated_Source\PSoC4/CyLib.c **** 
 380:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoSetImoTrims();
 381:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoSetPwrBgTrim5();
 382:Generated_Source\PSoC4/CyLib.c **** 
 383:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 384:Generated_Source\PSoC4/CyLib.c **** 
 385:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_USBDEVv2_CR1_REG |= CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK;
 386:Generated_Source\PSoC4/CyLib.c ****     }
 387:Generated_Source\PSoC4/CyLib.c **** 
 388:Generated_Source\PSoC4/CyLib.c **** 
 389:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 390:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoDisableUsbLock
 391:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 392:Generated_Source\PSoC4/CyLib.c ****     *
 393:Generated_Source\PSoC4/CyLib.c ****     * Disables the IMO to USB lock feature.
 394:Generated_Source\PSoC4/CyLib.c ****     *
 395:Generated_Source\PSoC4/CyLib.c ****     * This function is called from CySysClkImoStop() function if USB lock selected
 396:Generated_Source\PSoC4/CyLib.c ****     * in the Design Wide Resources tab.
 397:Generated_Source\PSoC4/CyLib.c ****     *
 398:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 399:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 400:Generated_Source\PSoC4/CyLib.c ****     *
 401:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 402:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoDisableUsbLock(void)
 403:Generated_Source\PSoC4/CyLib.c ****     {
 404:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 405:Generated_Source\PSoC4/CyLib.c ****             uint32 i;
 406:Generated_Source\PSoC4/CyLib.c **** 
 407:Generated_Source\PSoC4/CyLib.c ****             /* Get current IMO frequency based on the register value */
 408:Generated_Source\PSoC4/CyLib.c ****             uint32 freq = CY_SYS_CLK_IMO_MIN_FREQ_MHZ;
 409:Generated_Source\PSoC4/CyLib.c **** 
 410:Generated_Source\PSoC4/CyLib.c ****             for(i = 0u; i < CY_SYS_CLK_IMO_FREQ_TABLE_SIZE; i++)
 411:Generated_Source\PSoC4/CyLib.c ****             {
 412:Generated_Source\PSoC4/CyLib.c ****                 if ((uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS_MASK) == cyImoFreq
 413:Generated_Source\PSoC4/CyLib.c ****                 {
 414:Generated_Source\PSoC4/CyLib.c ****                     freq = i + CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET;
 415:Generated_Source\PSoC4/CyLib.c ****                     break;
 416:Generated_Source\PSoC4/CyLib.c ****                 }
 417:Generated_Source\PSoC4/CyLib.c ****             }
 418:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 419:Generated_Source\PSoC4/CyLib.c **** 
 420:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_USBDEVv2_CR1_REG &= (uint32) ~CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK;
 421:Generated_Source\PSoC4/CyLib.c **** 
 422:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 423:Generated_Source\PSoC4/CyLib.c ****             /* Restore IMO trim registers saved by CySysClkImoEnableUsbLock() */
 424:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM4_REG = ((CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_
 425:Generated_Source\PSoC4/CyLib.c ****                                         (CySysClkImoTrim4 & CY_SYS_CLK_IMO_TRIM4_GAIN_MASK));
 426:Generated_Source\PSoC4/CyLib.c ****             CY_PWR_BG_TRIM5_REG = CySysClkImoTrim5;
 427:Generated_Source\PSoC4/CyLib.c **** 
 428:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFS
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 12


 429:Generated_Source\PSoC4/CyLib.c **** 
 430:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 431:Generated_Source\PSoC4/CyLib.c ****     }
 432:Generated_Source\PSoC4/CyLib.c **** 
 433:Generated_Source\PSoC4/CyLib.c **** 
 434:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 435:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoGetUsbLock
 436:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 437:Generated_Source\PSoC4/CyLib.c ****     *
 438:Generated_Source\PSoC4/CyLib.c ****     * Reports the IMO to USB lock enable state.
 439:Generated_Source\PSoC4/CyLib.c ****     *
 440:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 441:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 442:Generated_Source\PSoC4/CyLib.c ****     *
 443:Generated_Source\PSoC4/CyLib.c ****     * \return 1 if IMO to USB lock is enabled.
 444:Generated_Source\PSoC4/CyLib.c ****     * \return 0 if IMO to USB lock is disabled.
 445:Generated_Source\PSoC4/CyLib.c ****     *
 446:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 447:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoGetUsbLock(void)
 448:Generated_Source\PSoC4/CyLib.c ****     {
 449:Generated_Source\PSoC4/CyLib.c ****         return ((0u != (CY_SYS_CLK_USBDEVv2_CR1_REG & CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK)) ?
 450:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 1u :
 451:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 0u);
 452:Generated_Source\PSoC4/CyLib.c ****     }
 453:Generated_Source\PSoC4/CyLib.c **** 
 454:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2)
 455:Generated_Source\PSoC4/CyLib.c **** 
 456:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 457:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoSetPwrBgTrim5
 458:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 459:Generated_Source\PSoC4/CyLib.c ****     *
 460:Generated_Source\PSoC4/CyLib.c ****     * Updates Bandgap trim register based on the test program revision.
 461:Generated_Source\PSoC4/CyLib.c ****     *
 462:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 463:Generated_Source\PSoC4/CyLib.c ****     static void CySysClkImoSetPwrBgTrim5(void)
 464:Generated_Source\PSoC4/CyLib.c ****     {
 465:Generated_Source\PSoC4/CyLib.c ****         /* Get sort test revision number */
 466:Generated_Source\PSoC4/CyLib.c ****         uint32  testRev = ((CY_SFLASH_CRI_TESTPGM_REV_REG >> CYSFLASH_CRI_testpgm_rev__OFFSET) &
 467:Generated_Source\PSoC4/CyLib.c ****                             CYSFLASH_CRI_testpgm_rev_MASK);
 468:Generated_Source\PSoC4/CyLib.c **** 
 469:Generated_Source\PSoC4/CyLib.c ****         if(testRev <= CY_CRI_TESTPGM_9_REV)
 470:Generated_Source\PSoC4/CyLib.c ****         {
 471:Generated_Source\PSoC4/CyLib.c ****             CY_PWR_BG_TRIM5_REG = CY_SFLASH_IMO_TMPCO0_REG;
 472:Generated_Source\PSoC4/CyLib.c ****         }
 473:Generated_Source\PSoC4/CyLib.c ****         else
 474:Generated_Source\PSoC4/CyLib.c ****         {
 475:Generated_Source\PSoC4/CyLib.c ****             CY_PWR_BG_TRIM5_REG = CY_SFLASH_USBMODE_IMO_TEMPCO_REG;
 476:Generated_Source\PSoC4/CyLib.c ****         }
 477:Generated_Source\PSoC4/CyLib.c ****     }
 478:Generated_Source\PSoC4/CyLib.c **** 
 479:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 480:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoSetImoTrims
 481:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 482:Generated_Source\PSoC4/CyLib.c ****     *
 483:Generated_Source\PSoC4/CyLib.c ****     * Updates IMO trim registers based on the IMO frequency and test program
 484:Generated_Source\PSoC4/CyLib.c ****     * revision.
 485:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 13


 486:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 487:Generated_Source\PSoC4/CyLib.c ****     static void CySysClkImoSetImoTrims(void)
 488:Generated_Source\PSoC4/CyLib.c ****     {
 489:Generated_Source\PSoC4/CyLib.c ****         uint32 i;
 490:Generated_Source\PSoC4/CyLib.c **** 
 491:Generated_Source\PSoC4/CyLib.c ****         /* Get current IMO frequency based on the register value */
 492:Generated_Source\PSoC4/CyLib.c ****         uint32 freq = CY_SYS_CLK_IMO_MIN_FREQ_MHZ;
 493:Generated_Source\PSoC4/CyLib.c **** 
 494:Generated_Source\PSoC4/CyLib.c ****         for(i = 0u; i < CY_SYS_CLK_IMO_FREQ_TABLE_SIZE; i++)
 495:Generated_Source\PSoC4/CyLib.c ****         {
 496:Generated_Source\PSoC4/CyLib.c ****             if ((uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS_MASK) == cyImoFreqMhz2
 497:Generated_Source\PSoC4/CyLib.c ****             {
 498:Generated_Source\PSoC4/CyLib.c ****                 freq = i + CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET;
 499:Generated_Source\PSoC4/CyLib.c ****                 break;
 500:Generated_Source\PSoC4/CyLib.c ****             }
 501:Generated_Source\PSoC4/CyLib.c ****         }
 502:Generated_Source\PSoC4/CyLib.c **** 
 503:Generated_Source\PSoC4/CyLib.c ****         /* Get sort test revision number */
 504:Generated_Source\PSoC4/CyLib.c ****         uint32  testRev = ((CY_SFLASH_CRI_TESTPGM_REV_REG >> CYSFLASH_CRI_testpgm_rev__OFFSET) &
 505:Generated_Source\PSoC4/CyLib.c ****             CYSFLASH_CRI_testpgm_rev_MASK);
 506:Generated_Source\PSoC4/CyLib.c **** 
 507:Generated_Source\PSoC4/CyLib.c ****         if(testRev <= CY_CRI_TESTPGM_6_REV)
 508:Generated_Source\PSoC4/CyLib.c ****         {
 509:Generated_Source\PSoC4/CyLib.c ****             if (48u == freq)
 510:Generated_Source\PSoC4/CyLib.c ****             {
 511:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM1_REG = (uint32) CY_SFLASH_IMO_TRIM_USBMODE_48_REG;
 512:Generated_Source\PSoC4/CyLib.c ****             }
 513:Generated_Source\PSoC4/CyLib.c ****             else if (24u == freq)
 514:Generated_Source\PSoC4/CyLib.c ****             {
 515:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM1_REG = (uint32) CY_SFLASH_IMO_TRIM_USBMODE_24_REG;
 516:Generated_Source\PSoC4/CyLib.c ****             }
 517:Generated_Source\PSoC4/CyLib.c ****             else
 518:Generated_Source\PSoC4/CyLib.c ****             {
 519:Generated_Source\PSoC4/CyLib.c ****                 /* Do nothing */
 520:Generated_Source\PSoC4/CyLib.c ****             }
 521:Generated_Source\PSoC4/CyLib.c **** 
 522:Generated_Source\PSoC4/CyLib.c ****             /* Set IMO Gain in IMO Trim Register 4 */
 523:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
 524:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_IMO_TRIM4_USB_GAIN;
 525:Generated_Source\PSoC4/CyLib.c ****         }
 526:Generated_Source\PSoC4/CyLib.c ****         else
 527:Generated_Source\PSoC4/CyLib.c ****         {
 528:Generated_Source\PSoC4/CyLib.c ****             if (48u == freq)
 529:Generated_Source\PSoC4/CyLib.c ****             {
 530:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM1_REG = (uint32) CY_SFLASH_CU_IMO_TRIM_USBMODE_48_REG;
 531:Generated_Source\PSoC4/CyLib.c ****             }
 532:Generated_Source\PSoC4/CyLib.c ****             else if (24u == freq)
 533:Generated_Source\PSoC4/CyLib.c ****             {
 534:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM1_REG = (uint32) CY_SFLASH_CU_IMO_TRIM_USBMODE_24_REG;
 535:Generated_Source\PSoC4/CyLib.c ****             }
 536:Generated_Source\PSoC4/CyLib.c ****             else
 537:Generated_Source\PSoC4/CyLib.c ****             {
 538:Generated_Source\PSoC4/CyLib.c ****                 /* Do nothing */
 539:Generated_Source\PSoC4/CyLib.c ****             }
 540:Generated_Source\PSoC4/CyLib.c **** 
 541:Generated_Source\PSoC4/CyLib.c ****             /* Set IMO Gain in IMO Trim Register 4 */
 542:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 14


 543:Generated_Source\PSoC4/CyLib.c ****                                         CY_SFLASH_USBMODE_IMO_GAIN_TRIM_REG;
 544:Generated_Source\PSoC4/CyLib.c ****         }
 545:Generated_Source\PSoC4/CyLib.c ****     }
 546:Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_IP_SRSSV2) */
 547:Generated_Source\PSoC4/CyLib.c **** 
 548:Generated_Source\PSoC4/CyLib.c **** #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 549:Generated_Source\PSoC4/CyLib.c **** 
 550:Generated_Source\PSoC4/CyLib.c **** 
 551:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 552:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteHfclkDirect
 553:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 554:Generated_Source\PSoC4/CyLib.c **** *
 555:Generated_Source\PSoC4/CyLib.c **** * Selects the direct source for the HFCLK.
 556:Generated_Source\PSoC4/CyLib.c **** *
 557:Generated_Source\PSoC4/CyLib.c **** * The new source must be running and stable before calling this function.
 558:Generated_Source\PSoC4/CyLib.c **** *
 559:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000:
 560:Generated_Source\PSoC4/CyLib.c **** * The SYSCLK has a maximum speed of 16 MHz, so HFCLK and SYSCLK dividers should
 561:Generated_Source\PSoC4/CyLib.c **** * be selected in a way to not to exceed 16 MHz for the System clock.
 562:Generated_Source\PSoC4/CyLib.c **** *
 563:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during device operation, call
 564:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() with the appropriate parameter to adjust the number
 565:Generated_Source\PSoC4/CyLib.c **** * of clock cycles the cache will wait before sampling data comes back from
 566:Generated_Source\PSoC4/CyLib.c **** * Flash. If the SYSCLK clock frequency decreases, you can call
 567:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() to improve the CPU performance. See
 568:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() description for more information.
 569:Generated_Source\PSoC4/CyLib.c **** *
 570:Generated_Source\PSoC4/CyLib.c **** * Do not select PLL as the source for HFCLK if PLL output frequency exceeds
 571:Generated_Source\PSoC4/CyLib.c **** * maximum permissible value for HFCLK.
 572:Generated_Source\PSoC4/CyLib.c **** *
 573:Generated_Source\PSoC4/CyLib.c **** * \param clkSelect One of the available HFCLK direct sources.
 574:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_IMO     IMO.
 575:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_EXTCLK  External clock pin.
 576:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_ECO     External crystal oscillator. Applicable for
 577:Generated_Source\PSoC4/CyLib.c **** *                          PSoC 4100 BLE / PSoC 4200 BLE / PSoC 4200L /
 578:Generated_Source\PSoC4/CyLib.c **** *                          4100S / 4500 with ECO.
 579:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_PLL0    PLL#0. Applicable for PSoC 4200L /
 580:Generated_Source\PSoC4/CyLib.c **** *                          4100S / 4500 with PLL.
 581:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_PLL1    PLL#1. Applicable for PSoC 4200L.
 582:Generated_Source\PSoC4/CyLib.c **** *
 583:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 584:Generated_Source\PSoC4/CyLib.c **** void CySysClkWriteHfclkDirect(uint32 clkSelect)
 585:Generated_Source\PSoC4/CyLib.c **** {
 196              		.loc 1 585 0
 197              		.cfi_startproc
 198              		@ args = 0, pretend = 0, frame = 16
 199              		@ frame_needed = 1, uses_anonymous_args = 0
 200 0000 90B5     		push	{r4, r7, lr}
 201              		.cfi_def_cfa_offset 12
 202              		.cfi_offset 4, -12
 203              		.cfi_offset 7, -8
 204              		.cfi_offset 14, -4
 205 0002 85B0     		sub	sp, sp, #20
 206              		.cfi_def_cfa_offset 32
 207 0004 00AF     		add	r7, sp, #0
 208              		.cfi_def_cfa_register 7
 209 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 15


 586:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 587:Generated_Source\PSoC4/CyLib.c ****     uint32 tmpReg;
 588:Generated_Source\PSoC4/CyLib.c **** 
 589:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_SRSSLT && CY_IP_PLL)
 590:Generated_Source\PSoC4/CyLib.c ****         uint8 i = 0u;
 591:Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_IP_SRSSLT && CY_IP_PLL) */
 592:Generated_Source\PSoC4/CyLib.c **** 
 593:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 210              		.loc 1 593 0
 211 0008 0F23     		movs	r3, #15
 212 000a FC18     		adds	r4, r7, r3
 213 000c FFF7FEFF 		bl	CyEnterCriticalSection
 214 0010 0300     		movs	r3, r0
 215 0012 2370     		strb	r3, [r4]
 594:Generated_Source\PSoC4/CyLib.c **** 
 595:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSLT && CY_IP_PLL)
 596:Generated_Source\PSoC4/CyLib.c ****     if ((CY_SYS_CLK_HFCLK_PLL0 == clkSelect) || (CY_SYS_CLK_HFCLK_ECO == clkSelect))
 597:Generated_Source\PSoC4/CyLib.c ****     {
 598:Generated_Source\PSoC4/CyLib.c ****         tmpReg = CY_SYS_CLK_SELECT_REG & ~CY_SYS_CLK_SELECT_DIRECT_SEL_MASK;
 599:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= CY_SYS_CLK_HFCLK_IMO;
 600:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_SELECT_REG = tmpReg;
 601:Generated_Source\PSoC4/CyLib.c **** 
 602:Generated_Source\PSoC4/CyLib.c ****         /* SRSSLT block does not have registers to select PLL. It is part of EXCO */
 603:Generated_Source\PSoC4/CyLib.c ****         tmpReg = CY_SYS_ECO_CLK_SELECT_REG & ~CY_SYS_ECO_CLK_SELECT_ECO_PLL_MASK;
 604:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= ((clkSelect & CY_SYS_CLK_SELECT_HFCLK_SEL_PLL_MASK) >> CY_SYS_CLK_SELECT_HFCLK_PL
 605:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_ECO_CLK_SELECT_REG = tmpReg;
 606:Generated_Source\PSoC4/CyLib.c **** 
 607:Generated_Source\PSoC4/CyLib.c ****         /* Check if ECO is enabled and running */
 608:Generated_Source\PSoC4/CyLib.c ****         if ((0UL == (CY_SYS_CLK_ECO_CONFIG_REG & CY_SYS_CLK_ECO_CONFIG_ENABLE)) ||
 609:Generated_Source\PSoC4/CyLib.c ****             (0UL != (CY_SYS_CLK_ECO_STATUS_REG & CY_SYS_CLK_ECO_STATUS_WATCHDOG_ERROR)))
 610:Generated_Source\PSoC4/CyLib.c ****         {
 611:Generated_Source\PSoC4/CyLib.c ****             /* Generate clock sequence to change clock source in CY_SYS_ECO_CLK_SELECT_REG */
 612:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_EXCO_PGM_CLK_REG |= CY_SYS_EXCO_PGM_CLK_ENABLE_MASK;
 613:Generated_Source\PSoC4/CyLib.c **** 
 614:Generated_Source\PSoC4/CyLib.c ****             for(i = 0u; i < CY_SYS_EXCO_PGM_CLK_SEQ_GENERATOR; i++)
 615:Generated_Source\PSoC4/CyLib.c ****             {
 616:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_EXCO_PGM_CLK_REG |= CY_SYS_EXCO_PGM_CLK_CLK_ECO_MASK;
 617:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_EXCO_PGM_CLK_REG &= ~CY_SYS_EXCO_PGM_CLK_CLK_ECO_MASK;
 618:Generated_Source\PSoC4/CyLib.c ****             }
 619:Generated_Source\PSoC4/CyLib.c **** 
 620:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_EXCO_PGM_CLK_REG &= ~CY_SYS_EXCO_PGM_CLK_ENABLE_MASK;
 621:Generated_Source\PSoC4/CyLib.c ****         }
 622:Generated_Source\PSoC4/CyLib.c ****     }
 623:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSLT && CY_IP_PLL) */
 624:Generated_Source\PSoC4/CyLib.c **** 
 625:Generated_Source\PSoC4/CyLib.c ****     tmpReg = CY_SYS_CLK_SELECT_REG & ~(CY_SYS_CLK_SELECT_DIRECT_SEL_MASK |
 216              		.loc 1 625 0
 217 0014 0B4B     		ldr	r3, .L8
 218 0016 1B68     		ldr	r3, [r3]
 219 0018 0722     		movs	r2, #7
 220 001a 9343     		bics	r3, r2
 221 001c BB60     		str	r3, [r7, #8]
 626:Generated_Source\PSoC4/CyLib.c ****                                        CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 627:Generated_Source\PSoC4/CyLib.c **** 
 628:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
 629:Generated_Source\PSoC4/CyLib.c ****     if ((CY_SYS_CLK_HFCLK_PLL0 == clkSelect) || (CY_SYS_CLK_HFCLK_PLL1 == clkSelect))
 630:Generated_Source\PSoC4/CyLib.c ****     {
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 16


 631:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= (clkSelect & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 632:Generated_Source\PSoC4/CyLib.c ****     }
 633:Generated_Source\PSoC4/CyLib.c ****     else
 634:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
 635:Generated_Source\PSoC4/CyLib.c ****     {
 636:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= (clkSelect & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK);
 222              		.loc 1 636 0
 223 001e 7B68     		ldr	r3, [r7, #4]
 224 0020 0722     		movs	r2, #7
 225 0022 1340     		ands	r3, r2
 226 0024 BA68     		ldr	r2, [r7, #8]
 227 0026 1343     		orrs	r3, r2
 228 0028 BB60     		str	r3, [r7, #8]
 637:Generated_Source\PSoC4/CyLib.c ****     }
 638:Generated_Source\PSoC4/CyLib.c **** 
 639:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_SELECT_REG = tmpReg;
 229              		.loc 1 639 0
 230 002a 064B     		ldr	r3, .L8
 231 002c BA68     		ldr	r2, [r7, #8]
 232 002e 1A60     		str	r2, [r3]
 640:Generated_Source\PSoC4/CyLib.c **** 
 641:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 233              		.loc 1 641 0
 234 0030 0F23     		movs	r3, #15
 235 0032 FB18     		adds	r3, r7, r3
 236 0034 1B78     		ldrb	r3, [r3]
 237 0036 1800     		movs	r0, r3
 238 0038 FFF7FEFF 		bl	CyExitCriticalSection
 642:Generated_Source\PSoC4/CyLib.c **** }
 239              		.loc 1 642 0
 240 003c C046     		nop
 241 003e BD46     		mov	sp, r7
 242 0040 05B0     		add	sp, sp, #20
 243              		@ sp needed
 244 0042 90BD     		pop	{r4, r7, pc}
 245              	.L9:
 246              		.align	2
 247              	.L8:
 248 0044 00010B40 		.word	1074462976
 249              		.cfi_endproc
 250              	.LFE4:
 251              		.size	CySysClkWriteHfclkDirect, .-CySysClkWriteHfclkDirect
 252              		.section	.text.CySysEnablePumpClock,"ax",%progbits
 253              		.align	2
 254              		.global	CySysEnablePumpClock
 255              		.code	16
 256              		.thumb_func
 257              		.type	CySysEnablePumpClock, %function
 258              	CySysEnablePumpClock:
 259              	.LFB5:
 643:Generated_Source\PSoC4/CyLib.c **** 
 644:Generated_Source\PSoC4/CyLib.c **** 
 645:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 646:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysEnablePumpClock
 647:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 648:Generated_Source\PSoC4/CyLib.c **** *
 649:Generated_Source\PSoC4/CyLib.c **** * Enables / disables the pump clock.
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 17


 650:Generated_Source\PSoC4/CyLib.c **** *
 651:Generated_Source\PSoC4/CyLib.c **** * \param enable
 652:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_PUMP_DISABLE - Disables the pump clock
 653:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_PUMP_ENABLE - Enables and restores the operating source of
 654:Generated_Source\PSoC4/CyLib.c **** * the pump clock.
 655:Generated_Source\PSoC4/CyLib.c **** *
 656:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
 657:Generated_Source\PSoC4/CyLib.c **** *  Enabling/disabling the pump clock does not guarantee glitch free operation
 658:Generated_Source\PSoC4/CyLib.c **** *  when changing the IMO parameters or clock divider settings.
 659:Generated_Source\PSoC4/CyLib.c **** *
 660:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 661:Generated_Source\PSoC4/CyLib.c **** void CySysEnablePumpClock(uint32 enable)
 662:Generated_Source\PSoC4/CyLib.c **** {
 260              		.loc 1 662 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 8
 263              		@ frame_needed = 1, uses_anonymous_args = 0
 264 0000 80B5     		push	{r7, lr}
 265              		.cfi_def_cfa_offset 8
 266              		.cfi_offset 7, -8
 267              		.cfi_offset 14, -4
 268 0002 82B0     		sub	sp, sp, #8
 269              		.cfi_def_cfa_offset 16
 270 0004 00AF     		add	r7, sp, #0
 271              		.cfi_def_cfa_register 7
 272 0006 7860     		str	r0, [r7, #4]
 663:Generated_Source\PSoC4/CyLib.c ****     #if(CY_IP_SRSSV2)
 664:Generated_Source\PSoC4/CyLib.c ****         if (0u != (CY_SYS_CLK_PUMP_ENABLE & enable))
 273              		.loc 1 664 0
 274 0008 7B68     		ldr	r3, [r7, #4]
 275 000a 0122     		movs	r2, #1
 276 000c 1340     		ands	r3, r2
 277 000e 08D0     		beq	.L11
 665:Generated_Source\PSoC4/CyLib.c ****         {
 666:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_CONFIG_REG |= (CySysClkPumpConfig << CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_SHIF
 278              		.loc 1 666 0
 279 0010 0C4A     		ldr	r2, .L14
 280 0012 0C4B     		ldr	r3, .L14
 281 0014 1968     		ldr	r1, [r3]
 282 0016 0C4B     		ldr	r3, .L14+4
 283 0018 1B68     		ldr	r3, [r3]
 284 001a 5B06     		lsls	r3, r3, #25
 285 001c 0B43     		orrs	r3, r1
 286 001e 1360     		str	r3, [r2]
 667:Generated_Source\PSoC4/CyLib.c ****         }
 668:Generated_Source\PSoC4/CyLib.c ****         else
 669:Generated_Source\PSoC4/CyLib.c ****         {
 670:Generated_Source\PSoC4/CyLib.c ****             CySysClkPumpConfig = (CY_SYS_CLK_IMO_CONFIG_REG >> CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_SHIFT
 671:Generated_Source\PSoC4/CyLib.c ****                                   CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_MASK;
 672:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_CONFIG_REG &= ~(CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_MASK << CY_SYS_CLK_IMO_CO
 673:Generated_Source\PSoC4/CyLib.c ****         }
 674:Generated_Source\PSoC4/CyLib.c ****     #else /* CY_IP_SRSSLT */
 675:Generated_Source\PSoC4/CyLib.c ****         if (0u != (CY_SYS_CLK_PUMP_ENABLE & enable))
 676:Generated_Source\PSoC4/CyLib.c ****         {
 677:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_SELECT_REG |= (CySysClkPumpConfig << CY_SYS_CLK_SELECT_PUMP_SEL_SHIFT);
 678:Generated_Source\PSoC4/CyLib.c ****         }
 679:Generated_Source\PSoC4/CyLib.c ****         else
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 18


 680:Generated_Source\PSoC4/CyLib.c ****         {
 681:Generated_Source\PSoC4/CyLib.c ****             CySysClkPumpConfig = (CY_SYS_CLK_SELECT_REG >> CY_SYS_CLK_SELECT_PUMP_SEL_SHIFT) &
 682:Generated_Source\PSoC4/CyLib.c ****                                   CY_SYS_CLK_SELECT_PUMP_SEL_MASK;
 683:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_SELECT_REG &= ~(CY_SYS_CLK_SELECT_PUMP_SEL_MASK << CY_SYS_CLK_SELECT_PUMP_SE
 684:Generated_Source\PSoC4/CyLib.c ****         }
 685:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_SRSSV2) */
 686:Generated_Source\PSoC4/CyLib.c **** }
 287              		.loc 1 686 0
 288 0020 0CE0     		b	.L13
 289              	.L11:
 670:Generated_Source\PSoC4/CyLib.c ****                                   CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_MASK;
 290              		.loc 1 670 0
 291 0022 084B     		ldr	r3, .L14
 292 0024 1B68     		ldr	r3, [r3]
 293 0026 5B0E     		lsrs	r3, r3, #25
 294 0028 0722     		movs	r2, #7
 295 002a 1A40     		ands	r2, r3
 296 002c 064B     		ldr	r3, .L14+4
 297 002e 1A60     		str	r2, [r3]
 672:Generated_Source\PSoC4/CyLib.c ****         }
 298              		.loc 1 672 0
 299 0030 044B     		ldr	r3, .L14
 300 0032 044A     		ldr	r2, .L14
 301 0034 1268     		ldr	r2, [r2]
 302 0036 0549     		ldr	r1, .L14+8
 303 0038 0A40     		ands	r2, r1
 304 003a 1A60     		str	r2, [r3]
 305              	.L13:
 306              		.loc 1 686 0
 307 003c C046     		nop
 308 003e BD46     		mov	sp, r7
 309 0040 02B0     		add	sp, sp, #8
 310              		@ sp needed
 311 0042 80BD     		pop	{r7, pc}
 312              	.L15:
 313              		.align	2
 314              	.L14:
 315 0044 08010B40 		.word	1074462984
 316 0048 00000000 		.word	CySysClkPumpConfig
 317 004c FFFFFFF1 		.word	-234881025
 318              		.cfi_endproc
 319              	.LFE5:
 320              		.size	CySysEnablePumpClock, .-CySysEnablePumpClock
 321              		.section	.text.CySysClkGetSysclkSource,"ax",%progbits
 322              		.align	2
 323              		.global	CySysClkGetSysclkSource
 324              		.code	16
 325              		.thumb_func
 326              		.type	CySysClkGetSysclkSource, %function
 327              	CySysClkGetSysclkSource:
 328              	.LFB6:
 687:Generated_Source\PSoC4/CyLib.c **** 
 688:Generated_Source\PSoC4/CyLib.c **** 
 689:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 690:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkGetSysclkSource
 691:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 692:Generated_Source\PSoC4/CyLib.c **** *
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 19


 693:Generated_Source\PSoC4/CyLib.c **** * Returns the source of the System clock.
 694:Generated_Source\PSoC4/CyLib.c **** *
 695:Generated_Source\PSoC4/CyLib.c **** * \return The same as \ref CySysClkWriteHfclkDirect() function parameters.
 696:Generated_Source\PSoC4/CyLib.c **** *
 697:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 698:Generated_Source\PSoC4/CyLib.c **** uint32 CySysClkGetSysclkSource(void)
 699:Generated_Source\PSoC4/CyLib.c **** {
 329              		.loc 1 699 0
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 8
 332              		@ frame_needed = 1, uses_anonymous_args = 0
 333 0000 90B5     		push	{r4, r7, lr}
 334              		.cfi_def_cfa_offset 12
 335              		.cfi_offset 4, -12
 336              		.cfi_offset 7, -8
 337              		.cfi_offset 14, -4
 338 0002 83B0     		sub	sp, sp, #12
 339              		.cfi_def_cfa_offset 24
 340 0004 00AF     		add	r7, sp, #0
 341              		.cfi_def_cfa_register 7
 700:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 701:Generated_Source\PSoC4/CyLib.c ****     uint32 sysclkSource;
 702:Generated_Source\PSoC4/CyLib.c **** 
 703:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 342              		.loc 1 703 0
 343 0006 FC1D     		adds	r4, r7, #7
 344 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 345 000c 0300     		movs	r3, r0
 346 000e 2370     		strb	r3, [r4]
 704:Generated_Source\PSoC4/CyLib.c **** 
 705:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
 706:Generated_Source\PSoC4/CyLib.c ****     if ((CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK) != 0u)
 707:Generated_Source\PSoC4/CyLib.c ****     {
 708:Generated_Source\PSoC4/CyLib.c ****         sysclkSource = (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 709:Generated_Source\PSoC4/CyLib.c ****     }
 710:Generated_Source\PSoC4/CyLib.c ****     else
 711:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
 712:Generated_Source\PSoC4/CyLib.c ****     {
 713:Generated_Source\PSoC4/CyLib.c ****         sysclkSource = (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK);
 347              		.loc 1 713 0
 348 0010 074B     		ldr	r3, .L18
 349 0012 1B68     		ldr	r3, [r3]
 350 0014 0722     		movs	r2, #7
 351 0016 1340     		ands	r3, r2
 352 0018 3B60     		str	r3, [r7]
 714:Generated_Source\PSoC4/CyLib.c **** 
 715:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_SRSSLT && CY_IP_PLL)
 716:Generated_Source\PSoC4/CyLib.c ****         sysclkSource |= (((uint32)(CY_SYS_ECO_CLK_SELECT_REG & CY_SYS_ECO_CLK_SELECT_ECO_PLL_MASK))
 717:Generated_Source\PSoC4/CyLib.c ****                          CY_SYS_CLK_SELECT_HFCLK_PLL_SHIFT);
 718:Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_IP_SRSSLT && CY_IP_PLL) */
 719:Generated_Source\PSoC4/CyLib.c **** 
 720:Generated_Source\PSoC4/CyLib.c ****     }
 721:Generated_Source\PSoC4/CyLib.c **** 
 722:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 353              		.loc 1 722 0
 354 001a FB1D     		adds	r3, r7, #7
 355 001c 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 20


 356 001e 1800     		movs	r0, r3
 357 0020 FFF7FEFF 		bl	CyExitCriticalSection
 723:Generated_Source\PSoC4/CyLib.c **** 
 724:Generated_Source\PSoC4/CyLib.c ****     return (sysclkSource);
 358              		.loc 1 724 0
 359 0024 3B68     		ldr	r3, [r7]
 725:Generated_Source\PSoC4/CyLib.c **** }
 360              		.loc 1 725 0
 361 0026 1800     		movs	r0, r3
 362 0028 BD46     		mov	sp, r7
 363 002a 03B0     		add	sp, sp, #12
 364              		@ sp needed
 365 002c 90BD     		pop	{r4, r7, pc}
 366              	.L19:
 367 002e C046     		.align	2
 368              	.L18:
 369 0030 00010B40 		.word	1074462976
 370              		.cfi_endproc
 371              	.LFE6:
 372              		.size	CySysClkGetSysclkSource, .-CySysClkGetSysclkSource
 373              		.section	.text.CySysClkWriteSysclkDiv,"ax",%progbits
 374              		.align	2
 375              		.global	CySysClkWriteSysclkDiv
 376              		.code	16
 377              		.thumb_func
 378              		.type	CySysClkWriteSysclkDiv, %function
 379              	CySysClkWriteSysclkDiv:
 380              	.LFB7:
 726:Generated_Source\PSoC4/CyLib.c **** 
 727:Generated_Source\PSoC4/CyLib.c **** 
 728:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 729:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteSysclkDiv
 730:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 731:Generated_Source\PSoC4/CyLib.c **** *
 732:Generated_Source\PSoC4/CyLib.c **** * Selects the prescaler divide amount for SYSCLK from HFCLK.
 733:Generated_Source\PSoC4/CyLib.c **** *
 734:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 735:Generated_Source\PSoC4/CyLib.c **** * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 736:Generated_Source\PSoC4/CyLib.c **** *
 737:Generated_Source\PSoC4/CyLib.c **** * PSoC 4100 \ PSoC 4100 BLE \ PSoC 4100M: The SYSCLK has the speed of 24 MHz,
 738:Generated_Source\PSoC4/CyLib.c **** * so HFCLK and SYSCLK dividers should be selected in a way, not to exceed 24 MHz
 739:Generated_Source\PSoC4/CyLib.c **** * for SYSCLK.
 740:Generated_Source\PSoC4/CyLib.c **** *
 741:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during the device operation, call
 742:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 743:Generated_Source\PSoC4/CyLib.c **** * number of clock cycles the cache will wait before sampling data comes back
 744:Generated_Source\PSoC4/CyLib.c **** * from Flash. If the SYSCLK clock frequency decreases, you can call
 745:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 746:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() description for more information.
 747:Generated_Source\PSoC4/CyLib.c **** *
 748:Generated_Source\PSoC4/CyLib.c **** * \param divider Power of 2 prescaler selection
 749:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV1        SYSCLK = HFCLK / 1
 750:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV2        SYSCLK = HFCLK / 2
 751:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV4        SYSCLK = HFCLK / 4
 752:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV8        SYSCLK = HFCLK / 8
 753:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV16       SYSCLK = HFCLK / 16  (N/A for 4000 Family)
 754:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV32       SYSCLK = HFCLK / 32  (N/A for 4000 Family)
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 21


 755:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV64       SYSCLK = HFCLK / 64  (N/A for 4000 Family)
 756:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV128      SYSCLK = HFCLK / 128 (N/A for 4000 Family)
 757:Generated_Source\PSoC4/CyLib.c **** *
 758:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 759:Generated_Source\PSoC4/CyLib.c **** void CySysClkWriteSysclkDiv(uint32 divider)
 760:Generated_Source\PSoC4/CyLib.c **** {
 381              		.loc 1 760 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 16
 384              		@ frame_needed = 1, uses_anonymous_args = 0
 385 0000 90B5     		push	{r4, r7, lr}
 386              		.cfi_def_cfa_offset 12
 387              		.cfi_offset 4, -12
 388              		.cfi_offset 7, -8
 389              		.cfi_offset 14, -4
 390 0002 85B0     		sub	sp, sp, #20
 391              		.cfi_def_cfa_offset 32
 392 0004 00AF     		add	r7, sp, #0
 393              		.cfi_def_cfa_register 7
 394 0006 7860     		str	r0, [r7, #4]
 761:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 762:Generated_Source\PSoC4/CyLib.c **** 
 763:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 395              		.loc 1 763 0
 396 0008 0F23     		movs	r3, #15
 397 000a FC18     		adds	r4, r7, r3
 398 000c FFF7FEFF 		bl	CyEnterCriticalSection
 399 0010 0300     		movs	r3, r0
 400 0012 2370     		strb	r3, [r4]
 764:Generated_Source\PSoC4/CyLib.c **** 
 765:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_SELECT_REG = ((uint32)(((uint32)divider & CY_SYS_CLK_SELECT_SYSCLK_DIV_MASK) <<
 401              		.loc 1 765 0
 402 0014 0A4B     		ldr	r3, .L21
 403 0016 7A68     		ldr	r2, [r7, #4]
 404 0018 D104     		lsls	r1, r2, #19
 405 001a E022     		movs	r2, #224
 406 001c 9203     		lsls	r2, r2, #14
 407 001e 1140     		ands	r1, r2
 766:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 767:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_CLK_SELECT_REG & ((uint32)(~(uint32)(CY_SYS_CLK_SELECT_SYSCLK_D
 408              		.loc 1 767 0
 409 0020 074A     		ldr	r2, .L21
 410 0022 1268     		ldr	r2, [r2]
 411 0024 0748     		ldr	r0, .L21+4
 412 0026 0240     		ands	r2, r0
 766:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 413              		.loc 1 766 0
 414 0028 0A43     		orrs	r2, r1
 765:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 415              		.loc 1 765 0
 416 002a 1A60     		str	r2, [r3]
 768:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT))));
 769:Generated_Source\PSoC4/CyLib.c **** 
 770:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 417              		.loc 1 770 0
 418 002c 0F23     		movs	r3, #15
 419 002e FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 22


 420 0030 1B78     		ldrb	r3, [r3]
 421 0032 1800     		movs	r0, r3
 422 0034 FFF7FEFF 		bl	CyExitCriticalSection
 771:Generated_Source\PSoC4/CyLib.c **** }
 423              		.loc 1 771 0
 424 0038 C046     		nop
 425 003a BD46     		mov	sp, r7
 426 003c 05B0     		add	sp, sp, #20
 427              		@ sp needed
 428 003e 90BD     		pop	{r4, r7, pc}
 429              	.L22:
 430              		.align	2
 431              	.L21:
 432 0040 00010B40 		.word	1074462976
 433 0044 FFFFC7FF 		.word	-3670017
 434              		.cfi_endproc
 435              	.LFE7:
 436              		.size	CySysClkWriteSysclkDiv, .-CySysClkWriteSysclkDiv
 437              		.section	.text.CySysClkWriteImoFreq,"ax",%progbits
 438              		.align	2
 439              		.global	CySysClkWriteImoFreq
 440              		.code	16
 441              		.thumb_func
 442              		.type	CySysClkWriteImoFreq, %function
 443              	CySysClkWriteImoFreq:
 444              	.LFB8:
 772:Generated_Source\PSoC4/CyLib.c **** 
 773:Generated_Source\PSoC4/CyLib.c **** 
 774:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 775:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteImoFreq
 776:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 777:Generated_Source\PSoC4/CyLib.c **** *
 778:Generated_Source\PSoC4/CyLib.c **** * Sets the frequency of the IMO.
 779:Generated_Source\PSoC4/CyLib.c **** *
 780:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 781:Generated_Source\PSoC4/CyLib.c **** * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 782:Generated_Source\PSoC4/CyLib.c **** *
 783:Generated_Source\PSoC4/CyLib.c **** * PSoC 4100 \ PSoC 4100 BLE \ PSoC 4100M: The SYSCLK has the speed of 24 MHz,
 784:Generated_Source\PSoC4/CyLib.c **** * so HFCLK and SYSCLK dividers should be selected in a way, not to exceed 24 MHz
 785:Generated_Source\PSoC4/CyLib.c **** * for SYSCLK.
 786:Generated_Source\PSoC4/CyLib.c **** *
 787:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200M and PSoC 4200L device families, if WCO lock feature is enabled
 788:Generated_Source\PSoC4/CyLib.c **** * then this API will disable the lock, write the new IMO frequency and then
 789:Generated_Source\PSoC4/CyLib.c **** * re-enable the lock.
 790:Generated_Source\PSoC4/CyLib.c **** *
 791:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200L device families, this function enables the USB lock when 24 or
 792:Generated_Source\PSoC4/CyLib.c **** * 48 MHz passed as a parameter if the USB lock option is enabled in Design Wide
 793:Generated_Source\PSoC4/CyLib.c **** * Resources tab or CySysClkImoEnableUsbLock() was called before. Note the USB
 794:Generated_Source\PSoC4/CyLib.c **** * lock is disabled during IMO frequency change.
 795:Generated_Source\PSoC4/CyLib.c **** *
 796:Generated_Source\PSoC4/CyLib.c **** * The CPU is halted if new frequency is invalid and project is compiled
 797:Generated_Source\PSoC4/CyLib.c **** * in debug mode.
 798:Generated_Source\PSoC4/CyLib.c **** *
 799:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during the device operation, call
 800:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 801:Generated_Source\PSoC4/CyLib.c **** * number of clock cycles the cache will wait before sampling data comes back
 802:Generated_Source\PSoC4/CyLib.c **** * from Flash. If the SYSCLK clock frequency decreases, you can call
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 23


 803:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 804:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() description for more information.
 805:Generated_Source\PSoC4/CyLib.c **** *
 806:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The System Clock (SYSCLK) has maximum speed of 16 MHz, so HFCLK
 807:Generated_Source\PSoC4/CyLib.c **** * and SYSCLK dividers should be selected in a way, to not to exceed 16 MHz for
 808:Generated_Source\PSoC4/CyLib.c **** * the System clock.
 809:Generated_Source\PSoC4/CyLib.c **** *
 810:Generated_Source\PSoC4/CyLib.c **** * \param freq All PSoC 4 families excluding the following: Valid range [3-48]
 811:Generated_Source\PSoC4/CyLib.c **** * with step size equals 1. PSoC 4000: Valid values are 24, 32, and 48.
 812:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000S / PSoC 4100S / PSoC Analog Coprocessor: Valid range [24-48] with
 813:Generated_Source\PSoC4/CyLib.c **** * step size equals 4.
 814:Generated_Source\PSoC4/CyLib.c **** *
 815:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 816:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
 817:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteImoFreq(uint32 freq)
 818:Generated_Source\PSoC4/CyLib.c ****     {
 445              		.loc 1 818 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 40
 448              		@ frame_needed = 1, uses_anonymous_args = 0
 449 0000 90B5     		push	{r4, r7, lr}
 450              		.cfi_def_cfa_offset 12
 451              		.cfi_offset 4, -12
 452              		.cfi_offset 7, -8
 453              		.cfi_offset 14, -4
 454 0002 8BB0     		sub	sp, sp, #44
 455              		.cfi_def_cfa_offset 56
 456 0004 00AF     		add	r7, sp, #0
 457              		.cfi_def_cfa_register 7
 458 0006 7860     		str	r0, [r7, #4]
 819:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_FMLT)
 820:Generated_Source\PSoC4/CyLib.c ****             volatile uint32   parameters[2u];
 821:Generated_Source\PSoC4/CyLib.c ****             volatile uint32   regValues[4u];
 822:Generated_Source\PSoC4/CyLib.c ****         #else
 823:Generated_Source\PSoC4/CyLib.c ****             uint8  bgTrim4;
 824:Generated_Source\PSoC4/CyLib.c ****             uint8  bgTrim5;
 825:Generated_Source\PSoC4/CyLib.c ****             uint8  newImoTrim2Value;
 826:Generated_Source\PSoC4/CyLib.c ****             uint8  currentImoTrim2Value;
 827:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_FM) */
 828:Generated_Source\PSoC4/CyLib.c **** 
 829:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 830:Generated_Source\PSoC4/CyLib.c ****             uint32 wcoLock = 0u;
 831:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 832:Generated_Source\PSoC4/CyLib.c **** 
 833:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 834:Generated_Source\PSoC4/CyLib.c ****             uint32 usbLock = 0u;
 835:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 836:Generated_Source\PSoC4/CyLib.c **** 
 837:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 838:Generated_Source\PSoC4/CyLib.c **** 
 839:Generated_Source\PSoC4/CyLib.c **** 
 840:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
 459              		.loc 1 840 0
 460 0008 2723     		movs	r3, #39
 461 000a FC18     		adds	r4, r7, r3
 462 000c FFF7FEFF 		bl	CyEnterCriticalSection
 463 0010 0300     		movs	r3, r0
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 24


 464 0012 2370     		strb	r3, [r4]
 841:Generated_Source\PSoC4/CyLib.c **** 
 842:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 843:Generated_Source\PSoC4/CyLib.c ****             if(0u != CySysClkImoGetWcoLock())
 844:Generated_Source\PSoC4/CyLib.c ****             {
 845:Generated_Source\PSoC4/CyLib.c ****                 wcoLock = 1u;
 846:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoDisableWcoLock();
 847:Generated_Source\PSoC4/CyLib.c ****             }
 848:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 849:Generated_Source\PSoC4/CyLib.c **** 
 850:Generated_Source\PSoC4/CyLib.c **** 
 851:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 852:Generated_Source\PSoC4/CyLib.c **** 
 853:Generated_Source\PSoC4/CyLib.c ****             #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 854:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkImoGetUsbLock())
 855:Generated_Source\PSoC4/CyLib.c ****                 {
 856:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 857:Generated_Source\PSoC4/CyLib.c **** 
 858:Generated_Source\PSoC4/CyLib.c ****                 if ((24u == freq) || (48u == freq))
 859:Generated_Source\PSoC4/CyLib.c ****                 {
 860:Generated_Source\PSoC4/CyLib.c ****                     usbLock = 1u;
 861:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoDisableUsbLock();
 862:Generated_Source\PSoC4/CyLib.c ****                 }
 863:Generated_Source\PSoC4/CyLib.c **** 
 864:Generated_Source\PSoC4/CyLib.c ****             #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 865:Generated_Source\PSoC4/CyLib.c ****                 }
 866:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 867:Generated_Source\PSoC4/CyLib.c **** 
 868:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 869:Generated_Source\PSoC4/CyLib.c **** 
 870:Generated_Source\PSoC4/CyLib.c **** 
 871:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_FMLT)
 872:Generated_Source\PSoC4/CyLib.c **** 
 873:Generated_Source\PSoC4/CyLib.c ****             /* FM-Lite Clock Restore */
 874:Generated_Source\PSoC4/CyLib.c ****             regValues[0u] = CY_SYS_CLK_IMO_CONFIG_REG;
 465              		.loc 1 874 0
 466 0014 194B     		ldr	r3, .L24
 467 0016 1A68     		ldr	r2, [r3]
 468 0018 0C23     		movs	r3, #12
 469 001a FB18     		adds	r3, r7, r3
 470 001c 1A60     		str	r2, [r3]
 875:Generated_Source\PSoC4/CyLib.c ****             regValues[1u] = CY_SYS_CLK_SELECT_REG;
 471              		.loc 1 875 0
 472 001e 184B     		ldr	r3, .L24+4
 473 0020 1A68     		ldr	r2, [r3]
 474 0022 0C23     		movs	r3, #12
 475 0024 FB18     		adds	r3, r7, r3
 476 0026 5A60     		str	r2, [r3, #4]
 876:Generated_Source\PSoC4/CyLib.c ****             regValues[2u] = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET];
 477              		.loc 1 876 0
 478 0028 7B68     		ldr	r3, [r7, #4]
 479 002a 033B     		subs	r3, r3, #3
 480 002c 154A     		ldr	r2, .L24+8
 481 002e D35C     		ldrb	r3, [r2, r3]
 482 0030 1A00     		movs	r2, r3
 483 0032 0C23     		movs	r3, #12
 484 0034 FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 25


 485 0036 9A60     		str	r2, [r3, #8]
 877:Generated_Source\PSoC4/CyLib.c ****             regValues[3u] = CY_FLASH_CTL_REG;
 486              		.loc 1 877 0
 487 0038 134B     		ldr	r3, .L24+12
 488 003a 1A68     		ldr	r2, [r3]
 489 003c 0C23     		movs	r3, #12
 490 003e FB18     		adds	r3, r7, r3
 491 0040 DA60     		str	r2, [r3, #12]
 878:Generated_Source\PSoC4/CyLib.c **** 
 879:Generated_Source\PSoC4/CyLib.c ****             parameters[0u] =
 492              		.loc 1 879 0
 493 0042 1C23     		movs	r3, #28
 494 0044 FB18     		adds	r3, r7, r3
 495 0046 114A     		ldr	r2, .L24+16
 496 0048 1A60     		str	r2, [r3]
 880:Generated_Source\PSoC4/CyLib.c ****                 (uint32) ((CY_FLASH_KEY_TWO(CY_FLASH_API_OPCODE_CLK_RESTORE) <<  CY_FLASH_PARAM_KEY
 881:Generated_Source\PSoC4/CyLib.c ****                             CY_FLASH_KEY_ONE);
 882:Generated_Source\PSoC4/CyLib.c ****             parameters[1u] = (uint32) &regValues[0u];
 497              		.loc 1 882 0
 498 004a 0C23     		movs	r3, #12
 499 004c FA18     		adds	r2, r7, r3
 500 004e 1C23     		movs	r3, #28
 501 0050 FB18     		adds	r3, r7, r3
 502 0052 5A60     		str	r2, [r3, #4]
 883:Generated_Source\PSoC4/CyLib.c **** 
 884:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CPUSS_SYSARG_REG = (uint32) &parameters[0u];
 503              		.loc 1 884 0
 504 0054 0E4B     		ldr	r3, .L24+20
 505 0056 1C22     		movs	r2, #28
 506 0058 BA18     		adds	r2, r7, r2
 507 005a 1A60     		str	r2, [r3]
 885:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CPUSS_SYSREQ_REG = CY_FLASH_CPUSS_REQ_START | CY_FLASH_API_OPCODE_CLK_RESTORE;
 508              		.loc 1 885 0
 509 005c 0D4B     		ldr	r3, .L24+24
 510 005e 0E4A     		ldr	r2, .L24+28
 511 0060 1A60     		str	r2, [r3]
 886:Generated_Source\PSoC4/CyLib.c ****             (void) CY_FLASH_CPUSS_SYSARG_REG;
 512              		.loc 1 886 0
 513 0062 0B4B     		ldr	r3, .L24+20
 514 0064 1B68     		ldr	r3, [r3]
 887:Generated_Source\PSoC4/CyLib.c **** 
 888:Generated_Source\PSoC4/CyLib.c ****         #else /* (CY_IP_FM) */
 889:Generated_Source\PSoC4/CyLib.c **** 
 890:Generated_Source\PSoC4/CyLib.c ****         if ((freq >= CY_SYS_CLK_IMO_MIN_FREQ_MHZ) && (freq <= CY_SYS_CLK_IMO_MAX_FREQ_MHZ))
 891:Generated_Source\PSoC4/CyLib.c ****         {
 892:Generated_Source\PSoC4/CyLib.c ****             if(freq <= CY_SFLASH_IMO_MAXF0_REG)
 893:Generated_Source\PSoC4/CyLib.c ****             {
 894:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS0_REG;
 895:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO0_REG;
 896:Generated_Source\PSoC4/CyLib.c ****             }
 897:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF1_REG)
 898:Generated_Source\PSoC4/CyLib.c ****             {
 899:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS1_REG;
 900:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO1_REG;
 901:Generated_Source\PSoC4/CyLib.c ****             }
 902:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF2_REG)
 903:Generated_Source\PSoC4/CyLib.c ****             {
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 26


 904:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS2_REG;
 905:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO2_REG;
 906:Generated_Source\PSoC4/CyLib.c ****             }
 907:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF3_REG)
 908:Generated_Source\PSoC4/CyLib.c ****             {
 909:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS3_REG;
 910:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO3_REG;
 911:Generated_Source\PSoC4/CyLib.c ****             }
 912:Generated_Source\PSoC4/CyLib.c ****             else
 913:Generated_Source\PSoC4/CyLib.c ****             {
 914:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS4_REG;
 915:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO4_REG;
 916:Generated_Source\PSoC4/CyLib.c ****             }
 917:Generated_Source\PSoC4/CyLib.c **** 
 918:Generated_Source\PSoC4/CyLib.c ****             /* Get IMO_TRIM2 value for the new frequency */
 919:Generated_Source\PSoC4/CyLib.c ****             newImoTrim2Value = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET];
 920:Generated_Source\PSoC4/CyLib.c **** 
 921:Generated_Source\PSoC4/CyLib.c **** 
 922:Generated_Source\PSoC4/CyLib.c ****             /****************************************************************************
 923:Generated_Source\PSoC4/CyLib.c ****             * The IMO can have a different trim per frequency. To avoid possible corner
 924:Generated_Source\PSoC4/CyLib.c ****             * cases where a trim change can exceed the maximum frequency, the trim must
 925:Generated_Source\PSoC4/CyLib.c ****             * be applied at a frequency that is low enough.
 926:Generated_Source\PSoC4/CyLib.c ****             *
 927:Generated_Source\PSoC4/CyLib.c ****             * Comparing IMO_TRIM2 values for the current and new frequencies, since
 928:Generated_Source\PSoC4/CyLib.c ****             * IMO_TRIM2 value as a function of IMO frequency is a strictly increasing
 929:Generated_Source\PSoC4/CyLib.c ****             * function and is time-invariant.
 930:Generated_Source\PSoC4/CyLib.c ****             ***************************************************************************/
 931:Generated_Source\PSoC4/CyLib.c ****             if ((newImoTrim2Value >= CY_SYS_CLK_IMO_BOUNDARY_FREQ_TRIM2) && (freq >= CY_SYS_CLK_IMO
 932:Generated_Source\PSoC4/CyLib.c ****             {
 933:Generated_Source\PSoC4/CyLib.c ****                 /* Set boundary IMO frequency: safe for IMO above 48 MHZ trimming */
 934:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = (uint32) cyImoFreqMhz2Reg[CY_SYS_CLK_IMO_TEMP_FREQ_MHZ -
 935:Generated_Source\PSoC4/CyLib.c ****                                                                      CY_SYS_CLK_IMO_FREQ_TABLE_OFFS
 936:Generated_Source\PSoC4/CyLib.c **** 
 937:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 938:Generated_Source\PSoC4/CyLib.c **** 
 939:Generated_Source\PSoC4/CyLib.c ****                 currentImoTrim2Value = CY_SYS_CLK_IMO_TEMP_FREQ_TRIM2;
 940:Generated_Source\PSoC4/CyLib.c ****             }
 941:Generated_Source\PSoC4/CyLib.c ****             else
 942:Generated_Source\PSoC4/CyLib.c ****             {
 943:Generated_Source\PSoC4/CyLib.c ****                 currentImoTrim2Value = (uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS
 944:Generated_Source\PSoC4/CyLib.c ****             }
 945:Generated_Source\PSoC4/CyLib.c **** 
 946:Generated_Source\PSoC4/CyLib.c **** 
 947:Generated_Source\PSoC4/CyLib.c ****             /***************************************************************************
 948:Generated_Source\PSoC4/CyLib.c ****             * A trim change needs to be allowed to settle (within 5us) before the Freq
 949:Generated_Source\PSoC4/CyLib.c ****             * can be changed to a new frequency.
 950:Generated_Source\PSoC4/CyLib.c ****             *
 951:Generated_Source\PSoC4/CyLib.c ****             * Comparing IMO_TRIM2 values for the current and new frequencies, since
 952:Generated_Source\PSoC4/CyLib.c ****             * IMO_TRIM2 value as a function of IMO frequency is a strictly increasing
 953:Generated_Source\PSoC4/CyLib.c ****             * function and is time-invariant.
 954:Generated_Source\PSoC4/CyLib.c ****             ***************************************************************************/
 955:Generated_Source\PSoC4/CyLib.c ****             if (newImoTrim2Value < currentImoTrim2Value)
 956:Generated_Source\PSoC4/CyLib.c ****             {
 957:Generated_Source\PSoC4/CyLib.c ****                 /* Set new IMO frequency */
 958:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET
 959:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 960:Generated_Source\PSoC4/CyLib.c ****             }
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 27


 961:Generated_Source\PSoC4/CyLib.c **** 
 962:Generated_Source\PSoC4/CyLib.c ****             /* Set trims for the new IMO frequency */
 963:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = (uint32) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_FREQ_T
 964:Generated_Source\PSoC4/CyLib.c ****             CY_PWR_BG_TRIM4_REG  = bgTrim4;
 965:Generated_Source\PSoC4/CyLib.c ****             CY_PWR_BG_TRIM5_REG  = bgTrim5;
 966:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_IMO_TRIM_TIMEOUT_US);
 967:Generated_Source\PSoC4/CyLib.c **** 
 968:Generated_Source\PSoC4/CyLib.c ****             if (newImoTrim2Value > currentImoTrim2Value)
 969:Generated_Source\PSoC4/CyLib.c ****             {
 970:Generated_Source\PSoC4/CyLib.c ****                 /* Set new IMO frequency */
 971:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET
 972:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 973:Generated_Source\PSoC4/CyLib.c ****             }
 974:Generated_Source\PSoC4/CyLib.c ****         }
 975:Generated_Source\PSoC4/CyLib.c ****         else
 976:Generated_Source\PSoC4/CyLib.c ****         {
 977:Generated_Source\PSoC4/CyLib.c ****             /* Halt CPU in debug mode if new frequency is invalid */
 978:Generated_Source\PSoC4/CyLib.c ****             CYASSERT(0u != 0u);
 979:Generated_Source\PSoC4/CyLib.c ****         }
 980:Generated_Source\PSoC4/CyLib.c **** 
 981:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_FMLT) */
 982:Generated_Source\PSoC4/CyLib.c **** 
 983:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 984:Generated_Source\PSoC4/CyLib.c ****             if (1u == wcoLock)
 985:Generated_Source\PSoC4/CyLib.c ****             {
 986:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoEnableWcoLock();
 987:Generated_Source\PSoC4/CyLib.c ****             }
 988:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 989:Generated_Source\PSoC4/CyLib.c **** 
 990:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 991:Generated_Source\PSoC4/CyLib.c ****             if (1u == usbLock)
 992:Generated_Source\PSoC4/CyLib.c ****             {
 993:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoEnableUsbLock();
 994:Generated_Source\PSoC4/CyLib.c ****             }
 995:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 996:Generated_Source\PSoC4/CyLib.c **** 
 997:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
 515              		.loc 1 997 0
 516 0066 2723     		movs	r3, #39
 517 0068 FB18     		adds	r3, r7, r3
 518 006a 1B78     		ldrb	r3, [r3]
 519 006c 1800     		movs	r0, r3
 520 006e FFF7FEFF 		bl	CyExitCriticalSection
 998:Generated_Source\PSoC4/CyLib.c ****     }
 521              		.loc 1 998 0
 522 0072 C046     		nop
 523 0074 BD46     		mov	sp, r7
 524 0076 0BB0     		add	sp, sp, #44
 525              		@ sp needed
 526 0078 90BD     		pop	{r4, r7, pc}
 527              	.L25:
 528 007a C046     		.align	2
 529              	.L24:
 530 007c 08010B40 		.word	1074462984
 531 0080 00010B40 		.word	1074462976
 532 0084 00000000 		.word	cyImoFreqMhz2Reg
 533 0088 30001040 		.word	1074790448
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 28


 534 008c B6EA0000 		.word	60086
 535 0090 08001040 		.word	1074790408
 536 0094 04001040 		.word	1074790404
 537 0098 17000080 		.word	-2147483625
 538              		.cfi_endproc
 539              	.LFE8:
 540              		.size	CySysClkWriteImoFreq, .-CySysClkWriteImoFreq
 541              		.section	.text.CySysClkEcoStart,"ax",%progbits
 542              		.align	2
 543              		.global	CySysClkEcoStart
 544              		.code	16
 545              		.thumb_func
 546              		.type	CySysClkEcoStart, %function
 547              	CySysClkEcoStart:
 548              	.LFB9:
 999:Generated_Source\PSoC4/CyLib.c **** 
1000:Generated_Source\PSoC4/CyLib.c **** #else
1001:Generated_Source\PSoC4/CyLib.c **** 
1002:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteImoFreq(uint32 freq)
1003:Generated_Source\PSoC4/CyLib.c ****     {
1004:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1005:Generated_Source\PSoC4/CyLib.c ****         uint8  imoTrim1Value;
1006:Generated_Source\PSoC4/CyLib.c **** 
1007:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
1008:Generated_Source\PSoC4/CyLib.c ****             uint32 wcoLock = 0u;
1009:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
1010:Generated_Source\PSoC4/CyLib.c **** 
1011:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
1012:Generated_Source\PSoC4/CyLib.c ****             uint32 usbLock = 0u;
1013:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
1014:Generated_Source\PSoC4/CyLib.c **** 
1015:Generated_Source\PSoC4/CyLib.c ****         #if (CY_PSOC4_4000)
1016:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 32u) || (freq == 48u))
1017:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_CCG3)
1018:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 36u) || (freq == 48u))
1019:Generated_Source\PSoC4/CyLib.c ****         #else
1020:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 28u) || (freq == 32u) ||
1021:Generated_Source\PSoC4/CyLib.c ****                 (freq == 36u) || (freq == 40u) || (freq == 44u) ||
1022:Generated_Source\PSoC4/CyLib.c ****                 (freq == 48u))
1023:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_PSOC4_4000) */
1024:Generated_Source\PSoC4/CyLib.c ****         {
1025:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1026:Generated_Source\PSoC4/CyLib.c **** 
1027:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
1028:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkImoGetWcoLock())
1029:Generated_Source\PSoC4/CyLib.c ****                 {
1030:Generated_Source\PSoC4/CyLib.c ****                     wcoLock = 1u;
1031:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoDisableWcoLock();
1032:Generated_Source\PSoC4/CyLib.c ****                 }
1033:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
1034:Generated_Source\PSoC4/CyLib.c **** 
1035:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
1036:Generated_Source\PSoC4/CyLib.c **** 
1037:Generated_Source\PSoC4/CyLib.c ****                 #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
1038:Generated_Source\PSoC4/CyLib.c ****                     if(0u != CySysClkImoGetUsbLock())
1039:Generated_Source\PSoC4/CyLib.c ****                     {
1040:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 29


1041:Generated_Source\PSoC4/CyLib.c **** 
1042:Generated_Source\PSoC4/CyLib.c ****                     if (48u == freq)
1043:Generated_Source\PSoC4/CyLib.c ****                     {
1044:Generated_Source\PSoC4/CyLib.c ****                         usbLock = 1u;
1045:Generated_Source\PSoC4/CyLib.c ****                         CySysClkImoDisableUsbLock();
1046:Generated_Source\PSoC4/CyLib.c ****                     }
1047:Generated_Source\PSoC4/CyLib.c **** 
1048:Generated_Source\PSoC4/CyLib.c ****                 #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
1049:Generated_Source\PSoC4/CyLib.c ****                     }
1050:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
1051:Generated_Source\PSoC4/CyLib.c **** 
1052:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
1053:Generated_Source\PSoC4/CyLib.c **** 
1054:Generated_Source\PSoC4/CyLib.c **** 
1055:Generated_Source\PSoC4/CyLib.c ****             /* Set IMO to 24 MHz - CLK_IMO_SELECT.FREQ = 0 */
1056:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_SELECT_REG &= ((uint32) ~CY_SYS_CLK_IMO_SELECT_FREQ_MASK);
1057:Generated_Source\PSoC4/CyLib.c **** 
1058:Generated_Source\PSoC4/CyLib.c **** 
1059:Generated_Source\PSoC4/CyLib.c ****             /* Apply coarse trim */
1060:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
1061:Generated_Source\PSoC4/CyLib.c ****                 if ((1u == usbLock) && (48u == freq))
1062:Generated_Source\PSoC4/CyLib.c ****                 {
1063:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_48_REG;
1064:Generated_Source\PSoC4/CyLib.c ****                 }
1065:Generated_Source\PSoC4/CyLib.c ****                 else if ((1u == usbLock) && (24u == freq))
1066:Generated_Source\PSoC4/CyLib.c ****                 {
1067:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_24_REG;
1068:Generated_Source\PSoC4/CyLib.c ****                 }
1069:Generated_Source\PSoC4/CyLib.c ****                 else
1070:Generated_Source\PSoC4/CyLib.c ****                 {
1071:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_M
1072:Generated_Source\PSoC4/CyLib.c ****                 }
1073:Generated_Source\PSoC4/CyLib.c ****             #else
1074:Generated_Source\PSoC4/CyLib.c ****                 imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ);
1075:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
1076:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = (uint32) imoTrim1Value;
1077:Generated_Source\PSoC4/CyLib.c **** 
1078:Generated_Source\PSoC4/CyLib.c ****             /* Zero out fine trim */
1079:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM2_REG = CY_SYS_CLK_IMO_TRIM2_REG & ((uint32) ~CY_SYS_CLK_IMO_TRIM2_F
1080:Generated_Source\PSoC4/CyLib.c **** 
1081:Generated_Source\PSoC4/CyLib.c ****             /* Apply TC trim */
1082:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM3_REG = (CY_SYS_CLK_IMO_TRIM3_REG & ((uint32) ~CY_SYS_CLK_IMO_TRIM3_
1083:Generated_Source\PSoC4/CyLib.c ****                 (CY_SFLASH_IMO_TCTRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) & CY_SYS_CLK_IMO_TRIM
1084:Generated_Source\PSoC4/CyLib.c **** 
1085:Generated_Source\PSoC4/CyLib.c ****             CyDelayCycles(CY_SYS_CLK_IMO_TRIM_DELAY_CYCLES);
1086:Generated_Source\PSoC4/CyLib.c **** 
1087:Generated_Source\PSoC4/CyLib.c ****             if (freq > CY_SYS_CLK_IMO_MIN_FREQ_MHZ)
1088:Generated_Source\PSoC4/CyLib.c ****             {
1089:Generated_Source\PSoC4/CyLib.c ****                 /* Select nearby intermediate frequency */
1090:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_SELECT_REG = (CY_SYS_CLK_IMO_SELECT_REG & ((uint32) ~CY_SYS_CLK_IMO_
1091:Generated_Source\PSoC4/CyLib.c ****                     (((freq - 4u - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ
1092:Generated_Source\PSoC4/CyLib.c **** 
1093:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_TRIM_DELAY_CYCLES);
1094:Generated_Source\PSoC4/CyLib.c **** 
1095:Generated_Source\PSoC4/CyLib.c ****                 /* Make small step to final frequency */
1096:Generated_Source\PSoC4/CyLib.c ****                 /* Select nearby intermediate frequency */
1097:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_SELECT_REG = (CY_SYS_CLK_IMO_SELECT_REG & ((uint32) ~CY_SYS_CLK_IMO_
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 30


1098:Generated_Source\PSoC4/CyLib.c ****                     (((freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ_MASK
1099:Generated_Source\PSoC4/CyLib.c ****             }
1100:Generated_Source\PSoC4/CyLib.c **** 
1101:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
1102:Generated_Source\PSoC4/CyLib.c ****                 if (1u == wcoLock)
1103:Generated_Source\PSoC4/CyLib.c ****                 {
1104:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoEnableWcoLock();
1105:Generated_Source\PSoC4/CyLib.c ****                 }
1106:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
1107:Generated_Source\PSoC4/CyLib.c **** 
1108:Generated_Source\PSoC4/CyLib.c **** 
1109:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
1110:Generated_Source\PSoC4/CyLib.c ****                 if (1u == usbLock)
1111:Generated_Source\PSoC4/CyLib.c ****                 {
1112:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoEnableUsbLock();
1113:Generated_Source\PSoC4/CyLib.c ****                 }
1114:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
1115:Generated_Source\PSoC4/CyLib.c **** 
1116:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1117:Generated_Source\PSoC4/CyLib.c ****         }
1118:Generated_Source\PSoC4/CyLib.c ****         else
1119:Generated_Source\PSoC4/CyLib.c ****         {
1120:Generated_Source\PSoC4/CyLib.c ****             /* Halt CPU in debug mode if new frequency is invalid */
1121:Generated_Source\PSoC4/CyLib.c ****             CYASSERT(0u != 0u);
1122:Generated_Source\PSoC4/CyLib.c ****         }
1123:Generated_Source\PSoC4/CyLib.c ****     }
1124:Generated_Source\PSoC4/CyLib.c **** 
1125:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
1126:Generated_Source\PSoC4/CyLib.c **** 
1127:Generated_Source\PSoC4/CyLib.c **** 
1128:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSLT)
1129:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1130:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkWriteHfclkDiv
1131:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1132:Generated_Source\PSoC4/CyLib.c ****     *
1133:Generated_Source\PSoC4/CyLib.c ****     * Selects the pre-scaler divider value for HFCLK from IMO.
1134:Generated_Source\PSoC4/CyLib.c ****     *
1135:Generated_Source\PSoC4/CyLib.c ****     * The HFCLK predivider allows the device to divide the HFCLK selection mux
1136:Generated_Source\PSoC4/CyLib.c ****     * input before use as HFCLK. The predivider is capable of dividing the HFCLK by
1137:Generated_Source\PSoC4/CyLib.c ****     * powers of 2 between 1 and 8.
1138:Generated_Source\PSoC4/CyLib.c ****     *
1139:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
1140:Generated_Source\PSoC4/CyLib.c ****     * should be selected in a way, not to exceed 16 MHz for SYSCLK.
1141:Generated_Source\PSoC4/CyLib.c ****     *
1142:Generated_Source\PSoC4/CyLib.c ****     * If the SYSCLK clock frequency increases during the device operation, call
1143:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
1144:Generated_Source\PSoC4/CyLib.c ****     * number of clock cycles the cache will wait before sampling data comes back
1145:Generated_Source\PSoC4/CyLib.c ****     * from Flash. If the SYSCLK clock frequency decreases, you can call
1146:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
1147:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() description for more information.
1148:Generated_Source\PSoC4/CyLib.c ****     *
1149:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_NODIV    Transparent mode (w/o dividing)
1150:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_2        Divide selected clock source by 2
1151:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_4        Divide selected clock source by 4
1152:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_8        Divide selected clock source by 8
1153:Generated_Source\PSoC4/CyLib.c ****     *
1154:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 31


1155:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteHfclkDiv(uint32 divider)
1156:Generated_Source\PSoC4/CyLib.c ****     {
1157:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1158:Generated_Source\PSoC4/CyLib.c **** 
1159:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1160:Generated_Source\PSoC4/CyLib.c **** 
1161:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_SELECT_REG = ((CY_SYS_CLK_SELECT_REG & ((uint32) (~(CY_SYS_CLK_SELECT_HFCLK_DIV_
1162:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT)))) |
1163:Generated_Source\PSoC4/CyLib.c ****                     ((uint32)((divider & CY_SYS_CLK_SELECT_HFCLK_DIV_MASK) << CY_SYS_CLK_SELECT_HFC
1164:Generated_Source\PSoC4/CyLib.c **** 
1165:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1166:Generated_Source\PSoC4/CyLib.c ****     }
1167:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSLT) */
1168:Generated_Source\PSoC4/CyLib.c **** 
1169:Generated_Source\PSoC4/CyLib.c **** 
1170:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_ECO)
1171:Generated_Source\PSoC4/CyLib.c **** 
1172:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1173:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoStart
1174:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1175:Generated_Source\PSoC4/CyLib.c ****     *
1176:Generated_Source\PSoC4/CyLib.c ****     * Starts the External Crystal Oscillator (ECO). Refer to the device datasheet
1177:Generated_Source\PSoC4/CyLib.c ****     * for the ECO startup time.
1178:Generated_Source\PSoC4/CyLib.c ****     *
1179:Generated_Source\PSoC4/CyLib.c ****     * The timeout interval is measured based on the system frequency defined by
1180:Generated_Source\PSoC4/CyLib.c ****     * PSoC Creator at build time. If System clock frequency is changed in
1181:Generated_Source\PSoC4/CyLib.c ****     * runtime, the \ref CyDelayFreq() with the appropriate parameter should be
1182:Generated_Source\PSoC4/CyLib.c ****     * called.
1183:Generated_Source\PSoC4/CyLib.c ****     *
1184:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100 BLE / PSoC 4200 BLE: The WCO must be enabled prior to enabling ECO.
1185:Generated_Source\PSoC4/CyLib.c ****     *
1186:Generated_Source\PSoC4/CyLib.c ****     * \param timeoutUs Timeout in microseconds.
1187:Generated_Source\PSoC4/CyLib.c ****     *
1188:Generated_Source\PSoC4/CyLib.c ****     * If zero is specified, the function does not wait for timeout and returns
1189:Generated_Source\PSoC4/CyLib.c ****     * CYRET_SUCCESS. If non-zero is specified, the function waits for the timeout.
1190:Generated_Source\PSoC4/CyLib.c ****     *
1191:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_SUCCESS Completed successfully. The ECO is oscillating and
1192:Generated_Source\PSoC4/CyLib.c ****     * amplitude reached 60% and it does not mean 24 MHz crystal is within 50 ppm.
1193:Generated_Source\PSoC4/CyLib.c ****     *
1194:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_TIMEOUT Timeout occurred. If the crystal is not oscillating
1195:Generated_Source\PSoC4/CyLib.c ****     * or amplitude didn't reach 60% after specified amount of time, CYRET_TIMEOUT
1196:Generated_Source\PSoC4/CyLib.c ****     * is returned.
1197:Generated_Source\PSoC4/CyLib.c ****     *
1198:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_BAD_PARAM One or more invalid parameters.
1199:Generated_Source\PSoC4/CyLib.c ****     *
1200:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1201:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkEcoStart(uint32 timeoutUs)
1202:Generated_Source\PSoC4/CyLib.c ****     {
 549              		.loc 1 1202 0
 550              		.cfi_startproc
 551              		@ args = 0, pretend = 0, frame = 16
 552              		@ frame_needed = 1, uses_anonymous_args = 0
 553 0000 80B5     		push	{r7, lr}
 554              		.cfi_def_cfa_offset 8
 555              		.cfi_offset 7, -8
 556              		.cfi_offset 14, -4
 557 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 32


 558              		.cfi_def_cfa_offset 24
 559 0004 00AF     		add	r7, sp, #0
 560              		.cfi_def_cfa_register 7
 561 0006 7860     		str	r0, [r7, #4]
1203:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_SUCCESS;
 562              		.loc 1 1203 0
 563 0008 0023     		movs	r3, #0
 564 000a FB60     		str	r3, [r7, #12]
1204:Generated_Source\PSoC4/CyLib.c **** 
1205:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_ECO_BLESS)
1206:Generated_Source\PSoC4/CyLib.c ****             /* Enable the RF oscillator band gap */
1207:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLESS_RF_CONFIG_REG |= CY_SYS_XTAL_BLESS_RF_CONFIG_RF_ENABLE;
 565              		.loc 1 1207 0
 566 000c 154B     		ldr	r3, .L32
 567 000e 154A     		ldr	r2, .L32
 568 0010 1268     		ldr	r2, [r2]
 569 0012 0121     		movs	r1, #1
 570 0014 0A43     		orrs	r2, r1
 571 0016 1A60     		str	r2, [r3]
1208:Generated_Source\PSoC4/CyLib.c **** 
1209:Generated_Source\PSoC4/CyLib.c ****             /* Update trimming register */
1210:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_BB_XO_REG = CY_SYS_XTAL_BLERD_BB_XO_TRIM;
 572              		.loc 1 1210 0
 573 0018 134B     		ldr	r3, .L32+4
 574 001a 144A     		ldr	r2, .L32+8
 575 001c 1A60     		str	r2, [r3]
1211:Generated_Source\PSoC4/CyLib.c **** 
1212:Generated_Source\PSoC4/CyLib.c ****             /* Enable the Crystal */
1213:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_DBUS_REG |= CY_SYS_XTAL_BLERD_DBUS_XTAL_ENABLE;
 576              		.loc 1 1213 0
 577 001e 144B     		ldr	r3, .L32+12
 578 0020 134A     		ldr	r2, .L32+12
 579 0022 1268     		ldr	r2, [r2]
 580 0024 8021     		movs	r1, #128
 581 0026 0902     		lsls	r1, r1, #8
 582 0028 0A43     		orrs	r2, r1
 583 002a 1A60     		str	r2, [r3]
1214:Generated_Source\PSoC4/CyLib.c **** 
1215:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_IP_ECO_BLESSV3)
1216:Generated_Source\PSoC4/CyLib.c ****             uint32 regConfig;
1217:Generated_Source\PSoC4/CyLib.c ****             uint32 intrRegMaskStore = 0u;
1218:Generated_Source\PSoC4/CyLib.c **** 
1219:Generated_Source\PSoC4/CyLib.c ****             if (0u != (CY_SYS_BLESS_MT_CFG_REG & (CY_SYS_BLESS_MT_CFG_ENABLE_BLERD <<  CYFLD_BLE_BL
1220:Generated_Source\PSoC4/CyLib.c ****             {
1221:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_CFG_REG |= (CY_SYS_BLESS_MT_CFG_DPSLP_ECO_ON  <<  CYFLD_BLE_BLESS_D
1222:Generated_Source\PSoC4/CyLib.c ****             }
1223:Generated_Source\PSoC4/CyLib.c ****             else
1224:Generated_Source\PSoC4/CyLib.c ****             {
1225:Generated_Source\PSoC4/CyLib.c ****                 /* Init BLE core */
1226:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_DELAY_CFG_REG = CY_SYS_BLESS_MT_DELAY_CFG_INIT;
1227:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_DELAY_CFG2_REG = CY_SYS_BLESS_MT_DELAY_CFG2_INIT;
1228:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_DELAY_CFG3_REG = CY_SYS_BLESS_MT_DELAY_CFG3_INIT;
1229:Generated_Source\PSoC4/CyLib.c **** 
1230:Generated_Source\PSoC4/CyLib.c ****                 /* RCB init */
1231:Generated_Source\PSoC4/CyLib.c ****                 regConfig = CY_SYS_RCB_CTRL_REG;
1232:Generated_Source\PSoC4/CyLib.c ****                 regConfig &= CY_SYS_RCB_CTRL_CLEAR;
1233:Generated_Source\PSoC4/CyLib.c ****                 regConfig |= CY_SYS_RCB_CTRL_INIT;
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 33


1234:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_CTRL_REG = regConfig;
1235:Generated_Source\PSoC4/CyLib.c **** 
1236:Generated_Source\PSoC4/CyLib.c ****                 intrRegMaskStore = CY_SYS_BLESS_INTR_MASK_REG;
1237:Generated_Source\PSoC4/CyLib.c ****                 if(0u != (CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK & intrRegMaskStore))
1238:Generated_Source\PSoC4/CyLib.c ****                 {
1239:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG &= ~CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK;
1240:Generated_Source\PSoC4/CyLib.c ****                 }
1241:Generated_Source\PSoC4/CyLib.c **** 
1242:Generated_Source\PSoC4/CyLib.c ****                 /* Enable BLE core */
1243:Generated_Source\PSoC4/CyLib.c ****                 regConfig = CY_SYS_BLESS_MT_CFG_REG;
1244:Generated_Source\PSoC4/CyLib.c ****                 regConfig &= CY_SYS_BLESS_MT_CFG_CLEAR;
1245:Generated_Source\PSoC4/CyLib.c ****                 regConfig |= CY_SYS_BLESS_MT_CFG_INIT;
1246:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_CFG_REG = regConfig;
1247:Generated_Source\PSoC4/CyLib.c **** 
1248:Generated_Source\PSoC4/CyLib.c ****                 while(0u == ((CY_SYS_BLESS_BLERD_ACTIVE_INTR_STAT & CY_SYS_BLESS_INTR_STAT_REG)))
1249:Generated_Source\PSoC4/CyLib.c ****                 {
1250:Generated_Source\PSoC4/CyLib.c ****                     /* Wait until BLERD55 moves to active state */
1251:Generated_Source\PSoC4/CyLib.c ****                 }
1252:Generated_Source\PSoC4/CyLib.c **** 
1253:Generated_Source\PSoC4/CyLib.c ****                 if(0u != (CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK & intrRegMaskStore))
1254:Generated_Source\PSoC4/CyLib.c ****                 {
1255:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG |= CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK;
1256:Generated_Source\PSoC4/CyLib.c ****                 }
1257:Generated_Source\PSoC4/CyLib.c **** 
1258:Generated_Source\PSoC4/CyLib.c ****                 /* Send write commands to RBUS */
1259:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_FREQ_NRST_SET;
1260:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_DIG_CLK_SET;
1261:Generated_Source\PSoC4/CyLib.c **** 
1262:Generated_Source\PSoC4/CyLib.c ****                 #if (CY_SYS_BLE_CLK_ECO_FREQ_32MHZ == CYDEV_ECO_CLK_MHZ)
1263:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_FREQ_XTAL_DIV_SET;
1264:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_RCB_TX_FIFO_WR_REG = (CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET | CY_SYS_RCB_RBUS_
1265:Generated_Source\PSoC4/CyLib.c ****                 #else
1266:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_FREQ_XTAL_NODIV_SET;
1267:Generated_Source\PSoC4/CyLib.c ****                 #endif
1268:Generated_Source\PSoC4/CyLib.c **** 
1269:Generated_Source\PSoC4/CyLib.c ****                 intrRegMaskStore = CY_SYS_BLESS_INTR_MASK_REG;
1270:Generated_Source\PSoC4/CyLib.c ****                 if(0u != (CY_SYS_RCB_INTR_RCB_DONE & intrRegMaskStore))
1271:Generated_Source\PSoC4/CyLib.c ****                 {
1272:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG &= ~(CY_SYS_RCB_INTR_RCB_DONE | CY_SYS_RCB_INTR_RCB_
1273:Generated_Source\PSoC4/CyLib.c ****                 }
1274:Generated_Source\PSoC4/CyLib.c **** 
1275:Generated_Source\PSoC4/CyLib.c ****                 /* Send read commands to RBUS */
1276:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = (CY_SYS_RCB_RBUS_RD_CMD |
1277:Generated_Source\PSoC4/CyLib.c ****                                             (CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET & ~CY_SYS_RCB_RBUS_VAL
1278:Generated_Source\PSoC4/CyLib.c **** 
1279:Generated_Source\PSoC4/CyLib.c ****                 while (0u == (CY_SYS_RCB_INTR_RCB_RX_FIFO_NOT_EMPTY & CY_SYS_RCB_INTR_REG))
1280:Generated_Source\PSoC4/CyLib.c ****                 {
1281:Generated_Source\PSoC4/CyLib.c ****                     /* Wait until RX_FIFO_NOT_EMPTY state */
1282:Generated_Source\PSoC4/CyLib.c ****                 }
1283:Generated_Source\PSoC4/CyLib.c **** 
1284:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_INTR_REG |= CY_SYS_RCB_INTR_RCB_DONE;
1285:Generated_Source\PSoC4/CyLib.c **** 
1286:Generated_Source\PSoC4/CyLib.c ****                 regConfig = CY_SYS_RCB_RX_FIFO_RD_REG & CY_SYS_RCB_RBUS_TRIM_MASK;
1287:Generated_Source\PSoC4/CyLib.c **** 
1288:Generated_Source\PSoC4/CyLib.c ****                 /* Send write commands to RBUS */
1289:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = (CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET | regConfig | CY_SYS_R
1290:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 34


1291:Generated_Source\PSoC4/CyLib.c ****                 while (0u == (CY_SYS_RCB_INTR_RCB_DONE & CY_SYS_RCB_INTR_REG))
1292:Generated_Source\PSoC4/CyLib.c ****                 {
1293:Generated_Source\PSoC4/CyLib.c ****                     /* Wait until RCB_DONE state */
1294:Generated_Source\PSoC4/CyLib.c ****                 }
1295:Generated_Source\PSoC4/CyLib.c **** 
1296:Generated_Source\PSoC4/CyLib.c ****                 /* Clear Interrupt */
1297:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_INTR_REG = CY_SYS_RCB_INTR_CLEAR;
1298:Generated_Source\PSoC4/CyLib.c **** 
1299:Generated_Source\PSoC4/CyLib.c ****                 if(0u != ((CY_SYS_RCB_INTR_RCB_DONE | CY_SYS_RCB_INTR_RCB_RX_FIFO_NOT_EMPTY) & intr
1300:Generated_Source\PSoC4/CyLib.c ****                 {
1301:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG |= intrRegMaskStore;
1302:Generated_Source\PSoC4/CyLib.c ****                 }
1303:Generated_Source\PSoC4/CyLib.c **** 
1304:Generated_Source\PSoC4/CyLib.c ****             }
1305:Generated_Source\PSoC4/CyLib.c ****         #else /* CY_IP_ECO_SRSSV2 || CY_IP_ECO_SRSSLT */
1306:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_ENABLE;
1307:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_ECO_CONFIG_CLK_EN_TIMEOUT_US);
1308:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_ECOV2_SRSSLT)
1309:Generated_Source\PSoC4/CyLib.c ****                 CySysClkPllClearPendingInterrupt(CY_SYS_PLL_INTR_WD_ERR);
1310:Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_ECOV2_SRSSLT) */
1311:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_CLK_EN;
1312:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_ECO_BLESS) */
1313:Generated_Source\PSoC4/CyLib.c **** 
1314:Generated_Source\PSoC4/CyLib.c ****         if(timeoutUs > 0u)
 584              		.loc 1 1314 0
 585 002c 7B68     		ldr	r3, [r7, #4]
 586 002e 002B     		cmp	r3, #0
 587 0030 12D0     		beq	.L27
1315:Generated_Source\PSoC4/CyLib.c ****         {
1316:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_TIMEOUT;
 588              		.loc 1 1316 0
 589 0032 1023     		movs	r3, #16
 590 0034 FB60     		str	r3, [r7, #12]
1317:Generated_Source\PSoC4/CyLib.c **** 
1318:Generated_Source\PSoC4/CyLib.c ****             for( ; timeoutUs > 0u; timeoutUs--)
 591              		.loc 1 1318 0
 592 0036 0CE0     		b	.L28
 593              	.L30:
1319:Generated_Source\PSoC4/CyLib.c ****             {
1320:Generated_Source\PSoC4/CyLib.c ****                 CyDelayUs(1u);
 594              		.loc 1 1320 0
 595 0038 0120     		movs	r0, #1
 596 003a FFF7FEFF 		bl	CyDelayUs
1321:Generated_Source\PSoC4/CyLib.c **** 
1322:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkEcoReadStatus())
 597              		.loc 1 1322 0
 598 003e FFF7FEFF 		bl	CySysClkEcoReadStatus
 599 0042 031E     		subs	r3, r0, #0
 600 0044 02D0     		beq	.L29
1323:Generated_Source\PSoC4/CyLib.c ****                 {
1324:Generated_Source\PSoC4/CyLib.c ****                     returnStatus = CYRET_SUCCESS;
 601              		.loc 1 1324 0
 602 0046 0023     		movs	r3, #0
 603 0048 FB60     		str	r3, [r7, #12]
1325:Generated_Source\PSoC4/CyLib.c ****                     break;
 604              		.loc 1 1325 0
 605 004a 05E0     		b	.L27
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 35


 606              	.L29:
1318:Generated_Source\PSoC4/CyLib.c ****             {
 607              		.loc 1 1318 0
 608 004c 7B68     		ldr	r3, [r7, #4]
 609 004e 013B     		subs	r3, r3, #1
 610 0050 7B60     		str	r3, [r7, #4]
 611              	.L28:
1318:Generated_Source\PSoC4/CyLib.c ****             {
 612              		.loc 1 1318 0 is_stmt 0 discriminator 1
 613 0052 7B68     		ldr	r3, [r7, #4]
 614 0054 002B     		cmp	r3, #0
 615 0056 EFD1     		bne	.L30
 616              	.L27:
1326:Generated_Source\PSoC4/CyLib.c ****                 }
1327:Generated_Source\PSoC4/CyLib.c ****             }
1328:Generated_Source\PSoC4/CyLib.c **** 
1329:Generated_Source\PSoC4/CyLib.c ****         }
1330:Generated_Source\PSoC4/CyLib.c **** 
1331:Generated_Source\PSoC4/CyLib.c ****         return(returnStatus);
 617              		.loc 1 1331 0 is_stmt 1
 618 0058 FB68     		ldr	r3, [r7, #12]
1332:Generated_Source\PSoC4/CyLib.c ****     }
 619              		.loc 1 1332 0
 620 005a 1800     		movs	r0, r3
 621 005c BD46     		mov	sp, r7
 622 005e 04B0     		add	sp, sp, #16
 623              		@ sp needed
 624 0060 80BD     		pop	{r7, pc}
 625              	.L33:
 626 0062 C046     		.align	2
 627              	.L32:
 628 0064 60F02E40 		.word	1076818016
 629 0068 78002E40 		.word	1076756600
 630 006c 02200000 		.word	8194
 631 0070 10002E40 		.word	1076756496
 632              		.cfi_endproc
 633              	.LFE9:
 634              		.size	CySysClkEcoStart, .-CySysClkEcoStart
 635              		.section	.text.CySysClkEcoStop,"ax",%progbits
 636              		.align	2
 637              		.global	CySysClkEcoStop
 638              		.code	16
 639              		.thumb_func
 640              		.type	CySysClkEcoStop, %function
 641              	CySysClkEcoStop:
 642              	.LFB10:
1333:Generated_Source\PSoC4/CyLib.c **** 
1334:Generated_Source\PSoC4/CyLib.c **** 
1335:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1336:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoStop
1337:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1338:Generated_Source\PSoC4/CyLib.c ****     *
1339:Generated_Source\PSoC4/CyLib.c ****     * Stops the megahertz crystal.
1340:Generated_Source\PSoC4/CyLib.c ****     *
1341:Generated_Source\PSoC4/CyLib.c ****     * If ECO is disabled when it is sourcing HFCLK, the CPU will halt. In addition,
1342:Generated_Source\PSoC4/CyLib.c ****     * for PSoC 4100 BLE / PSoC 4200 BLE devices, the BLE sub-system will stop
1343:Generated_Source\PSoC4/CyLib.c ****     * functioning.
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 36


1344:Generated_Source\PSoC4/CyLib.c ****     *
1345:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1346:Generated_Source\PSoC4/CyLib.c ****     void CySysClkEcoStop(void)
1347:Generated_Source\PSoC4/CyLib.c ****     {
 643              		.loc 1 1347 0
 644              		.cfi_startproc
 645              		@ args = 0, pretend = 0, frame = 0
 646              		@ frame_needed = 1, uses_anonymous_args = 0
 647 0000 80B5     		push	{r7, lr}
 648              		.cfi_def_cfa_offset 8
 649              		.cfi_offset 7, -8
 650              		.cfi_offset 14, -4
 651 0002 00AF     		add	r7, sp, #0
 652              		.cfi_def_cfa_register 7
1348:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_WCO_BLESS)
1349:Generated_Source\PSoC4/CyLib.c ****             /* Disable the RF oscillator band gap */
1350:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLESS_RF_CONFIG_REG &= (uint32) ~CY_SYS_XTAL_BLESS_RF_CONFIG_RF_ENABLE;
 653              		.loc 1 1350 0
 654 0004 074B     		ldr	r3, .L35
 655 0006 074A     		ldr	r2, .L35
 656 0008 1268     		ldr	r2, [r2]
 657 000a 0121     		movs	r1, #1
 658 000c 8A43     		bics	r2, r1
 659 000e 1A60     		str	r2, [r3]
1351:Generated_Source\PSoC4/CyLib.c **** 
1352:Generated_Source\PSoC4/CyLib.c ****             /* Disable the Crystal */
1353:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_DBUS_REG &= (uint32) ~CY_SYS_XTAL_BLERD_DBUS_XTAL_ENABLE;
 660              		.loc 1 1353 0
 661 0010 054B     		ldr	r3, .L35+4
 662 0012 054A     		ldr	r2, .L35+4
 663 0014 1268     		ldr	r2, [r2]
 664 0016 0549     		ldr	r1, .L35+8
 665 0018 0A40     		ands	r2, r1
 666 001a 1A60     		str	r2, [r3]
1354:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_IP_ECO_BLESSV3)
1355:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_BLESS_MT_CFG_REG &= ~(CY_SYS_BLESS_MT_CFG_DPSLP_ECO_ON  <<  CYFLD_BLE_BLESS_DPSL
1356:Generated_Source\PSoC4/CyLib.c ****         #else
1357:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG &= (uint32) ~(CY_SYS_CLK_ECO_CONFIG_ENABLE | CY_SYS_CLK_ECO_C
1358:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_WCO_BLESS) */
1359:Generated_Source\PSoC4/CyLib.c ****     }
 667              		.loc 1 1359 0
 668 001c C046     		nop
 669 001e BD46     		mov	sp, r7
 670              		@ sp needed
 671 0020 80BD     		pop	{r7, pc}
 672              	.L36:
 673 0022 C046     		.align	2
 674              	.L35:
 675 0024 60F02E40 		.word	1076818016
 676 0028 10002E40 		.word	1076756496
 677 002c FF7FFFFF 		.word	-32769
 678              		.cfi_endproc
 679              	.LFE10:
 680              		.size	CySysClkEcoStop, .-CySysClkEcoStop
 681              		.section	.text.CySysClkEcoReadStatus,"ax",%progbits
 682              		.align	2
 683              		.global	CySysClkEcoReadStatus
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 37


 684              		.code	16
 685              		.thumb_func
 686              		.type	CySysClkEcoReadStatus, %function
 687              	CySysClkEcoReadStatus:
 688              	.LFB11:
1360:Generated_Source\PSoC4/CyLib.c **** 
1361:Generated_Source\PSoC4/CyLib.c **** 
1362:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1363:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoReadStatus
1364:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1365:Generated_Source\PSoC4/CyLib.c ****     *
1366:Generated_Source\PSoC4/CyLib.c ****     * Reads the status bit for the megahertz crystal.
1367:Generated_Source\PSoC4/CyLib.c ****     *
1368:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4100 BLE / PSoC 4200 BLE devices, the status bit is the
1369:Generated_Source\PSoC4/CyLib.c ****     * XO_AMP_DETECT bit in FSM register.
1370:Generated_Source\PSoC4/CyLib.c ****     *
1371:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L / 4100S / 4500 with ECO devices, the error status bit is
1372:Generated_Source\PSoC4/CyLib.c ****     * the WATCHDOG_ERROR bit in ECO_STATUS register.
1373:Generated_Source\PSoC4/CyLib.c ****     *
1374:Generated_Source\PSoC4/CyLib.c ****     * \return PSoC 4100 BLE/PSoC 4200 BLE: Non-zero indicates that ECO output
1375:Generated_Source\PSoC4/CyLib.c ****     * reached 50 ppm and is oscillating in valid range.
1376:Generated_Source\PSoC4/CyLib.c ****     *
1377:Generated_Source\PSoC4/CyLib.c ****     * \return PSoC 4200L / 4100S / 4500 with ECO: Non-zero indicates that ECO
1378:Generated_Source\PSoC4/CyLib.c ****     * is running.
1379:Generated_Source\PSoC4/CyLib.c ****     *
1380:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1381:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkEcoReadStatus(void)
1382:Generated_Source\PSoC4/CyLib.c ****     {
 689              		.loc 1 1382 0
 690              		.cfi_startproc
 691              		@ args = 0, pretend = 0, frame = 8
 692              		@ frame_needed = 1, uses_anonymous_args = 0
 693 0000 80B5     		push	{r7, lr}
 694              		.cfi_def_cfa_offset 8
 695              		.cfi_offset 7, -8
 696              		.cfi_offset 14, -4
 697 0002 82B0     		sub	sp, sp, #8
 698              		.cfi_def_cfa_offset 16
 699 0004 00AF     		add	r7, sp, #0
 700              		.cfi_def_cfa_register 7
1383:Generated_Source\PSoC4/CyLib.c ****         uint32 returnValue;
1384:Generated_Source\PSoC4/CyLib.c **** 
1385:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_WCO_BLESS)
1386:Generated_Source\PSoC4/CyLib.c ****             returnValue = CY_SYS_XTAL_BLERD_FSM_REG & CY_SYS_XTAL_BLERD_FSM_XO_AMP_DETECT;
 701              		.loc 1 1386 0
 702 0006 054B     		ldr	r3, .L39
 703 0008 1B68     		ldr	r3, [r3]
 704 000a 0122     		movs	r2, #1
 705 000c 1340     		ands	r3, r2
 706 000e 7B60     		str	r3, [r7, #4]
1387:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_IP_ECO_BLESSV3)
1388:Generated_Source\PSoC4/CyLib.c ****             returnValue = (CY_SYS_BLESS_MT_STATUS_REG & CY_SYS_BLESS_MT_STATUS_CURR_STATE_MASK) >> 
1389:Generated_Source\PSoC4/CyLib.c **** 
1390:Generated_Source\PSoC4/CyLib.c ****             returnValue =  ((CY_SYS_BLESS_MT_STATUS_BLERD_IDLE == returnValue) ||
1391:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_BLESS_MT_STATUS_SWITCH_EN  == returnValue) ||
1392:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_BLESS_MT_STATUS_ACTIVE  ==  returnValue) ||
1393:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_BLESS_MT_STATUS_ISOLATE == returnValue));
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 38


1394:Generated_Source\PSoC4/CyLib.c ****         #else
1395:Generated_Source\PSoC4/CyLib.c ****             returnValue = (0u != (CY_SYS_CLK_ECO_STATUS_REG & CY_SYS_CLK_ECO_STATUS_WATCHDOG_ERROR)
1396:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_WCO_BLESS) */
1397:Generated_Source\PSoC4/CyLib.c **** 
1398:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
 707              		.loc 1 1398 0
 708 0010 7B68     		ldr	r3, [r7, #4]
1399:Generated_Source\PSoC4/CyLib.c ****     }
 709              		.loc 1 1399 0
 710 0012 1800     		movs	r0, r3
 711 0014 BD46     		mov	sp, r7
 712 0016 02B0     		add	sp, sp, #8
 713              		@ sp needed
 714 0018 80BD     		pop	{r7, pc}
 715              	.L40:
 716 001a C046     		.align	2
 717              	.L39:
 718 001c 0C002E40 		.word	1076756492
 719              		.cfi_endproc
 720              	.LFE11:
 721              		.size	CySysClkEcoReadStatus, .-CySysClkEcoReadStatus
 722              		.section	.text.CySysClkWriteEcoDiv,"ax",%progbits
 723              		.align	2
 724              		.global	CySysClkWriteEcoDiv
 725              		.code	16
 726              		.thumb_func
 727              		.type	CySysClkWriteEcoDiv, %function
 728              	CySysClkWriteEcoDiv:
 729              	.LFB12:
1400:Generated_Source\PSoC4/CyLib.c **** 
1401:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_ECO_BLESS || CY_IP_ECO_BLESSV3)
1402:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1403:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkWriteEcoDiv
1404:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1405:Generated_Source\PSoC4/CyLib.c ****         *
1406:Generated_Source\PSoC4/CyLib.c ****         * Selects value for the ECO divider.
1407:Generated_Source\PSoC4/CyLib.c ****         *
1408:Generated_Source\PSoC4/CyLib.c ****         * The ECO must not be the HFCLK clock source when this function is called.
1409:Generated_Source\PSoC4/CyLib.c ****         * The HFCLK source can be changed to the other clock source by call to the
1410:Generated_Source\PSoC4/CyLib.c ****         * CySysClkWriteHfclkDirect() function. If the ECO sources the HFCLK this
1411:Generated_Source\PSoC4/CyLib.c ****         * function will not have any effect if compiler in release mode, and halt the
1412:Generated_Source\PSoC4/CyLib.c ****         * CPU when compiler in debug mode.
1413:Generated_Source\PSoC4/CyLib.c ****         *
1414:Generated_Source\PSoC4/CyLib.c ****         * If the SYSCLK clock frequency increases during the device operation, call
1415:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() with the appropriate parameter to adjust the number
1416:Generated_Source\PSoC4/CyLib.c ****         * of clock cycles the cache will wait before sampling data comes back from
1417:Generated_Source\PSoC4/CyLib.c ****         * Flash. If the SYSCLK clock frequency decreases, you can call
1418:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() to improve the CPU performance. See
1419:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() description for more information.
1420:Generated_Source\PSoC4/CyLib.c ****         *
1421:Generated_Source\PSoC4/CyLib.c ****         * \param divider Power of 2 divider selection.
1422:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV1
1423:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV2
1424:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV4
1425:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV8
1426:Generated_Source\PSoC4/CyLib.c ****         *
1427:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 39


1428:Generated_Source\PSoC4/CyLib.c ****         void CySysClkWriteEcoDiv(uint32 divider)
1429:Generated_Source\PSoC4/CyLib.c ****         {
 730              		.loc 1 1429 0
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 16
 733              		@ frame_needed = 1, uses_anonymous_args = 0
 734 0000 90B5     		push	{r4, r7, lr}
 735              		.cfi_def_cfa_offset 12
 736              		.cfi_offset 4, -12
 737              		.cfi_offset 7, -8
 738              		.cfi_offset 14, -4
 739 0002 85B0     		sub	sp, sp, #20
 740              		.cfi_def_cfa_offset 32
 741 0004 00AF     		add	r7, sp, #0
 742              		.cfi_def_cfa_register 7
 743 0006 7860     		str	r0, [r7, #4]
1430:Generated_Source\PSoC4/CyLib.c ****             uint8  interruptState;
1431:Generated_Source\PSoC4/CyLib.c **** 
1432:Generated_Source\PSoC4/CyLib.c ****             if (CY_SYS_CLK_HFCLK_ECO != (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK)
 744              		.loc 1 1432 0
 745 0008 114B     		ldr	r3, .L45
 746 000a 1B68     		ldr	r3, [r3]
 747 000c 0722     		movs	r2, #7
 748 000e 1340     		ands	r3, r2
 749 0010 022B     		cmp	r3, #2
 750 0012 16D0     		beq	.L42
1433:Generated_Source\PSoC4/CyLib.c ****             {
1434:Generated_Source\PSoC4/CyLib.c ****                 interruptState = CyEnterCriticalSection();
 751              		.loc 1 1434 0
 752 0014 0F23     		movs	r3, #15
 753 0016 FC18     		adds	r4, r7, r3
 754 0018 FFF7FEFF 		bl	CyEnterCriticalSection
 755 001c 0300     		movs	r3, r0
 756 001e 2370     		strb	r3, [r4]
1435:Generated_Source\PSoC4/CyLib.c **** 
1436:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG =  (divider & CY_SYS_CLK_XTAL_CLK_DIV_MASK) |
 757              		.loc 1 1436 0
 758 0020 0C4B     		ldr	r3, .L45+4
 759 0022 7A68     		ldr	r2, [r7, #4]
 760 0024 0321     		movs	r1, #3
 761 0026 1140     		ands	r1, r2
1437:Generated_Source\PSoC4/CyLib.c ****                                                       (CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG & ((uint3
 762              		.loc 1 1437 0
 763 0028 0A4A     		ldr	r2, .L45+4
 764 002a 1268     		ldr	r2, [r2]
 765 002c 0320     		movs	r0, #3
 766 002e 8243     		bics	r2, r0
1436:Generated_Source\PSoC4/CyLib.c ****                                                       (CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG & ((uint3
 767              		.loc 1 1436 0
 768 0030 0A43     		orrs	r2, r1
 769 0032 1A60     		str	r2, [r3]
1438:Generated_Source\PSoC4/CyLib.c **** 
1439:Generated_Source\PSoC4/CyLib.c ****                 CyExitCriticalSection(interruptState);
 770              		.loc 1 1439 0
 771 0034 0F23     		movs	r3, #15
 772 0036 FB18     		adds	r3, r7, r3
 773 0038 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 40


 774 003a 1800     		movs	r0, r3
 775 003c FFF7FEFF 		bl	CyExitCriticalSection
1440:Generated_Source\PSoC4/CyLib.c ****             }
1441:Generated_Source\PSoC4/CyLib.c ****             else
1442:Generated_Source\PSoC4/CyLib.c ****             {
1443:Generated_Source\PSoC4/CyLib.c ****                 /* Halt CPU in debug mode if ECO sources HFCLK */
1444:Generated_Source\PSoC4/CyLib.c ****                 CYASSERT(0u != 0u);
1445:Generated_Source\PSoC4/CyLib.c ****             }
1446:Generated_Source\PSoC4/CyLib.c ****         }
 776              		.loc 1 1446 0
 777 0040 02E0     		b	.L44
 778              	.L42:
1444:Generated_Source\PSoC4/CyLib.c ****             }
 779              		.loc 1 1444 0 discriminator 1
 780 0042 0020     		movs	r0, #0
 781 0044 FFF7FEFF 		bl	CyHalt
 782              	.L44:
 783              		.loc 1 1446 0
 784 0048 C046     		nop
 785 004a BD46     		mov	sp, r7
 786 004c 05B0     		add	sp, sp, #20
 787              		@ sp needed
 788 004e 90BD     		pop	{r4, r7, pc}
 789              	.L46:
 790              		.align	2
 791              	.L45:
 792 0050 00010B40 		.word	1074462976
 793 0054 64F02E40 		.word	1076818020
 794              		.cfi_endproc
 795              	.LFE12:
 796              		.size	CySysClkWriteEcoDiv, .-CySysClkWriteEcoDiv
 797              		.section	.text.CySysLvdEnable,"ax",%progbits
 798              		.align	2
 799              		.global	CySysLvdEnable
 800              		.code	16
 801              		.thumb_func
 802              		.type	CySysLvdEnable, %function
 803              	CySysLvdEnable:
 804              	.LFB13:
1447:Generated_Source\PSoC4/CyLib.c **** 
1448:Generated_Source\PSoC4/CyLib.c ****     #else
1449:Generated_Source\PSoC4/CyLib.c **** 
1450:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1451:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkConfigureEcoTrim
1452:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1453:Generated_Source\PSoC4/CyLib.c ****         *
1454:Generated_Source\PSoC4/CyLib.c ****         * Selects trim setting values for ECO. This API is available only for PSoC
1455:Generated_Source\PSoC4/CyLib.c ****         * 4200L / 4100S /4500 with ECO devices only.
1456:Generated_Source\PSoC4/CyLib.c ****         *
1457:Generated_Source\PSoC4/CyLib.c ****         * The following parameters can be trimmed for ECO. The affected registers are
1458:Generated_Source\PSoC4/CyLib.c ****         * ECO_TRIM0 and ECO_TRIM1.
1459:Generated_Source\PSoC4/CyLib.c ****         *
1460:Generated_Source\PSoC4/CyLib.c ****         * Watchdog trim - This bit field sets the error threshold below the steady
1461:Generated_Source\PSoC4/CyLib.c ****         * state amplitude level.
1462:Generated_Source\PSoC4/CyLib.c ****         *
1463:Generated_Source\PSoC4/CyLib.c ****         * Amplitude trim - This bit field is to set the crystal drive level when
1464:Generated_Source\PSoC4/CyLib.c ****         * ECO_CONFIG.AGC_EN = 1. WARNING: use care when setting this field because
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 41


1465:Generated_Source\PSoC4/CyLib.c ****         * driving a crystal beyond its rated limit can permanently damage the crystal.
1466:Generated_Source\PSoC4/CyLib.c ****         *
1467:Generated_Source\PSoC4/CyLib.c ****         * Filter frequency trim - This bit field sets LPF frequency trim and affects
1468:Generated_Source\PSoC4/CyLib.c ****         * the 3rd harmonic content.
1469:Generated_Source\PSoC4/CyLib.c ****         *
1470:Generated_Source\PSoC4/CyLib.c ****         * Feedback resistor trim - This bit field sets the feedback resistor trim and
1471:Generated_Source\PSoC4/CyLib.c ****         * impacts the oscillation amplitude.
1472:Generated_Source\PSoC4/CyLib.c ****         *
1473:Generated_Source\PSoC4/CyLib.c ****         * Amplifier gain trim - This bit field sets the amplifier gain trim and affects
1474:Generated_Source\PSoC4/CyLib.c ****         * the startup time of the crystal.
1475:Generated_Source\PSoC4/CyLib.c ****         *
1476:Generated_Source\PSoC4/CyLib.c ****         * Use care when setting the amplitude trim field because driving a crystal
1477:Generated_Source\PSoC4/CyLib.c ****         * beyond its rated limit can permanently damage the crystal.
1478:Generated_Source\PSoC4/CyLib.c ****         *
1479:Generated_Source\PSoC4/CyLib.c ****         * \param wDTrim: Watchdog trim
1480:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM0      Error threshold is 0.05 V
1481:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM1      Error threshold is 0.10 V
1482:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM2      Error threshold is 0.15 V
1483:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM3      Error threshold is 0.20 V
1484:Generated_Source\PSoC4/CyLib.c ****         *
1485:Generated_Source\PSoC4/CyLib.c ****         * \param aTrim: Amplitude trim
1486:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM0       Amplitude is 0.3 Vpp
1487:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM1       Amplitude is 0.4 Vpp
1488:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM2       Amplitude is 0.5 Vpp
1489:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM3       Amplitude is 0.6 Vpp
1490:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM4       Amplitude is 0.7 Vpp
1491:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM5       Amplitude is 0.8 Vpp
1492:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM6       Amplitude is 0.9 Vpp
1493:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM7       Amplitude is 1.0 Vpp
1494:Generated_Source\PSoC4/CyLib.c ****         *
1495:Generated_Source\PSoC4/CyLib.c ****         * \param fTrim: Filter frequency trim
1496:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM0       Crystal frequency > 30 MHz
1497:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM1       24 MHz < Crystal frequency <= 30 MHz
1498:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM2       17 MHz < Crystal frequency <= 24 MHz
1499:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM3       Crystal frequency <= 17 MHz
1500:Generated_Source\PSoC4/CyLib.c ****         *
1501:Generated_Source\PSoC4/CyLib.c ****         * \param rTrim: Feedback resistor trim
1502:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM0       Crystal frequency > 30 MHz
1503:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM1       24 MHz < Crystal frequency <= 30 MHz
1504:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM2       17 MHz < Crystal frequency <= 24 MHz
1505:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM3       Crystal frequency <= 17 MHz
1506:Generated_Source\PSoC4/CyLib.c ****         *
1507:Generated_Source\PSoC4/CyLib.c ****         * \param gTrim: Amplifier gain trim. Calculate the minimum required gm
1508:Generated_Source\PSoC4/CyLib.c ****         * (trans-conductance value). Divide the calculated gm value by 4.5 to
1509:Generated_Source\PSoC4/CyLib.c ****         * obtain an integer value 'result'. For more information please refer
1510:Generated_Source\PSoC4/CyLib.c ****         * to the device TRM.
1511:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM0       If result = 1
1512:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM1       If result = 0
1513:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM2       If result = 2
1514:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM2       If result = 3
1515:Generated_Source\PSoC4/CyLib.c ****         *
1516:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1517:Generated_Source\PSoC4/CyLib.c ****         void CySysClkConfigureEcoTrim(uint32 wDTrim, uint32 aTrim, uint32 fTrim, uint32 rTrim, uint
1518:Generated_Source\PSoC4/CyLib.c ****         {
1519:Generated_Source\PSoC4/CyLib.c ****             uint8  interruptState;
1520:Generated_Source\PSoC4/CyLib.c ****             uint32 regTmp;
1521:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 42


1522:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1523:Generated_Source\PSoC4/CyLib.c **** 
1524:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_ECO_TRIM0_REG & ~(CY_SYS_CLK_ECO_TRIM0_WDTRIM_MASK | CY_SYS_CLK_EC
1525:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (wDTrim << CY_SYS_CLK_ECO_TRIM0_WDTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM
1526:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (aTrim << CY_SYS_CLK_ECO_TRIM0_ATRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM0_
1527:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_TRIM0_REG = regTmp;
1528:Generated_Source\PSoC4/CyLib.c **** 
1529:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_ECO_TRIM1_REG & ~(CY_SYS_CLK_ECO_TRIM1_FTRIM_MASK |
1530:Generated_Source\PSoC4/CyLib.c ****                                                    CY_SYS_CLK_ECO_TRIM1_RTRIM_MASK |
1531:Generated_Source\PSoC4/CyLib.c ****                                                    CY_SYS_CLK_ECO_TRIM1_GTRIM_MASK);
1532:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (fTrim << CY_SYS_CLK_ECO_TRIM1_FTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1533:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (rTrim << CY_SYS_CLK_ECO_TRIM1_RTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1534:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (gTrim << CY_SYS_CLK_ECO_TRIM1_GTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1535:Generated_Source\PSoC4/CyLib.c **** 
1536:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_TRIM1_REG = regTmp;
1537:Generated_Source\PSoC4/CyLib.c **** 
1538:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1539:Generated_Source\PSoC4/CyLib.c ****         }
1540:Generated_Source\PSoC4/CyLib.c **** 
1541:Generated_Source\PSoC4/CyLib.c **** 
1542:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1543:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkConfigureEcoDrive
1544:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1545:Generated_Source\PSoC4/CyLib.c ****         *
1546:Generated_Source\PSoC4/CyLib.c ****         * Selects trim setting values for ECO based on crystal parameters. Use care
1547:Generated_Source\PSoC4/CyLib.c ****         * when setting the driveLevel parameter because driving a crystal beyond its
1548:Generated_Source\PSoC4/CyLib.c ****         * rated limit can permanently damage the crystal.
1549:Generated_Source\PSoC4/CyLib.c ****         *
1550:Generated_Source\PSoC4/CyLib.c ****         * This API is available only for PSoC 4200L / 4100S / 4500 with ECO
1551:Generated_Source\PSoC4/CyLib.c ****         * devices only.
1552:Generated_Source\PSoC4/CyLib.c ****         *
1553:Generated_Source\PSoC4/CyLib.c ****         * \param freq Frequency of the crystal in kHz.
1554:Generated_Source\PSoC4/CyLib.c ****         * \param cLoad Crystal load capacitance in pF.
1555:Generated_Source\PSoC4/CyLib.c ****         * \param esr Equivalent series resistance of the crystal in ohm.
1556:Generated_Source\PSoC4/CyLib.c ****         *  maxAmplitude: maximum amplitude level in mV. Calculate as
1557:Generated_Source\PSoC4/CyLib.c ****         *  ((sqrt(driveLevel in uW / 2 / esr))/(3.14 * freq * cLoad)) * 10^9.
1558:Generated_Source\PSoC4/CyLib.c ****         *
1559:Generated_Source\PSoC4/CyLib.c ****         *  The Automatic Gain Control (AGC) is disabled when the specified maximum
1560:Generated_Source\PSoC4/CyLib.c ****         *  amplitude level equals or above 2. In this case the amplitude is not
1561:Generated_Source\PSoC4/CyLib.c ****         *  explicitly controlled and will grow until it saturates to the supply rail
1562:Generated_Source\PSoC4/CyLib.c ****         *  (1.8V nom). WARNING: use care when disabling AGC because driving a crystal
1563:Generated_Source\PSoC4/CyLib.c ****         *  beyond its rated limit can permanently damage the crystal.
1564:Generated_Source\PSoC4/CyLib.c ****         *
1565:Generated_Source\PSoC4/CyLib.c ****         * \return \ref CYRET_SUCCESS ECO configuration completed successfully.
1566:Generated_Source\PSoC4/CyLib.c ****         * \return \ref CYRET_BAD_PARAM One or more invalid parameters.
1567:Generated_Source\PSoC4/CyLib.c ****         *
1568:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1569:Generated_Source\PSoC4/CyLib.c ****         cystatus CySysClkConfigureEcoDrive(uint32 freq, uint32 cLoad, uint32 esr, uint32 maxAmplitu
1570:Generated_Source\PSoC4/CyLib.c ****         {
1571:Generated_Source\PSoC4/CyLib.c ****             cystatus returnStatus = CYRET_SUCCESS;
1572:Generated_Source\PSoC4/CyLib.c **** 
1573:Generated_Source\PSoC4/CyLib.c ****             uint32 wDTrim;
1574:Generated_Source\PSoC4/CyLib.c ****             uint32 aTrim;
1575:Generated_Source\PSoC4/CyLib.c ****             uint32 fTrim;
1576:Generated_Source\PSoC4/CyLib.c ****             uint32 rTrim;
1577:Generated_Source\PSoC4/CyLib.c ****             uint32 gTrim;
1578:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 43


1579:Generated_Source\PSoC4/CyLib.c ****             uint32 gmMin;
1580:Generated_Source\PSoC4/CyLib.c **** 
1581:Generated_Source\PSoC4/CyLib.c **** 
1582:Generated_Source\PSoC4/CyLib.c ****             if ((maxAmplitude < CY_SYS_CLK_ECO_MAX_AMPL_MIN_mV) ||
1583:Generated_Source\PSoC4/CyLib.c ****                 (freq < CY_SYS_CLK_ECO_FREQ_KHZ_MIN) || (freq > CY_SYS_CLK_ECO_FREQ_KHZ_MAX))
1584:Generated_Source\PSoC4/CyLib.c ****             {
1585:Generated_Source\PSoC4/CyLib.c ****                 returnStatus = CYRET_BAD_PARAM;
1586:Generated_Source\PSoC4/CyLib.c ****             }
1587:Generated_Source\PSoC4/CyLib.c ****             else
1588:Generated_Source\PSoC4/CyLib.c ****             {
1589:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate amplitude trim */
1590:Generated_Source\PSoC4/CyLib.c ****                 aTrim = (maxAmplitude < CY_SYS_CLK_ECO_TRIM_BOUNDARY) ? ((maxAmplitude/100u) - 4u) 
1591:Generated_Source\PSoC4/CyLib.c **** 
1592:Generated_Source\PSoC4/CyLib.c ****                 if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM0)
1593:Generated_Source\PSoC4/CyLib.c ****                 {
1594:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM0;
1595:Generated_Source\PSoC4/CyLib.c ****                 }
1596:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM1)
1597:Generated_Source\PSoC4/CyLib.c ****                 {
1598:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM1;
1599:Generated_Source\PSoC4/CyLib.c ****                 }
1600:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM2)
1601:Generated_Source\PSoC4/CyLib.c ****                 {
1602:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM2;
1603:Generated_Source\PSoC4/CyLib.c ****                 }
1604:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM3)
1605:Generated_Source\PSoC4/CyLib.c ****                 {
1606:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM3;
1607:Generated_Source\PSoC4/CyLib.c ****                 }
1608:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM4)
1609:Generated_Source\PSoC4/CyLib.c ****                 {
1610:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM4;
1611:Generated_Source\PSoC4/CyLib.c ****                 }
1612:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM5)
1613:Generated_Source\PSoC4/CyLib.c ****                 {
1614:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM5;
1615:Generated_Source\PSoC4/CyLib.c ****                 }
1616:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM6)
1617:Generated_Source\PSoC4/CyLib.c ****                 {
1618:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM6;
1619:Generated_Source\PSoC4/CyLib.c ****                 }
1620:Generated_Source\PSoC4/CyLib.c ****                 else
1621:Generated_Source\PSoC4/CyLib.c ****                 {
1622:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM7;
1623:Generated_Source\PSoC4/CyLib.c ****                 }
1624:Generated_Source\PSoC4/CyLib.c **** 
1625:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate Watchdog trim. */
1626:Generated_Source\PSoC4/CyLib.c ****                 wDTrim = (maxAmplitude < CY_SYS_CLK_ECO_TRIM_BOUNDARY) ? ((maxAmplitude/200u) - 2u)
1627:Generated_Source\PSoC4/CyLib.c **** 
1628:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate amplifier gain trim. */
1629:Generated_Source\PSoC4/CyLib.c ****                 gmMin = (uint32) (((((CY_SYS_CLK_ECO_GMMIN_COEFFICIENT * freq * cLoad) / 1000) * ((
1630:Generated_Source\PSoC4/CyLib.c ****                 if (gmMin > 3u)
1631:Generated_Source\PSoC4/CyLib.c ****                 {
1632:Generated_Source\PSoC4/CyLib.c ****                     returnStatus = CYRET_BAD_PARAM;
1633:Generated_Source\PSoC4/CyLib.c ****                     gTrim = 0u;
1634:Generated_Source\PSoC4/CyLib.c ****                 }
1635:Generated_Source\PSoC4/CyLib.c ****                 else if (gmMin > 1u)
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 44


1636:Generated_Source\PSoC4/CyLib.c ****                 {
1637:Generated_Source\PSoC4/CyLib.c ****                     gTrim = gmMin;
1638:Generated_Source\PSoC4/CyLib.c ****                 }
1639:Generated_Source\PSoC4/CyLib.c ****                 else
1640:Generated_Source\PSoC4/CyLib.c ****                 {
1641:Generated_Source\PSoC4/CyLib.c ****                     gTrim = (gmMin == 1u) ? 0u : 1u;
1642:Generated_Source\PSoC4/CyLib.c ****                 }
1643:Generated_Source\PSoC4/CyLib.c **** 
1644:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate feedback resistor trim */
1645:Generated_Source\PSoC4/CyLib.c ****                 if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM0)
1646:Generated_Source\PSoC4/CyLib.c ****                 {
1647:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM0;
1648:Generated_Source\PSoC4/CyLib.c ****                 }
1649:Generated_Source\PSoC4/CyLib.c ****                 else if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM1)
1650:Generated_Source\PSoC4/CyLib.c ****                 {
1651:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM1;
1652:Generated_Source\PSoC4/CyLib.c ****                 }
1653:Generated_Source\PSoC4/CyLib.c ****                 else if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM2)
1654:Generated_Source\PSoC4/CyLib.c ****                 {
1655:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM2;
1656:Generated_Source\PSoC4/CyLib.c ****                 }
1657:Generated_Source\PSoC4/CyLib.c ****                 else
1658:Generated_Source\PSoC4/CyLib.c ****                 {
1659:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM3;
1660:Generated_Source\PSoC4/CyLib.c ****                 }
1661:Generated_Source\PSoC4/CyLib.c **** 
1662:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate filter frequency trim */
1663:Generated_Source\PSoC4/CyLib.c ****                 fTrim = rTrim;
1664:Generated_Source\PSoC4/CyLib.c **** 
1665:Generated_Source\PSoC4/CyLib.c ****                 CySysClkConfigureEcoTrim(wDTrim, aTrim, fTrim, rTrim, gTrim);
1666:Generated_Source\PSoC4/CyLib.c **** 
1667:Generated_Source\PSoC4/CyLib.c ****                 /* Automatic Gain Control (AGC) enable */
1668:Generated_Source\PSoC4/CyLib.c ****                 if (maxAmplitude < 2u)
1669:Generated_Source\PSoC4/CyLib.c ****                 {
1670:Generated_Source\PSoC4/CyLib.c ****                     /* The oscillation amplitude is controlled to the level selected by amplitude t
1671:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_AGC_EN;
1672:Generated_Source\PSoC4/CyLib.c ****                 }
1673:Generated_Source\PSoC4/CyLib.c ****                 else
1674:Generated_Source\PSoC4/CyLib.c ****                 {
1675:Generated_Source\PSoC4/CyLib.c ****                     /* The amplitude is not explicitly controlled and will grow until it saturates 
1676:Generated_Source\PSoC4/CyLib.c ****                     * supply rail (1.8V nom).
1677:Generated_Source\PSoC4/CyLib.c ****                     */
1678:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_ECO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_ECO_CONFIG_AGC_EN;
1679:Generated_Source\PSoC4/CyLib.c ****                 }
1680:Generated_Source\PSoC4/CyLib.c ****             }
1681:Generated_Source\PSoC4/CyLib.c **** 
1682:Generated_Source\PSoC4/CyLib.c ****             return (returnStatus);
1683:Generated_Source\PSoC4/CyLib.c ****         }
1684:Generated_Source\PSoC4/CyLib.c **** 
1685:Generated_Source\PSoC4/CyLib.c ****     #endif /* CY_IP_ECO_BLESS */
1686:Generated_Source\PSoC4/CyLib.c **** 
1687:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_ECO) */
1688:Generated_Source\PSoC4/CyLib.c **** 
1689:Generated_Source\PSoC4/CyLib.c **** 
1690:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_PLL)
1691:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1692:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllStart
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 45


1693:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1694:Generated_Source\PSoC4/CyLib.c ****     *
1695:Generated_Source\PSoC4/CyLib.c ****     * Enables the PLL. Optionally waits for it to become stable. Waits at least
1696:Generated_Source\PSoC4/CyLib.c ****     * 250 us or until it is detected that the PLL is stable.
1697:Generated_Source\PSoC4/CyLib.c ****     *
1698:Generated_Source\PSoC4/CyLib.c ****     * Clears the unlock occurred status bit by calling CySysClkPllGetUnlockStatus(),
1699:Generated_Source\PSoC4/CyLib.c ****     * once the PLL is locked if the wait parameter is 1).
1700:Generated_Source\PSoC4/CyLib.c ****     *
1701:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L / 4100S / 4500 with PLL devices.
1702:Generated_Source\PSoC4/CyLib.c ****     *
1703:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1704:Generated_Source\PSoC4/CyLib.c ****     * 0   PLL#0
1705:Generated_Source\PSoC4/CyLib.c ****     * 1   PLL#1 (available only for PSoC 4200L)
1706:Generated_Source\PSoC4/CyLib.c ****     *
1707:Generated_Source\PSoC4/CyLib.c ****     * \param wait:
1708:Generated_Source\PSoC4/CyLib.c ****     * 0 - Return immediately after configuration.
1709:Generated_Source\PSoC4/CyLib.c ****     * 1 - Wait for PLL lock or timeout. This API shall use the CyDelayUs() to
1710:Generated_Source\PSoC4/CyLib.c ****     * implement the timeout feature.
1711:Generated_Source\PSoC4/CyLib.c ****     *
1712:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS Completed successfully.
1713:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_TIMEOUT The timeout occurred without detecting a stable clock.
1714:Generated_Source\PSoC4/CyLib.c ****     * If the input source of the clock is jittery, then the lock indication may
1715:Generated_Source\PSoC4/CyLib.c ****     * not occur. However, after the timeout has expired, the generated PLL clock can
1716:Generated_Source\PSoC4/CyLib.c ****     * still be used.
1717:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM - Either the PLL or wait parameter is invalid.
1718:Generated_Source\PSoC4/CyLib.c ****     *
1719:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1720:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllStart(uint32 pll, uint32 wait)
1721:Generated_Source\PSoC4/CyLib.c ****     {
1722:Generated_Source\PSoC4/CyLib.c ****         uint32 counts = CY_SYS_CLK_PLL_MAX_STARTUP_US;
1723:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1724:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_SUCCESS;
1725:Generated_Source\PSoC4/CyLib.c **** 
1726:Generated_Source\PSoC4/CyLib.c ****         if((pll < CY_IP_PLL_NR) && (wait <= 1u))
1727:Generated_Source\PSoC4/CyLib.c ****         {
1728:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1729:Generated_Source\PSoC4/CyLib.c **** 
1730:Generated_Source\PSoC4/CyLib.c ****             /* Isolate PLL outputs */
1731:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config &= (uint32) ~CY_SYS_CLK_PLL_CONFIG_ISOLATE;
1732:Generated_Source\PSoC4/CyLib.c **** 
1733:Generated_Source\PSoC4/CyLib.c ****             /* Enable PLL */
1734:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config |= CY_SYS_CLK_PLL_CONFIG_ENABLE;
1735:Generated_Source\PSoC4/CyLib.c **** 
1736:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1737:Generated_Source\PSoC4/CyLib.c **** 
1738:Generated_Source\PSoC4/CyLib.c ****             /* De-isolate >= CY_SYS_CLK_PLL_MIN_STARTUP_US after PLL enabled */
1739:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_PLL_MIN_STARTUP_US);
1740:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1741:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config |= CY_SYS_CLK_PLL_CONFIG_ISOLATE;
1742:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1743:Generated_Source\PSoC4/CyLib.c **** 
1744:Generated_Source\PSoC4/CyLib.c ****             if(wait != 0u)
1745:Generated_Source\PSoC4/CyLib.c ****             {
1746:Generated_Source\PSoC4/CyLib.c ****                 returnStatus = CYRET_TIMEOUT;
1747:Generated_Source\PSoC4/CyLib.c **** 
1748:Generated_Source\PSoC4/CyLib.c ****                 while(0u != counts)
1749:Generated_Source\PSoC4/CyLib.c ****                 {
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 46


1750:Generated_Source\PSoC4/CyLib.c **** 
1751:Generated_Source\PSoC4/CyLib.c ****                     if(0u != CySysClkPllGetLockStatus(pll))
1752:Generated_Source\PSoC4/CyLib.c ****                     {
1753:Generated_Source\PSoC4/CyLib.c ****                         returnStatus = CYRET_SUCCESS;
1754:Generated_Source\PSoC4/CyLib.c ****                         (void) CySysClkPllGetUnlockStatus(pll);
1755:Generated_Source\PSoC4/CyLib.c ****                         break;
1756:Generated_Source\PSoC4/CyLib.c ****                     }
1757:Generated_Source\PSoC4/CyLib.c **** 
1758:Generated_Source\PSoC4/CyLib.c ****                     CyDelayUs(1u);
1759:Generated_Source\PSoC4/CyLib.c ****                     counts--;
1760:Generated_Source\PSoC4/CyLib.c ****                 }
1761:Generated_Source\PSoC4/CyLib.c ****             }
1762:Generated_Source\PSoC4/CyLib.c ****         }
1763:Generated_Source\PSoC4/CyLib.c ****         else
1764:Generated_Source\PSoC4/CyLib.c ****         {
1765:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_BAD_PARAM;
1766:Generated_Source\PSoC4/CyLib.c ****         }
1767:Generated_Source\PSoC4/CyLib.c **** 
1768:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1769:Generated_Source\PSoC4/CyLib.c ****     }
1770:Generated_Source\PSoC4/CyLib.c **** 
1771:Generated_Source\PSoC4/CyLib.c **** 
1772:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1773:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetLockStatus
1774:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1775:Generated_Source\PSoC4/CyLib.c ****     *
1776:Generated_Source\PSoC4/CyLib.c ****     * Returns non-zero if the output of the specified PLL output is locked.
1777:Generated_Source\PSoC4/CyLib.c ****     *
1778:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L / 4100S / 4500 with PLL devices.
1779:Generated_Source\PSoC4/CyLib.c ****     *
1780:Generated_Source\PSoC4/CyLib.c ****     * PLL:
1781:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1782:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1 (available only for PSoC 4200L)
1783:Generated_Source\PSoC4/CyLib.c ****     *
1784:Generated_Source\PSoC4/CyLib.c ****     * \return A non-zero value when the specified PLL is locked.
1785:Generated_Source\PSoC4/CyLib.c ****     *
1786:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1787:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkPllGetLockStatus(uint32 pll)
1788:Generated_Source\PSoC4/CyLib.c ****     {
1789:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1790:Generated_Source\PSoC4/CyLib.c ****         uint32 returnStatus;
1791:Generated_Source\PSoC4/CyLib.c **** 
1792:Generated_Source\PSoC4/CyLib.c ****         CYASSERT(pll < CY_IP_PLL_NR);
1793:Generated_Source\PSoC4/CyLib.c **** 
1794:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1795:Generated_Source\PSoC4/CyLib.c **** 
1796:Generated_Source\PSoC4/CyLib.c ****         /* PLL is locked if reported so for two consecutive read. */
1797:Generated_Source\PSoC4/CyLib.c ****         returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].status & CY_SYS_CLK_PLL_STATUS_LOCKED;
1798:Generated_Source\PSoC4/CyLib.c ****         if(0u != returnStatus)
1799:Generated_Source\PSoC4/CyLib.c ****         {
1800:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].status & CY_SYS_CLK_PLL_STATUS_LOCKED;
1801:Generated_Source\PSoC4/CyLib.c ****         }
1802:Generated_Source\PSoC4/CyLib.c **** 
1803:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1804:Generated_Source\PSoC4/CyLib.c **** 
1805:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1806:Generated_Source\PSoC4/CyLib.c ****     }
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 47


1807:Generated_Source\PSoC4/CyLib.c **** 
1808:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1809:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllStop
1810:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1811:Generated_Source\PSoC4/CyLib.c ****     *
1812:Generated_Source\PSoC4/CyLib.c ****     * Disables the PLL.
1813:Generated_Source\PSoC4/CyLib.c ****     *
1814:Generated_Source\PSoC4/CyLib.c ****     * Ensures that either PLL is not the source of HFCLK before it is disabled,
1815:Generated_Source\PSoC4/CyLib.c ****     * otherwise, the CPU will halt.
1816:Generated_Source\PSoC4/CyLib.c ****     *
1817:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L / 4100S / 4500 with PLL devices.
1818:Generated_Source\PSoC4/CyLib.c ****     *
1819:Generated_Source\PSoC4/CyLib.c ****     * PLL:
1820:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1821:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1 (available only for PSoC 4200L)
1822:Generated_Source\PSoC4/CyLib.c ****     *
1823:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1824:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllStop(uint32 pll)
1825:Generated_Source\PSoC4/CyLib.c ****     {
1826:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1827:Generated_Source\PSoC4/CyLib.c **** 
1828:Generated_Source\PSoC4/CyLib.c ****         if (pll < CY_IP_PLL_NR)
1829:Generated_Source\PSoC4/CyLib.c ****         {
1830:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1831:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config &= (uint32) ~(CY_SYS_CLK_PLL_CONFIG_ISOLATE | CY_SY
1832:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1833:Generated_Source\PSoC4/CyLib.c ****         }
1834:Generated_Source\PSoC4/CyLib.c ****     }
1835:Generated_Source\PSoC4/CyLib.c **** 
1836:Generated_Source\PSoC4/CyLib.c **** 
1837:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1838:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetPQ
1839:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1840:Generated_Source\PSoC4/CyLib.c ****     *
1841:Generated_Source\PSoC4/CyLib.c ****     * Sets feedback (P) and reference the (Q) divider value. This API also sets the
1842:Generated_Source\PSoC4/CyLib.c ****     * programmable charge pump current value. Note that the PLL has to be disabled
1843:Generated_Source\PSoC4/CyLib.c ****     * before calling this API. If this function is called while any PLL is sourcing,
1844:Generated_Source\PSoC4/CyLib.c ****     * the SYSCLK will return an error.
1845:Generated_Source\PSoC4/CyLib.c ****     *
1846:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function. The
1847:Generated_Source\PSoC4/CyLib.c ****     * PLL output will glitch during this function call.
1848:Generated_Source\PSoC4/CyLib.c ****     *
1849:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L / 4100S / 4500 with PLL devices.
1850:Generated_Source\PSoC4/CyLib.c ****     *
1851:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1852:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1853:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1 (available only for PSoC 4200L)
1854:Generated_Source\PSoC4/CyLib.c ****     *
1855:Generated_Source\PSoC4/CyLib.c ****     * \param feedback The P divider. Range 4 - 259. Control bits for the feedback
1856:Generated_Source\PSoC4/CyLib.c ****     * divider.
1857:Generated_Source\PSoC4/CyLib.c ****     *
1858:Generated_Source\PSoC4/CyLib.c ****     * \param reference The Q divider. Range 1 - 64. Divide by the reference.
1859:Generated_Source\PSoC4/CyLib.c ****     *
1860:Generated_Source\PSoC4/CyLib.c ****     * \param current Charge the pump current in uA. The 2 uA for output frequencies
1861:Generated_Source\PSoC4/CyLib.c ****     * of 67 MHz or less, and 3 uA for higher output frequencies. The default
1862:Generated_Source\PSoC4/CyLib.c ****     * value is 2 uA.
1863:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 48


1864:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS Completed successfully.
1865:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM The parameters are out of range or the specified PLL
1866:Generated_Source\PSoC4/CyLib.c ****     * sources the system clock.
1867:Generated_Source\PSoC4/CyLib.c ****     *
1868:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1869:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetPQ(uint32 pll, uint32 feedback, uint32 reference, uint32 current)
1870:Generated_Source\PSoC4/CyLib.c ****     {
1871:Generated_Source\PSoC4/CyLib.c ****         uint32   regTmp;
1872:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
1873:Generated_Source\PSoC4/CyLib.c ****         uint8    interruptState;
1874:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
1875:Generated_Source\PSoC4/CyLib.c **** 
1876:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1877:Generated_Source\PSoC4/CyLib.c **** 
1878:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
1879:Generated_Source\PSoC4/CyLib.c **** 
1880:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) &&
1881:Generated_Source\PSoC4/CyLib.c ****             (feedback  >= CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_MIN)  && (feedback  <= CY_SYS_CLK_PLL_
1882:Generated_Source\PSoC4/CyLib.c ****             (reference >= CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_MIN) && (reference <= CY_SYS_CLK_PLL_
1883:Generated_Source\PSoC4/CyLib.c ****             (current   >= CY_SYS_CLK_PLL_CONFIG_ICP_SEL_MIN )      && (current   <= CY_SYS_CLK_PLL_
1884:Generated_Source\PSoC4/CyLib.c ****             (CYRET_SUCCESS == tmp))
1885:Generated_Source\PSoC4/CyLib.c ****         {
1886:Generated_Source\PSoC4/CyLib.c ****             /* Set new feedback, reference and current values */
1887:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~(CY_SYS_CLK_PLL_CONFIG_FEEDBA
1888:Generated_Source\PSoC4/CyLib.c ****                                                                        CY_SYS_CLK_PLL_CONFIG_REFERE
1889:Generated_Source\PSoC4/CyLib.c ****                                                                        CY_SYS_CLK_PLL_CONFIG_ICP_SE
1890:Generated_Source\PSoC4/CyLib.c **** 
1891:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((feedback << CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_SHIFT) & CY_SYS_CLK_PLL_CONF
1892:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (((reference - 1u) << CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_SHIFT) & CY_SYS_CLK
1893:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((current << CY_SYS_CLK_PLL_CONFIG_ICP_SEL_SHIFT) & CY_SYS_CLK_PLL_CONFIG_ICP
1894:Generated_Source\PSoC4/CyLib.c **** 
1895:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = regTmp;
1896:Generated_Source\PSoC4/CyLib.c **** 
1897:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_SUCCESS;
1898:Generated_Source\PSoC4/CyLib.c ****         }
1899:Generated_Source\PSoC4/CyLib.c **** 
1900:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1901:Generated_Source\PSoC4/CyLib.c **** 
1902:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1903:Generated_Source\PSoC4/CyLib.c ****     }
1904:Generated_Source\PSoC4/CyLib.c **** 
1905:Generated_Source\PSoC4/CyLib.c **** 
1906:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1907:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetBypassMode
1908:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1909:Generated_Source\PSoC4/CyLib.c ****     *
1910:Generated_Source\PSoC4/CyLib.c ****     * Sets the bypass mode for the specified PLL.
1911:Generated_Source\PSoC4/CyLib.c ****     *
1912:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function.
1913:Generated_Source\PSoC4/CyLib.c ****     * The PLL output will glitch during this function call.
1914:Generated_Source\PSoC4/CyLib.c ****     *
1915:Generated_Source\PSoC4/CyLib.c ****     * When the PLL's reference input is higher than HFCLK frequency the device may
1916:Generated_Source\PSoC4/CyLib.c ****     * lock due to incorrect flash wait cycle configuration and bypass switches from
1917:Generated_Source\PSoC4/CyLib.c ****     * PLL output to the reference input. See description of
1918:Generated_Source\PSoC4/CyLib.c ****     * CySysFlashSetWaitCycles() for more information.
1919:Generated_Source\PSoC4/CyLib.c ****     *
1920:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L / 4100S / 4500 swith PLL devices.
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 49


1921:Generated_Source\PSoC4/CyLib.c ****     *
1922:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1923:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1924:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1 (available only for PSoC 4200L)
1925:Generated_Source\PSoC4/CyLib.c ****     *
1926:Generated_Source\PSoC4/CyLib.c ****     * \param bypass: The bypass mode.
1927:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_AUTO - Automatic usage of the lock indicator. When unlocked,
1928:Generated_Source\PSoC4/CyLib.c ****     * automatically selects PLL the reference input (bypass mode). When locked,
1929:Generated_Source\PSoC4/CyLib.c ****     * automatically selects the PLL output.
1930:Generated_Source\PSoC4/CyLib.c ****     *
1931:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_PLL_REF - Selects the PLL reference input (bypass mode).
1932:Generated_Source\PSoC4/CyLib.c ****     * Ignores the lock indicator.
1933:Generated_Source\PSoC4/CyLib.c ****     *
1934:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_PLL_OUT - Selects the PLL output.  Ignores the lock indicator.
1935:Generated_Source\PSoC4/CyLib.c ****     *
1936:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1937:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllSetBypassMode(uint32 pll, uint32 bypass)
1938:Generated_Source\PSoC4/CyLib.c ****     {
1939:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
1940:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1941:Generated_Source\PSoC4/CyLib.c **** 
1942:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1943:Generated_Source\PSoC4/CyLib.c **** 
1944:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) && (bypass <= CY_SYS_PLL_BYPASS_PLL_OUT))
1945:Generated_Source\PSoC4/CyLib.c ****         {
1946:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~CY_SYS_CLK_PLL_CONFIG_BYPASS_
1947:Generated_Source\PSoC4/CyLib.c ****             regTmp |=  (uint32)(bypass << CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_SHIFT);
1948:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = regTmp;
1949:Generated_Source\PSoC4/CyLib.c ****         }
1950:Generated_Source\PSoC4/CyLib.c **** 
1951:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1952:Generated_Source\PSoC4/CyLib.c ****     }
1953:Generated_Source\PSoC4/CyLib.c **** 
1954:Generated_Source\PSoC4/CyLib.c **** 
1955:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1956:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetBypassMode
1957:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1958:Generated_Source\PSoC4/CyLib.c ****     *
1959:Generated_Source\PSoC4/CyLib.c ****     *  Gets the bypass mode for the specified PLL.
1960:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L / 4100S / 4500 with PLL devices.
1961:Generated_Source\PSoC4/CyLib.c ****     *
1962:Generated_Source\PSoC4/CyLib.c ****     *  \return bypass: Bypass mode.
1963:Generated_Source\PSoC4/CyLib.c ****     *   The same as the parameter of the CySysClkPllSetBypassMode().
1964:Generated_Source\PSoC4/CyLib.c ****     *
1965:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1966:Generated_Source\PSoC4/CyLib.c ****     static uint32 CySysClkPllGetBypassMode(uint32 pll)
1967:Generated_Source\PSoC4/CyLib.c ****     {
1968:Generated_Source\PSoC4/CyLib.c ****         uint32 returnValue;
1969:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1970:Generated_Source\PSoC4/CyLib.c **** 
1971:Generated_Source\PSoC4/CyLib.c ****         CYASSERT(pll < CY_IP_PLL_NR);
1972:Generated_Source\PSoC4/CyLib.c **** 
1973:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1974:Generated_Source\PSoC4/CyLib.c **** 
1975:Generated_Source\PSoC4/CyLib.c ****         returnValue = CY_SYS_CLK_PLL_BASE.pll[pll].config & CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_MASK;
1976:Generated_Source\PSoC4/CyLib.c ****         returnValue =  returnValue >> CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_SHIFT;
1977:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 50


1978:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1979:Generated_Source\PSoC4/CyLib.c **** 
1980:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1981:Generated_Source\PSoC4/CyLib.c ****     }
1982:Generated_Source\PSoC4/CyLib.c **** 
1983:Generated_Source\PSoC4/CyLib.c **** 
1984:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1985:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllConfigChangeAllowed
1986:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1987:Generated_Source\PSoC4/CyLib.c ****     *
1988:Generated_Source\PSoC4/CyLib.c ****     *  The function returns non-zero value if the specified PLL sources the System
1989:Generated_Source\PSoC4/CyLib.c ****     *  clock and the PLL is not in the bypass mode.
1990:Generated_Source\PSoC4/CyLib.c ****     *
1991:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L / 4100S / 4500 with PLL devices.
1992:Generated_Source\PSoC4/CyLib.c ****     *
1993:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1994:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1995:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1 (available only for PSoC 4200L)
1996:Generated_Source\PSoC4/CyLib.c ****     *
1997:Generated_Source\PSoC4/CyLib.c ****     * \return Non-zero value when the specified PLL sources the System clock and
1998:Generated_Source\PSoC4/CyLib.c ****     * the PLL is not in the bypass mode.
1999:Generated_Source\PSoC4/CyLib.c ****     *
2000:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2001:Generated_Source\PSoC4/CyLib.c ****     static cystatus CySysClkPllConfigChangeAllowed(uint32 pll)
2002:Generated_Source\PSoC4/CyLib.c ****     {
2003:Generated_Source\PSoC4/CyLib.c ****         uint32   pllBypassMode;
2004:Generated_Source\PSoC4/CyLib.c ****         uint32   sysclkSource;
2005:Generated_Source\PSoC4/CyLib.c ****         cystatus returnValue = CYRET_INVALID_STATE;
2006:Generated_Source\PSoC4/CyLib.c **** 
2007:Generated_Source\PSoC4/CyLib.c ****         sysclkSource  = CySysClkGetSysclkSource();
2008:Generated_Source\PSoC4/CyLib.c ****         pllBypassMode = CySysClkPllGetBypassMode(pll);
2009:Generated_Source\PSoC4/CyLib.c **** 
2010:Generated_Source\PSoC4/CyLib.c ****         if ((CY_SYS_PLL_BYPASS_PLL_REF == pllBypassMode)             ||
2011:Generated_Source\PSoC4/CyLib.c ****             ((CY_SYS_CLK_HFCLK_PLL0 != sysclkSource) && (0u == pll))
2012:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_SRSSV2)
2013:Generated_Source\PSoC4/CyLib.c ****             || ((CY_SYS_CLK_HFCLK_PLL1 != sysclkSource) && (1u == pll))
2014:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_SRSSV2) */
2015:Generated_Source\PSoC4/CyLib.c ****             )
2016:Generated_Source\PSoC4/CyLib.c ****         {
2017:Generated_Source\PSoC4/CyLib.c ****             returnValue = CYRET_SUCCESS;
2018:Generated_Source\PSoC4/CyLib.c ****         }
2019:Generated_Source\PSoC4/CyLib.c **** 
2020:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
2021:Generated_Source\PSoC4/CyLib.c ****     }
2022:Generated_Source\PSoC4/CyLib.c **** 
2023:Generated_Source\PSoC4/CyLib.c **** 
2024:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2025:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetUnlockStatus
2026:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2027:Generated_Source\PSoC4/CyLib.c ****     *
2028:Generated_Source\PSoC4/CyLib.c ****     *  Returns a non-zero value if the specified PLL output was unlocked.
2029:Generated_Source\PSoC4/CyLib.c ****     *  The unlock status is an indicator that the PLL has lost a lock at least once
2030:Generated_Source\PSoC4/CyLib.c ****     *  during its operation. The unlock status is cleared once it is read using
2031:Generated_Source\PSoC4/CyLib.c ****     *  this API.
2032:Generated_Source\PSoC4/CyLib.c ****     *
2033:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L / 4100S / 4500 with PLL devices.
2034:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 51


2035:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
2036:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
2037:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1 (available only for PSoC 4200L)
2038:Generated_Source\PSoC4/CyLib.c ****     *
2039:Generated_Source\PSoC4/CyLib.c ****     * \return Non-zero value when the specified PLL was unlocked.
2040:Generated_Source\PSoC4/CyLib.c ****     *
2041:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2042:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkPllGetUnlockStatus(uint32 pll)
2043:Generated_Source\PSoC4/CyLib.c ****     {
2044:Generated_Source\PSoC4/CyLib.c ****         uint32 returnStatus = 0u;
2045:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
2046:Generated_Source\PSoC4/CyLib.c **** 
2047:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
2048:Generated_Source\PSoC4/CyLib.c **** 
2049:Generated_Source\PSoC4/CyLib.c ****         returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].test & CY_SYS_CLK_PLL_TEST_UNLOCK_OCCURRED_MASK
2050:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_PLL_BASE.pll[pll].test |= CY_SYS_CLK_PLL_TEST_UNLOCK_OCCURRED_MASK;
2051:Generated_Source\PSoC4/CyLib.c **** 
2052:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
2053:Generated_Source\PSoC4/CyLib.c **** 
2054:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
2055:Generated_Source\PSoC4/CyLib.c ****     }
2056:Generated_Source\PSoC4/CyLib.c **** 
2057:Generated_Source\PSoC4/CyLib.c **** 
2058:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2059:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetFrequency
2060:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2061:Generated_Source\PSoC4/CyLib.c ****     *
2062:Generated_Source\PSoC4/CyLib.c ****     * Configures either PLL#0 or PLL#1 for the requested input/output frequencies.
2063:Generated_Source\PSoC4/CyLib.c ****     * The input frequency is the frequency of the source to the PLL. The source is
2064:Generated_Source\PSoC4/CyLib.c ****     * set using the CySysClkPllSetSource() function.
2065:Generated_Source\PSoC4/CyLib.c ****     *
2066:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function. The
2067:Generated_Source\PSoC4/CyLib.c ****     * PLL output will glitch during this function call.
2068:Generated_Source\PSoC4/CyLib.c ****     *
2069:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L / 4100S / 4500 with PLL devices.
2070:Generated_Source\PSoC4/CyLib.c ****     *
2071:Generated_Source\PSoC4/CyLib.c ****     * \param pll:
2072:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
2073:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1 (available only for PSoC 4200L)
2074:Generated_Source\PSoC4/CyLib.c ****     *
2075:Generated_Source\PSoC4/CyLib.c ****     * \param inputFreq The reference frequency in KHz. The valid range is from 1000 to 49152 KHz.
2076:Generated_Source\PSoC4/CyLib.c ****     *
2077:Generated_Source\PSoC4/CyLib.c ****     * \param pllFreq The target frequency in KHz. The valid range is from 22500 to 49152 KHz.
2078:Generated_Source\PSoC4/CyLib.c ****     *
2079:Generated_Source\PSoC4/CyLib.c ****     * \param divider The output clock divider for the PLL:
2080:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIVPASS    Pass Through
2081:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV2       Divide by 2
2082:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV4       Divide by 4
2083:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV8       Divide by 8
2084:Generated_Source\PSoC4/CyLib.c ****     *
2085:Generated_Source\PSoC4/CyLib.c ****     * \param freqTol The tolerance in ppm, 10 ppm is equal to 0.001%.
2086:Generated_Source\PSoC4/CyLib.c ****     *
2087:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS The PLL was successfully configured for the requested
2088:Generated_Source\PSoC4/CyLib.c ****     * frequency.
2089:Generated_Source\PSoC4/CyLib.c ****     *
2090:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM The PLL was not able to successfully configure for the
2091:Generated_Source\PSoC4/CyLib.c ****     * requested frequency.
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 52


2092:Generated_Source\PSoC4/CyLib.c ****     *
2093:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2094:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetFrequency(uint32 pll, uint32 inputFreq, uint32 pllFreq, uint32 divider, 
2095:Generated_Source\PSoC4/CyLib.c ****     {
2096:Generated_Source\PSoC4/CyLib.c ****         uint32 qMin;
2097:Generated_Source\PSoC4/CyLib.c ****         uint32 qMax;
2098:Generated_Source\PSoC4/CyLib.c **** 
2099:Generated_Source\PSoC4/CyLib.c ****         uint32 qVal = CY_SYS_CLK_PLL_INVALID;
2100:Generated_Source\PSoC4/CyLib.c ****         uint32 pVal = CY_SYS_CLK_PLL_INVALID;
2101:Generated_Source\PSoC4/CyLib.c **** 
2102:Generated_Source\PSoC4/CyLib.c ****         uint32 q;
2103:Generated_Source\PSoC4/CyLib.c ****         uint32 p;
2104:Generated_Source\PSoC4/CyLib.c **** 
2105:Generated_Source\PSoC4/CyLib.c ****         uint32 fvco;
2106:Generated_Source\PSoC4/CyLib.c ****         int32 ferr;
2107:Generated_Source\PSoC4/CyLib.c **** 
2108:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
2109:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
2110:Generated_Source\PSoC4/CyLib.c **** 
2111:Generated_Source\PSoC4/CyLib.c **** 
2112:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
2113:Generated_Source\PSoC4/CyLib.c **** 
2114:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) &&
2115:Generated_Source\PSoC4/CyLib.c ****             (inputFreq  >= CY_SYS_CLK_PLL_INPUT_FREQ_MIN )  && (inputFreq  <= CY_SYS_CLK_PLL_INPUT_
2116:Generated_Source\PSoC4/CyLib.c ****             (pllFreq >= CY_SYS_CLK_PLL_OUTPUT_FREQ_MIN ) && (pllFreq <= CY_SYS_CLK_PLL_OUTPUT_FREQ_
2117:Generated_Source\PSoC4/CyLib.c ****             (divider <= CY_SYS_PLL_OUTPUT_DIV8) &&
2118:Generated_Source\PSoC4/CyLib.c ****             (CYRET_SUCCESS == tmp))
2119:Generated_Source\PSoC4/CyLib.c ****         {
2120:Generated_Source\PSoC4/CyLib.c **** 
2121:Generated_Source\PSoC4/CyLib.c ****             /* Minimum feed forward loop divisor */
2122:Generated_Source\PSoC4/CyLib.c ****             qMin = (inputFreq + (CY_SYS_CLK_PLL_FPFDMAX - 1u)) / CY_SYS_CLK_PLL_FPFDMAX;
2123:Generated_Source\PSoC4/CyLib.c ****             qMin = (qMin < CY_SYS_CLK_PLL_QMINIP) ? CY_SYS_CLK_PLL_QMINIP : qMin;
2124:Generated_Source\PSoC4/CyLib.c **** 
2125:Generated_Source\PSoC4/CyLib.c ****             /* Maximum feed forward loop divisor */
2126:Generated_Source\PSoC4/CyLib.c ****             qMax = inputFreq / CY_SYS_CLK_PLL_FPFDMIN;
2127:Generated_Source\PSoC4/CyLib.c ****             qMax = (qMax > CY_SYS_CLK_PLL_QMAXIP) ? CY_SYS_CLK_PLL_QMAXIP : qMax;
2128:Generated_Source\PSoC4/CyLib.c **** 
2129:Generated_Source\PSoC4/CyLib.c ****             if (qMin <= qMax)
2130:Generated_Source\PSoC4/CyLib.c ****             {
2131:Generated_Source\PSoC4/CyLib.c ****                 for(q = qMin; q <= qMax; q++)
2132:Generated_Source\PSoC4/CyLib.c ****                 {
2133:Generated_Source\PSoC4/CyLib.c ****                     /* Solve for the feedback divisor value */
2134:Generated_Source\PSoC4/CyLib.c **** 
2135:Generated_Source\PSoC4/CyLib.c ****                     /* INT((pllFreq * q ) / inputFreq), where INT is normal rounding  */
2136:Generated_Source\PSoC4/CyLib.c ****                     p = ((pllFreq * q) + (inputFreq / 2u)) / inputFreq;
2137:Generated_Source\PSoC4/CyLib.c **** 
2138:Generated_Source\PSoC4/CyLib.c ****                     /* Calculate the actual VCO frequency (FVCO) */
2139:Generated_Source\PSoC4/CyLib.c ****                     fvco = ((inputFreq * p) / q);
2140:Generated_Source\PSoC4/CyLib.c **** 
2141:Generated_Source\PSoC4/CyLib.c ****                     /* Calculate the frequency error (FERR) */
2142:Generated_Source\PSoC4/CyLib.c ****                     ferr = ((1000000 * ((int32) fvco - (int32) pllFreq))/ (int32) pllFreq);
2143:Generated_Source\PSoC4/CyLib.c **** 
2144:Generated_Source\PSoC4/CyLib.c ****                     /* Bound check the frequency error and decide next action */
2145:Generated_Source\PSoC4/CyLib.c ****                     if ((( -1 * (int32) freqTol) <= ferr) && (ferr <= (int32) freqTol))
2146:Generated_Source\PSoC4/CyLib.c ****                     {
2147:Generated_Source\PSoC4/CyLib.c ****                         qVal = q;
2148:Generated_Source\PSoC4/CyLib.c ****                         pVal = p;
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 53


2149:Generated_Source\PSoC4/CyLib.c ****                         break;
2150:Generated_Source\PSoC4/CyLib.c ****                     }
2151:Generated_Source\PSoC4/CyLib.c ****                 }
2152:Generated_Source\PSoC4/CyLib.c **** 
2153:Generated_Source\PSoC4/CyLib.c **** 
2154:Generated_Source\PSoC4/CyLib.c ****                 if ((pVal != CY_SYS_CLK_PLL_INVALID) && (qVal != CY_SYS_CLK_PLL_INVALID))
2155:Generated_Source\PSoC4/CyLib.c ****                 {
2156:Generated_Source\PSoC4/CyLib.c ****                     if (CySysClkPllSetPQ(pll, pVal, qVal, CY_SYS_CLK_PLL_CURRENT_DEFAULT) == CYRET_
2157:Generated_Source\PSoC4/CyLib.c ****                     {
2158:Generated_Source\PSoC4/CyLib.c ****                         returnStatus = CySysClkPllSetOutputDivider(pll, divider);
2159:Generated_Source\PSoC4/CyLib.c ****                     }
2160:Generated_Source\PSoC4/CyLib.c ****                 }
2161:Generated_Source\PSoC4/CyLib.c ****             }
2162:Generated_Source\PSoC4/CyLib.c **** 
2163:Generated_Source\PSoC4/CyLib.c ****         }
2164:Generated_Source\PSoC4/CyLib.c **** 
2165:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
2166:Generated_Source\PSoC4/CyLib.c ****     }
2167:Generated_Source\PSoC4/CyLib.c **** 
2168:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2169:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetSource
2170:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2171:Generated_Source\PSoC4/CyLib.c ****     *
2172:Generated_Source\PSoC4/CyLib.c ****     *  Sets the input clock source to the PLL. The PLL must be disabled before
2173:Generated_Source\PSoC4/CyLib.c ****     *  calling this function.
2174:Generated_Source\PSoC4/CyLib.c ****     *
2175:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L / 4100S /4500 with PLL devices.
2176:Generated_Source\PSoC4/CyLib.c ****     *
2177:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
2178:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
2179:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1 (available only for PSoC 4200L)
2180:Generated_Source\PSoC4/CyLib.c ****     *
2181:Generated_Source\PSoC4/CyLib.c ****     * \param source:
2182:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_IMO        IMO
2183:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_EXTCLK     External Clock (available only for PSoC 4200L
2184:Generated_Source\PSoC4/CyLib.c ****     *  and PSoC 4500 with PLL devices)
2185:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_ECO        ECO
2186:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI0       DSI_OUT[0] (available only for PSoC 4200L)
2187:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI1       DSI_OUT[1] (available only for PSoC 4200L)
2188:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI2       DSI_OUT[2] (available only for PSoC 4200L)
2189:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI3       DSI_OUT[3] (available only for PSoC 4200L)
2190:Generated_Source\PSoC4/CyLib.c ****     *
2191:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2192:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllSetSource(uint32 pll, uint32 source)
2193:Generated_Source\PSoC4/CyLib.c ****     {
2194:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
2195:Generated_Source\PSoC4/CyLib.c **** 
2196:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_SRSSLT)
2197:Generated_Source\PSoC4/CyLib.c ****             uint8 i = 0u;
2198:Generated_Source\PSoC4/CyLib.c ****         #else
2199:Generated_Source\PSoC4/CyLib.c ****             uint32 regTmp;
2200:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_SRSSLT) */
2201:Generated_Source\PSoC4/CyLib.c **** 
2202:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
2203:Generated_Source\PSoC4/CyLib.c **** 
2204:Generated_Source\PSoC4/CyLib.c ****         if (pll < CY_IP_PLL_NR)
2205:Generated_Source\PSoC4/CyLib.c ****         {
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 54


2206:Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSV2)
2207:Generated_Source\PSoC4/CyLib.c ****                 regTmp = CY_SYS_CLK_SELECT_REG & (uint32) ~CY_SYS_CLK_SELECT_PLL_MASK(pll);
2208:Generated_Source\PSoC4/CyLib.c ****                 regTmp |= ((source << CY_SYS_CLK_SELECT_PLL_SHIFT(pll)) & CY_SYS_CLK_SELECT_PLL_MAS
2209:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_SELECT_REG = regTmp;
2210:Generated_Source\PSoC4/CyLib.c ****             #else
2211:Generated_Source\PSoC4/CyLib.c ****                 CY_SET_REG32_FIELD(CYREG_EXCO_CLK_SELECT, CYFLD_EXCO_REF_SEL, source);
2212:Generated_Source\PSoC4/CyLib.c **** 
2213:Generated_Source\PSoC4/CyLib.c ****                 /* Check if ECO is enabled and running */
2214:Generated_Source\PSoC4/CyLib.c ****                 if ((0UL == (CY_SYS_CLK_ECO_CONFIG_REG & CY_SYS_CLK_ECO_CONFIG_ENABLE)) ||
2215:Generated_Source\PSoC4/CyLib.c ****                     (0UL != (CY_SYS_CLK_ECO_STATUS_REG & CY_SYS_CLK_ECO_STATUS_WATCHDOG_ERROR)))
2216:Generated_Source\PSoC4/CyLib.c ****                 {
2217:Generated_Source\PSoC4/CyLib.c ****                     /* Generate clock sequence to change clock source in CY_SYS_ECO_CLK_SELECT_REG 
2218:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_EXCO_PGM_CLK_REG |= CY_SYS_EXCO_PGM_CLK_ENABLE_MASK;
2219:Generated_Source\PSoC4/CyLib.c **** 
2220:Generated_Source\PSoC4/CyLib.c ****                     for(i = 0u; i < CY_SYS_EXCO_PGM_CLK_SEQ_GENERATOR; i++)
2221:Generated_Source\PSoC4/CyLib.c ****                     {
2222:Generated_Source\PSoC4/CyLib.c ****                         CY_SYS_EXCO_PGM_CLK_REG |= CY_SYS_EXCO_PGM_CLK_CLK_ECO_MASK;
2223:Generated_Source\PSoC4/CyLib.c ****                         CY_SYS_EXCO_PGM_CLK_REG &= ~CY_SYS_EXCO_PGM_CLK_CLK_ECO_MASK;
2224:Generated_Source\PSoC4/CyLib.c ****                     }
2225:Generated_Source\PSoC4/CyLib.c **** 
2226:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_EXCO_PGM_CLK_REG &= ~CY_SYS_EXCO_PGM_CLK_ENABLE_MASK;
2227:Generated_Source\PSoC4/CyLib.c ****                 }
2228:Generated_Source\PSoC4/CyLib.c **** 
2229:Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_SRSSV2) */
2230:Generated_Source\PSoC4/CyLib.c ****         }
2231:Generated_Source\PSoC4/CyLib.c **** 
2232:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
2233:Generated_Source\PSoC4/CyLib.c ****     }
2234:Generated_Source\PSoC4/CyLib.c **** 
2235:Generated_Source\PSoC4/CyLib.c **** 
2236:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2237:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetOutputDivider
2238:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2239:Generated_Source\PSoC4/CyLib.c ****     *
2240:Generated_Source\PSoC4/CyLib.c ****     *  Sets the output clock divider for the PLL.
2241:Generated_Source\PSoC4/CyLib.c ****     *
2242:Generated_Source\PSoC4/CyLib.c ****     *  The PLL must not be the System Clock source when calling this function. The
2243:Generated_Source\PSoC4/CyLib.c ****     *  PLL output will glitch during this function call.
2244:Generated_Source\PSoC4/CyLib.c ****     *
2245:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L / 4100S / 4500 with PLL devices.
2246:Generated_Source\PSoC4/CyLib.c ****     *
2247:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
2248:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
2249:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1 (available only for PSoC 4200L)
2250:Generated_Source\PSoC4/CyLib.c ****     *
2251:Generated_Source\PSoC4/CyLib.c ****     * \param divider:
2252:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIVPASS    Pass through
2253:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV2       Divide by 2
2254:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV4       Divide by 4
2255:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV8       Divide by 8
2256:Generated_Source\PSoC4/CyLib.c ****     *
2257:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_SUCCESS    Completed successfully.
2258:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_BAD_PARAM  The parameters are out of range or the
2259:Generated_Source\PSoC4/CyLib.c ****     * specified PLL sources the System clock.
2260:Generated_Source\PSoC4/CyLib.c ****     *
2261:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2262:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetOutputDivider(uint32 pll, uint32 divider)
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 55


2263:Generated_Source\PSoC4/CyLib.c ****     {
2264:Generated_Source\PSoC4/CyLib.c ****         uint32   tmpReg;
2265:Generated_Source\PSoC4/CyLib.c ****         uint8    interruptState;
2266:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
2267:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
2268:Generated_Source\PSoC4/CyLib.c **** 
2269:Generated_Source\PSoC4/CyLib.c **** 
2270:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
2271:Generated_Source\PSoC4/CyLib.c **** 
2272:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
2273:Generated_Source\PSoC4/CyLib.c **** 
2274:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) && (CYRET_SUCCESS == tmp) && (divider <= CY_SYS_PLL_OUTPUT_DIV8))
2275:Generated_Source\PSoC4/CyLib.c ****         {
2276:Generated_Source\PSoC4/CyLib.c ****             tmpReg  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~(CY_SYS_CLK_PLL_CONFIG_OUTPUT
2277:Generated_Source\PSoC4/CyLib.c ****             tmpReg |= ((divider << CY_SYS_CLK_PLL_CONFIG_OUTPUT_DIV_SHIFT) & CY_SYS_CLK_PLL_CONFIG_
2278:Generated_Source\PSoC4/CyLib.c **** 
2279:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = tmpReg;
2280:Generated_Source\PSoC4/CyLib.c **** 
2281:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_SUCCESS;
2282:Generated_Source\PSoC4/CyLib.c ****         }
2283:Generated_Source\PSoC4/CyLib.c **** 
2284:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
2285:Generated_Source\PSoC4/CyLib.c **** 
2286:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
2287:Generated_Source\PSoC4/CyLib.c ****     }
2288:Generated_Source\PSoC4/CyLib.c **** 
2289:Generated_Source\PSoC4/CyLib.c **** 
2290:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_ECOV2_SRSSLT)
2291:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
2292:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkPllGetInterruptCauseMasked
2293:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
2294:Generated_Source\PSoC4/CyLib.c ****         *
2295:Generated_Source\PSoC4/CyLib.c ****         *  Returns a non-zero value that reflects a bit-wise AND between interrupt
2296:Generated_Source\PSoC4/CyLib.c ****         *  request and mask registers. The API allows firmware to read the status of
2297:Generated_Source\PSoC4/CyLib.c ****         *  all mask enabled interrupt causes with a single load operation.
2298:Generated_Source\PSoC4/CyLib.c ****         *
2299:Generated_Source\PSoC4/CyLib.c ****         *  This API is available only for PSoC 4500 with PLL devices.
2300:Generated_Source\PSoC4/CyLib.c ****         *
2301:Generated_Source\PSoC4/CyLib.c ****         * \return A set bit indicates the source of the interrupt:
2302:Generated_Source\PSoC4/CyLib.c ****         *  *CY_SYS_PLL_INTR_PLL_LOCK
2303:Generated_Source\PSoC4/CyLib.c ****         *  *CY_SYS_PLL_INTR_WD_ERR
2304:Generated_Source\PSoC4/CyLib.c ****         *  *CY_SYS_PLL_INTR_CSV_CLK_SW
2305:Generated_Source\PSoC4/CyLib.c ****         *
2306:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
2307:Generated_Source\PSoC4/CyLib.c ****         uint32 CySysClkPllGetInterruptCauseMasked(void)
2308:Generated_Source\PSoC4/CyLib.c ****         {
2309:Generated_Source\PSoC4/CyLib.c ****             return ((uint32)CY_GET_REG32(CYREG_EXCO_INTR_MASKED));
2310:Generated_Source\PSoC4/CyLib.c ****         }
2311:Generated_Source\PSoC4/CyLib.c **** 
2312:Generated_Source\PSoC4/CyLib.c **** 
2313:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
2314:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkPllGetInterruptCause
2315:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
2316:Generated_Source\PSoC4/CyLib.c ****         *
2317:Generated_Source\PSoC4/CyLib.c ****         *  Returns a non-zero value that reflects the interrupt request registers.
2318:Generated_Source\PSoC4/CyLib.c ****         *
2319:Generated_Source\PSoC4/CyLib.c ****         *  This API is available only for PSoC 4500 with PLL devices.
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 56


2320:Generated_Source\PSoC4/CyLib.c ****         *
2321:Generated_Source\PSoC4/CyLib.c ****         * \return A set bit indicates the source of the interrupt:
2322:Generated_Source\PSoC4/CyLib.c ****         *  *CY_SYS_PLL_INTR_PLL_LOCK
2323:Generated_Source\PSoC4/CyLib.c ****         *  *CY_SYS_PLL_INTR_WD_ERR
2324:Generated_Source\PSoC4/CyLib.c ****         *  *CY_SYS_PLL_INTR_CSV_CLK_SW
2325:Generated_Source\PSoC4/CyLib.c ****         *
2326:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
2327:Generated_Source\PSoC4/CyLib.c ****         uint32 CySysClkPllGetInterruptCause(void)
2328:Generated_Source\PSoC4/CyLib.c ****         {
2329:Generated_Source\PSoC4/CyLib.c ****             return ((uint32)CY_GET_REG32(CYREG_EXCO_INTR));
2330:Generated_Source\PSoC4/CyLib.c ****         }
2331:Generated_Source\PSoC4/CyLib.c **** 
2332:Generated_Source\PSoC4/CyLib.c **** 
2333:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
2334:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkPllClearPendingInterrupt
2335:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
2336:Generated_Source\PSoC4/CyLib.c ****         *
2337:Generated_Source\PSoC4/CyLib.c ****         *  Clears the pending interrupt.
2338:Generated_Source\PSoC4/CyLib.c ****         *
2339:Generated_Source\PSoC4/CyLib.c ****         *  This API is available only for PSoC 4500 with PLL devices.
2340:Generated_Source\PSoC4/CyLib.c ****         *
2341:Generated_Source\PSoC4/CyLib.c ****         * \param interrupt:
2342:Generated_Source\PSoC4/CyLib.c ****         *  CY_SYS_PLL_INTR_PLL_LOCK
2343:Generated_Source\PSoC4/CyLib.c ****         *  CY_SYS_PLL_INTR_WD_ERR
2344:Generated_Source\PSoC4/CyLib.c ****         *  CY_SYS_PLL_INTR_CSV_CLK_SW
2345:Generated_Source\PSoC4/CyLib.c ****         *  A logical OR of above can be used as input parameter.
2346:Generated_Source\PSoC4/CyLib.c ****         *
2347:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
2348:Generated_Source\PSoC4/CyLib.c ****         void CySysClkPllClearPendingInterrupt(uint32 interrupt)
2349:Generated_Source\PSoC4/CyLib.c ****         {
2350:Generated_Source\PSoC4/CyLib.c ****             CY_SET_REG32(CYREG_EXCO_INTR, interrupt);
2351:Generated_Source\PSoC4/CyLib.c ****         }
2352:Generated_Source\PSoC4/CyLib.c **** 
2353:Generated_Source\PSoC4/CyLib.c **** 
2354:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
2355:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkPllSetInterruptMask
2356:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
2357:Generated_Source\PSoC4/CyLib.c ****         *
2358:Generated_Source\PSoC4/CyLib.c ****         *  This API sets the interrupt mask bit for the corresponding interrupts.
2359:Generated_Source\PSoC4/CyLib.c ****         *
2360:Generated_Source\PSoC4/CyLib.c ****         *  This API is available only for PSoC 4500 with PLL devices.
2361:Generated_Source\PSoC4/CyLib.c ****         *
2362:Generated_Source\PSoC4/CyLib.c ****         * \param intrMask:
2363:Generated_Source\PSoC4/CyLib.c ****         *  CY_SYS_PLL_INTR_PLL_LOCK
2364:Generated_Source\PSoC4/CyLib.c ****         *  CY_SYS_PLL_INTR_WD_ERR
2365:Generated_Source\PSoC4/CyLib.c ****         *  CY_SYS_PLL_INTR_CSV_CLK_SW
2366:Generated_Source\PSoC4/CyLib.c ****         *  A logical OR of above can be used as input parameter.
2367:Generated_Source\PSoC4/CyLib.c ****         *
2368:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
2369:Generated_Source\PSoC4/CyLib.c ****         void CySysClkPllSetInterruptMask(uint32 intrMask)
2370:Generated_Source\PSoC4/CyLib.c ****         {
2371:Generated_Source\PSoC4/CyLib.c ****             CY_SET_REG32(CYREG_EXCO_INTR_MASK, intrMask);
2372:Generated_Source\PSoC4/CyLib.c ****         }
2373:Generated_Source\PSoC4/CyLib.c **** 
2374:Generated_Source\PSoC4/CyLib.c **** 
2375:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
2376:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkPllGetInterruptMask
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 57


2377:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
2378:Generated_Source\PSoC4/CyLib.c ****         *
2379:Generated_Source\PSoC4/CyLib.c ****         *  This API returns the current interrupt mask register value.
2380:Generated_Source\PSoC4/CyLib.c ****         *
2381:Generated_Source\PSoC4/CyLib.c ****         *  This API is available only for PSoC 4500 with PLL devices.
2382:Generated_Source\PSoC4/CyLib.c ****         *
2383:Generated_Source\PSoC4/CyLib.c ****         * \return A set bit indicates the source of the interrupt:
2384:Generated_Source\PSoC4/CyLib.c ****         *  *CY_SYS_PLL_INTR_PLL_LOCK
2385:Generated_Source\PSoC4/CyLib.c ****         *  *CY_SYS_PLL_INTR_WD_ERR
2386:Generated_Source\PSoC4/CyLib.c ****         *  *CY_SYS_PLL_INTR_CSV_CLK_SW
2387:Generated_Source\PSoC4/CyLib.c ****         *
2388:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
2389:Generated_Source\PSoC4/CyLib.c ****         uint32 CySysClkPllGetInterruptMask(void)
2390:Generated_Source\PSoC4/CyLib.c ****         {
2391:Generated_Source\PSoC4/CyLib.c ****             return ((uint32)CY_GET_REG32(CYREG_EXCO_INTR_MASK));
2392:Generated_Source\PSoC4/CyLib.c ****         }
2393:Generated_Source\PSoC4/CyLib.c **** 
2394:Generated_Source\PSoC4/CyLib.c **** 
2395:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
2396:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkPllSetInterrupt
2397:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
2398:Generated_Source\PSoC4/CyLib.c ****         *
2399:Generated_Source\PSoC4/CyLib.c ****         *  This API asserts an interrupt. This can be used for firmware debugging.
2400:Generated_Source\PSoC4/CyLib.c ****         *
2401:Generated_Source\PSoC4/CyLib.c ****         *  This API is available only for PSoC 4500 with PLL devices.
2402:Generated_Source\PSoC4/CyLib.c ****         *
2403:Generated_Source\PSoC4/CyLib.c ****         * \param interrupt:
2404:Generated_Source\PSoC4/CyLib.c ****         *  CY_SYS_PLL_INTR_PLL_LOCK
2405:Generated_Source\PSoC4/CyLib.c ****         *  CY_SYS_PLL_INTR_WD_ERR
2406:Generated_Source\PSoC4/CyLib.c ****         *  CY_SYS_PLL_INTR_CSV_CLK_SW
2407:Generated_Source\PSoC4/CyLib.c ****         *  A logical OR of above can be used as input parameter.
2408:Generated_Source\PSoC4/CyLib.c ****         *
2409:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
2410:Generated_Source\PSoC4/CyLib.c ****         void CySysClkPllSetInterrupt(uint32 interrupt)
2411:Generated_Source\PSoC4/CyLib.c ****         {
2412:Generated_Source\PSoC4/CyLib.c ****             CY_SET_REG32(CYREG_EXCO_INTR_SET, interrupt);
2413:Generated_Source\PSoC4/CyLib.c ****         }
2414:Generated_Source\PSoC4/CyLib.c **** 
2415:Generated_Source\PSoC4/CyLib.c **** 
2416:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
2417:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkPllCsvEnable
2418:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
2419:Generated_Source\PSoC4/CyLib.c ****         *
2420:Generated_Source\PSoC4/CyLib.c ****         * This API enables clock supervision on PLL frequency lock and loss.
2421:Generated_Source\PSoC4/CyLib.c ****         *
2422:Generated_Source\PSoC4/CyLib.c ****         * This API is available only for PSoC 4500 with PLL devices.
2423:Generated_Source\PSoC4/CyLib.c ****         *
2424:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
2425:Generated_Source\PSoC4/CyLib.c ****         void CySysClkPllCsvEnable(void)
2426:Generated_Source\PSoC4/CyLib.c ****         {
2427:Generated_Source\PSoC4/CyLib.c ****             CY_SET_REG32_FIELD(CYREG_EXCO_REF_CTL, CYFLD_EXCO_CSV_EN, 0x1uL);
2428:Generated_Source\PSoC4/CyLib.c ****         }
2429:Generated_Source\PSoC4/CyLib.c **** 
2430:Generated_Source\PSoC4/CyLib.c **** 
2431:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
2432:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkPllCsvDisable
2433:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 58


2434:Generated_Source\PSoC4/CyLib.c ****         *
2435:Generated_Source\PSoC4/CyLib.c ****         * This API disables clock supervision on PLL.
2436:Generated_Source\PSoC4/CyLib.c ****         *
2437:Generated_Source\PSoC4/CyLib.c ****         * This API is available only for PSoC 4500 with PLL devices.
2438:Generated_Source\PSoC4/CyLib.c ****         *
2439:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
2440:Generated_Source\PSoC4/CyLib.c ****         void CySysClkPllCsvDisable(void)
2441:Generated_Source\PSoC4/CyLib.c ****         {
2442:Generated_Source\PSoC4/CyLib.c ****             CY_CLEAR_REG32_FIELD(CYREG_EXCO_REF_CTL, CYFLD_EXCO_CSV_EN);
2443:Generated_Source\PSoC4/CyLib.c ****         }
2444:Generated_Source\PSoC4/CyLib.c **** 
2445:Generated_Source\PSoC4/CyLib.c **** 
2446:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
2447:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkPllCsvSetSpvrCtl
2448:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
2449:Generated_Source\PSoC4/CyLib.c ****         *
2450:Generated_Source\PSoC4/CyLib.c ****         *  This API enables sets the clock supervision parameters.
2451:Generated_Source\PSoC4/CyLib.c ****         *
2452:Generated_Source\PSoC4/CyLib.c ****         *  This API is available only for PSoC 4500 with PLL devices.
2453:Generated_Source\PSoC4/CyLib.c ****         *
2454:Generated_Source\PSoC4/CyLib.c ****         * \param startupDelay:
2455:Generated_Source\PSoC4/CyLib.c ****         *  startup delay time -1 in reference clock cycles after enable
2456:Generated_Source\PSoC4/CyLib.c ****         *  or deep sleep wake up from reference clock start to monitored clock start
2457:Generated_Source\PSoC4/CyLib.c ****         *
2458:Generated_Source\PSoC4/CyLib.c ****         * \param csvSwitch:
2459:Generated_Source\PSoC4/CyLib.c ****         * CY_SYS_PLL_CSV_INT_EN – Enable INTR.CSV_CLK_SW if a clock switch occurs to IMO
2460:Generated_Source\PSoC4/CyLib.c ****         * CY_SYS_PLL_CSV_TRIG_EN – Enable CSV to cause trigger if a clock switch occurs to IMO
2461:Generated_Source\PSoC4/CyLib.c ****         * CY_SYS_PLL_CSV_CLK_SW_EN – Enable CSV to cause clock switch IMO (enabled by default in 
2462:Generated_Source\PSoC4/CyLib.c ****         *
2463:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
2464:Generated_Source\PSoC4/CyLib.c ****         void CySysClkPllCsvSetSpvrCtl(uint32 startupDelay, uint32 csvSwitch)
2465:Generated_Source\PSoC4/CyLib.c ****         {
2466:Generated_Source\PSoC4/CyLib.c ****             uint32 tmpRegVal = CY_GET_REG32(CYREG_EXCO_REF_CTL);
2467:Generated_Source\PSoC4/CyLib.c **** 
2468:Generated_Source\PSoC4/CyLib.c ****             tmpRegVal &= ~(CY_SYS_PLL_STARTUP_MASK | CY_SYS_PLL_CSV_MASK);
2469:Generated_Source\PSoC4/CyLib.c ****             tmpRegVal |= (startupDelay | csvSwitch);
2470:Generated_Source\PSoC4/CyLib.c **** 
2471:Generated_Source\PSoC4/CyLib.c ****             CY_SET_REG32(CYREG_EXCO_REF_CTL, tmpRegVal);
2472:Generated_Source\PSoC4/CyLib.c ****         }
2473:Generated_Source\PSoC4/CyLib.c **** 
2474:Generated_Source\PSoC4/CyLib.c **** 
2475:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
2476:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkPllCsvSetRefLimits
2477:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
2478:Generated_Source\PSoC4/CyLib.c ****         *
2479:Generated_Source\PSoC4/CyLib.c ****         *  This API sets the cycle time lower and upper limits.
2480:Generated_Source\PSoC4/CyLib.c ****         *
2481:Generated_Source\PSoC4/CyLib.c ****         *  This API is available only for PSoC 4500 with PLL devices.
2482:Generated_Source\PSoC4/CyLib.c ****         *
2483:Generated_Source\PSoC4/CyLib.c ****         * \param lower:
2484:Generated_Source\PSoC4/CyLib.c ****         *  Sets the lower limit -1, in reference clock cycles,
2485:Generated_Source\PSoC4/CyLib.c ****         *  before the next monitored clock event is allowed to happen.  If a monitored
2486:Generated_Source\PSoC4/CyLib.c ****         *  clock event happens before this limit is reached a CSV error is detected.
2487:Generated_Source\PSoC4/CyLib.c ****         *
2488:Generated_Source\PSoC4/CyLib.c ****         * \param upper:
2489:Generated_Source\PSoC4/CyLib.c ****         *  Sets the upper limit -1, in reference clock cycles, before (or same time)
2490:Generated_Source\PSoC4/CyLib.c ****         *  the next monitored clock event must happen.  If a monitored clock event
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 59


2491:Generated_Source\PSoC4/CyLib.c ****         *  does not happen before this limit is reached, or does not happen at all
2492:Generated_Source\PSoC4/CyLib.c ****         *  (clock loss), a CSV error is detected.
2493:Generated_Source\PSoC4/CyLib.c ****         *
2494:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
2495:Generated_Source\PSoC4/CyLib.c ****         void CySysClkPllCsvSetRefLimits(uint32 lower, uint32 upper)
2496:Generated_Source\PSoC4/CyLib.c ****         {
2497:Generated_Source\PSoC4/CyLib.c ****             uint32 tmpRegVal = CY_GET_REG32(CYREG_EXCO_REF_LIMIT);
2498:Generated_Source\PSoC4/CyLib.c **** 
2499:Generated_Source\PSoC4/CyLib.c ****             tmpRegVal &= ~(CY_SYS_PLL_REF_LIMIT_LOWER_MASK | CY_SYS_PLL_REF_LIMIT_UPPER_MASK);
2500:Generated_Source\PSoC4/CyLib.c ****             tmpRegVal |= (lower | ((uint32)(upper << CY_SYS_PLL_REF_LIMIT_UPPER_OFFSET)));
2501:Generated_Source\PSoC4/CyLib.c **** 
2502:Generated_Source\PSoC4/CyLib.c ****             CY_SET_REG32(CYREG_EXCO_REF_LIMIT, tmpRegVal);
2503:Generated_Source\PSoC4/CyLib.c ****         }
2504:Generated_Source\PSoC4/CyLib.c **** 
2505:Generated_Source\PSoC4/CyLib.c **** 
2506:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
2507:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkPllCsvGetRefLimits
2508:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
2509:Generated_Source\PSoC4/CyLib.c ****         *
2510:Generated_Source\PSoC4/CyLib.c ****         *  This API gets the cycle time lower and upper limits.
2511:Generated_Source\PSoC4/CyLib.c ****         *
2512:Generated_Source\PSoC4/CyLib.c ****         *  This API is available only for PSoC 4500 with PLL devices.
2513:Generated_Source\PSoC4/CyLib.c ****         *
2514:Generated_Source\PSoC4/CyLib.c ****         * \return
2515:Generated_Source\PSoC4/CyLib.c ****         *  *Bits 31:16 – upper limit
2516:Generated_Source\PSoC4/CyLib.c ****         *  *Bits 15:0 – lower limit
2517:Generated_Source\PSoC4/CyLib.c ****         *
2518:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
2519:Generated_Source\PSoC4/CyLib.c ****         uint32 CySysClkPllCsvGetRefLimits(void)
2520:Generated_Source\PSoC4/CyLib.c ****         {
2521:Generated_Source\PSoC4/CyLib.c ****             return ((uint32)CY_GET_REG32(CYREG_EXCO_REF_LIMIT));
2522:Generated_Source\PSoC4/CyLib.c ****         }
2523:Generated_Source\PSoC4/CyLib.c **** 
2524:Generated_Source\PSoC4/CyLib.c **** 
2525:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
2526:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkPllCsvSetPeriod
2527:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
2528:Generated_Source\PSoC4/CyLib.c ****         *
2529:Generated_Source\PSoC4/CyLib.c ****         *  This API sets the csv period time.
2530:Generated_Source\PSoC4/CyLib.c ****         *
2531:Generated_Source\PSoC4/CyLib.c ****         *  This API is available only for PSoC 4500 with PLL devices.
2532:Generated_Source\PSoC4/CyLib.c ****         *
2533:Generated_Source\PSoC4/CyLib.c ****         * \param period:
2534:Generated_Source\PSoC4/CyLib.c ****         *  Set the Period -1, in monitored clock cycles, before the next monitored
2535:Generated_Source\PSoC4/CyLib.c ****         *  clock event happens.
2536:Generated_Source\PSoC4/CyLib.c ****         *  PERIOD <=  (UPPER+1) / FREQ_RATIO -1, with
2537:Generated_Source\PSoC4/CyLib.c ****         *  FREQ_RATIO = (Reference frequency / Monitored frequency).
2538:Generated_Source\PSoC4/CyLib.c ****         *  In case the clocks are asynchronous: PERIOD <=  UPPER / FREQ_RATIO -1
2539:Generated_Source\PSoC4/CyLib.c ****         *
2540:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
2541:Generated_Source\PSoC4/CyLib.c ****         void CySysClkPllCsvSetPeriod(uint32 period)
2542:Generated_Source\PSoC4/CyLib.c ****         {
2543:Generated_Source\PSoC4/CyLib.c ****             CY_SET_REG32_FIELD(CYREG_EXCO_MON_CTL, CYFLD_EXCO_PERIOD, period);
2544:Generated_Source\PSoC4/CyLib.c ****         }
2545:Generated_Source\PSoC4/CyLib.c **** 
2546:Generated_Source\PSoC4/CyLib.c **** 
2547:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 60


2548:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkPllCsvGetPeriod
2549:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
2550:Generated_Source\PSoC4/CyLib.c ****         *
2551:Generated_Source\PSoC4/CyLib.c ****         *  This API returns the CSV period time.
2552:Generated_Source\PSoC4/CyLib.c ****         *
2553:Generated_Source\PSoC4/CyLib.c ****         *  This API is available only for PSoC 4500 with PLL devices.
2554:Generated_Source\PSoC4/CyLib.c ****         *
2555:Generated_Source\PSoC4/CyLib.c ****         * \return Period time
2556:Generated_Source\PSoC4/CyLib.c ****         *
2557:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
2558:Generated_Source\PSoC4/CyLib.c ****         uint32 CySysClkPllCsvGetPeriod(void)
2559:Generated_Source\PSoC4/CyLib.c ****         {
2560:Generated_Source\PSoC4/CyLib.c ****             return ((uint32)CY_GET_REG32_FIELD(CYREG_EXCO_MON_CTL, CYFLD_EXCO_PERIOD));
2561:Generated_Source\PSoC4/CyLib.c ****         }
2562:Generated_Source\PSoC4/CyLib.c **** 
2563:Generated_Source\PSoC4/CyLib.c **** 
2564:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
2565:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkPllCsvEnableReset
2566:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
2567:Generated_Source\PSoC4/CyLib.c ****         *
2568:Generated_Source\PSoC4/CyLib.c ****         *  This API enables the system reset feature when the clock supervisor switches
2569:Generated_Source\PSoC4/CyLib.c ****         *  the clock source to IMO. A programmable delay counter starts at delay count
2570:Generated_Source\PSoC4/CyLib.c ****         *  value (see CySysClkPllCsvReloadPgmDlyCounter API) and counts down.
2571:Generated_Source\PSoC4/CyLib.c ****         *
2572:Generated_Source\PSoC4/CyLib.c ****         *  The CSV block will assert system reset when the counter reaches zero unless
2573:Generated_Source\PSoC4/CyLib.c ****         *  firmware intervenes and reloads the counter using
2574:Generated_Source\PSoC4/CyLib.c ****         *  CySysClkPllCsvReloadPgmDlyCounter() API.
2575:Generated_Source\PSoC4/CyLib.c ****         *
2576:Generated_Source\PSoC4/CyLib.c ****         *  This API is available only for PSoC 4500 with PLL devices.
2577:Generated_Source\PSoC4/CyLib.c ****         *
2578:Generated_Source\PSoC4/CyLib.c ****         *  Side Effects and Restrictions:
2579:Generated_Source\PSoC4/CyLib.c ****         *  If a clock switch occurs, CSV block will reset the device when the delay
2580:Generated_Source\PSoC4/CyLib.c ****         *  counter reaches zero unless firmware reloads the counter using
2581:Generated_Source\PSoC4/CyLib.c ****         *  CySysClkPllCsvReloadPgmDlyCounter() API.
2582:Generated_Source\PSoC4/CyLib.c ****         *
2583:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
2584:Generated_Source\PSoC4/CyLib.c ****         void CySysClkPllCsvEnableReset(void)
2585:Generated_Source\PSoC4/CyLib.c ****         {
2586:Generated_Source\PSoC4/CyLib.c ****             CY_SET_REG32_FIELD(CYREG_EXCO_RSTDLY_CTL, CYFLD_EXCO_EN, 0x1uL);
2587:Generated_Source\PSoC4/CyLib.c ****         }
2588:Generated_Source\PSoC4/CyLib.c **** 
2589:Generated_Source\PSoC4/CyLib.c **** 
2590:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
2591:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkPllCsvDisableReset
2592:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
2593:Generated_Source\PSoC4/CyLib.c ****         *
2594:Generated_Source\PSoC4/CyLib.c ****         *  This API disables the system reset feature when the clock supervisor
2595:Generated_Source\PSoC4/CyLib.c ****         *  switches the clock source to IMO.
2596:Generated_Source\PSoC4/CyLib.c ****         *
2597:Generated_Source\PSoC4/CyLib.c ****         *  This API is available only for PSoC 4500 with PLL devices.
2598:Generated_Source\PSoC4/CyLib.c ****         *
2599:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
2600:Generated_Source\PSoC4/CyLib.c ****         void CySysClkPllCsvDisableReset(void)
2601:Generated_Source\PSoC4/CyLib.c ****         {
2602:Generated_Source\PSoC4/CyLib.c ****             CY_CLEAR_REG32_FIELD(CYREG_EXCO_RSTDLY_CTL, CYFLD_EXCO_EN);
2603:Generated_Source\PSoC4/CyLib.c ****         }
2604:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 61


2605:Generated_Source\PSoC4/CyLib.c **** 
2606:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
2607:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkPllCsvReloadPgmDlyCounter
2608:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
2609:Generated_Source\PSoC4/CyLib.c ****         *
2610:Generated_Source\PSoC4/CyLib.c ****         *  This API reloads the programmable delay counter with the delay count value.
2611:Generated_Source\PSoC4/CyLib.c ****         *
2612:Generated_Source\PSoC4/CyLib.c ****         *  This API is available only for PSoC 4500 with PLL devices.
2613:Generated_Source\PSoC4/CyLib.c ****         *
2614:Generated_Source\PSoC4/CyLib.c ****         * \param delayCount:
2615:Generated_Source\PSoC4/CyLib.c ****         *  Valid range 0-65535, device default value is 256.
2616:Generated_Source\PSoC4/CyLib.c ****         *  Sets the # of counts of IMO clock before system reset is asserted.
2617:Generated_Source\PSoC4/CyLib.c ****         *
2618:Generated_Source\PSoC4/CyLib.c ****         *
2619:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
2620:Generated_Source\PSoC4/CyLib.c ****         void CySysClkPllCsvReloadPgmDlyCounter(uint32 delayCount)
2621:Generated_Source\PSoC4/CyLib.c ****         {
2622:Generated_Source\PSoC4/CyLib.c ****             CY_SET_REG32_FIELD(CYREG_EXCO_RSTDLY, CYFLD_EXCO_DLYCOUNT, delayCount);
2623:Generated_Source\PSoC4/CyLib.c ****             CY_SET_REG32_FIELD(CYREG_EXCO_RSTDLY_CTL, CYFLD_EXCO_LOAD, 0x1uL);
2624:Generated_Source\PSoC4/CyLib.c ****         }
2625:Generated_Source\PSoC4/CyLib.c **** 
2626:Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_IP_ECOV2_SRSSLT) */
2627:Generated_Source\PSoC4/CyLib.c **** 
2628:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_PLL) */
2629:Generated_Source\PSoC4/CyLib.c **** 
2630:Generated_Source\PSoC4/CyLib.c **** 
2631:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
2632:Generated_Source\PSoC4/CyLib.c **** 
2633:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2634:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdEnable
2635:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2636:Generated_Source\PSoC4/CyLib.c ****     *
2637:Generated_Source\PSoC4/CyLib.c ****     *  Enables the output of the low-voltage monitor when Vddd is at or below the
2638:Generated_Source\PSoC4/CyLib.c ****     *  trip point, configures the device to generate an interrupt, and sets the
2639:Generated_Source\PSoC4/CyLib.c ****     *  voltage trip level.
2640:Generated_Source\PSoC4/CyLib.c ****     *
2641:Generated_Source\PSoC4/CyLib.c ****     *  \param threshold: Threshold selection for Low Voltage Detect circuit.
2642:Generated_Source\PSoC4/CyLib.c ****     *  Threshold variation is +/- 2.5% from these typical voltage choices.
2643:Generated_Source\PSoC4/CyLib.c ****     *         Define                     Voltage threshold
2644:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_75_V       1.7500 V
2645:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_80_V       1.8000 V
2646:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_90_V       1.9000 V
2647:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_00_V       2.0000 V
2648:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_10_V       2.1000 V
2649:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_20_V       2.2000 V
2650:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_30_V       2.3000 V
2651:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_40_V       2.4000 V
2652:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_50_V       2.5000 V
2653:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_60_V       2.6000 V
2654:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_70_V       2.7000 V
2655:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_80_V       2.8000 V
2656:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_90_V       2.9000 V
2657:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_3_00_V       3.0000 V
2658:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_3_20_V       3.2000 V
2659:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_4_50_V       4.5000 V
2660:Generated_Source\PSoC4/CyLib.c ****     *
2661:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 62


2662:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdEnable(uint32 threshold)
2663:Generated_Source\PSoC4/CyLib.c ****     {
 805              		.loc 1 2663 0
 806              		.cfi_startproc
 807              		@ args = 0, pretend = 0, frame = 8
 808              		@ frame_needed = 1, uses_anonymous_args = 0
 809 0000 80B5     		push	{r7, lr}
 810              		.cfi_def_cfa_offset 8
 811              		.cfi_offset 7, -8
 812              		.cfi_offset 14, -4
 813 0002 82B0     		sub	sp, sp, #8
 814              		.cfi_def_cfa_offset 16
 815 0004 00AF     		add	r7, sp, #0
 816              		.cfi_def_cfa_register 7
 817 0006 7860     		str	r0, [r7, #4]
2664:Generated_Source\PSoC4/CyLib.c ****         /* Prevent propagating a false interrupt */
2665:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   &= (uint32) ~CY_LVD_PROPAGATE_INT_TO_CPU;
 818              		.loc 1 2665 0
 819 0008 144B     		ldr	r3, .L48
 820 000a 144A     		ldr	r2, .L48
 821 000c 1268     		ldr	r2, [r2]
 822 000e 0221     		movs	r1, #2
 823 0010 8A43     		bics	r2, r1
 824 0012 1A60     		str	r2, [r3]
2666:Generated_Source\PSoC4/CyLib.c **** 
2667:Generated_Source\PSoC4/CyLib.c ****         /* Set specified threshold */
2668:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG = (CY_LVD_PWR_VMON_CONFIG_REG & ~CY_LVD_PWR_VMON_CONFIG_LVD_SEL_
 825              		.loc 1 2668 0
 826 0014 124B     		ldr	r3, .L48+4
 827 0016 124A     		ldr	r2, .L48+4
 828 0018 1268     		ldr	r2, [r2]
 829 001a 1E21     		movs	r1, #30
 830 001c 8A43     		bics	r2, r1
 831 001e 1100     		movs	r1, r2
2669:Generated_Source\PSoC4/CyLib.c ****                 ((threshold << CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT) & CY_LVD_PWR_VMON_CONFIG_LVD_S
 832              		.loc 1 2669 0
 833 0020 7A68     		ldr	r2, [r7, #4]
 834 0022 5200     		lsls	r2, r2, #1
 835 0024 1E20     		movs	r0, #30
 836 0026 0240     		ands	r2, r0
2668:Generated_Source\PSoC4/CyLib.c ****                 ((threshold << CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT) & CY_LVD_PWR_VMON_CONFIG_LVD_S
 837              		.loc 1 2668 0
 838 0028 0A43     		orrs	r2, r1
 839 002a 1A60     		str	r2, [r3]
2670:Generated_Source\PSoC4/CyLib.c **** 
2671:Generated_Source\PSoC4/CyLib.c ****         /* Enable the LVD. This may cause a false LVD event. */
2672:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG |= CY_LVD_PWR_VMON_CONFIG_LVD_EN;
 840              		.loc 1 2672 0
 841 002c 0C4B     		ldr	r3, .L48+4
 842 002e 0C4A     		ldr	r2, .L48+4
 843 0030 1268     		ldr	r2, [r2]
 844 0032 0121     		movs	r1, #1
 845 0034 0A43     		orrs	r2, r1
 846 0036 1A60     		str	r2, [r3]
2673:Generated_Source\PSoC4/CyLib.c **** 
2674:Generated_Source\PSoC4/CyLib.c ****         /* Wait for the circuit to stabilize */
2675:Generated_Source\PSoC4/CyLib.c ****         CyDelayUs(CY_LVD_STABILIZE_TIMEOUT_US);
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 63


 847              		.loc 1 2675 0
 848 0038 FA23     		movs	r3, #250
 849 003a 9B00     		lsls	r3, r3, #2
 850 003c 1800     		movs	r0, r3
 851 003e FFF7FEFF 		bl	CyDelayUs
2676:Generated_Source\PSoC4/CyLib.c **** 
2677:Generated_Source\PSoC4/CyLib.c ****         /* Clear the false event */
2678:Generated_Source\PSoC4/CyLib.c ****         CySysLvdClearInterrupt();
 852              		.loc 1 2678 0
 853 0042 FFF7FEFF 		bl	CySysLvdClearInterrupt
2679:Generated_Source\PSoC4/CyLib.c **** 
2680:Generated_Source\PSoC4/CyLib.c ****         /* Unmask the interrupt */
2681:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   |= CY_LVD_PROPAGATE_INT_TO_CPU;
 854              		.loc 1 2681 0
 855 0046 054B     		ldr	r3, .L48
 856 0048 044A     		ldr	r2, .L48
 857 004a 1268     		ldr	r2, [r2]
 858 004c 0221     		movs	r1, #2
 859 004e 0A43     		orrs	r2, r1
 860 0050 1A60     		str	r2, [r3]
2682:Generated_Source\PSoC4/CyLib.c ****     }
 861              		.loc 1 2682 0
 862 0052 C046     		nop
 863 0054 BD46     		mov	sp, r7
 864 0056 02B0     		add	sp, sp, #8
 865              		@ sp needed
 866 0058 80BD     		pop	{r7, pc}
 867              	.L49:
 868 005a C046     		.align	2
 869              	.L48:
 870 005c 08000B40 		.word	1074462728
 871 0060 18000B40 		.word	1074462744
 872              		.cfi_endproc
 873              	.LFE13:
 874              		.size	CySysLvdEnable, .-CySysLvdEnable
 875              		.section	.text.CySysLvdDisable,"ax",%progbits
 876              		.align	2
 877              		.global	CySysLvdDisable
 878              		.code	16
 879              		.thumb_func
 880              		.type	CySysLvdDisable, %function
 881              	CySysLvdDisable:
 882              	.LFB14:
2683:Generated_Source\PSoC4/CyLib.c **** 
2684:Generated_Source\PSoC4/CyLib.c **** 
2685:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2686:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdDisable
2687:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2688:Generated_Source\PSoC4/CyLib.c ****     *
2689:Generated_Source\PSoC4/CyLib.c ****     *  Disables the low voltage detection. A low voltage interrupt is disabled.
2690:Generated_Source\PSoC4/CyLib.c ****     *
2691:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2692:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdDisable(void)
2693:Generated_Source\PSoC4/CyLib.c ****     {
 883              		.loc 1 2693 0
 884              		.cfi_startproc
 885              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 64


 886              		@ frame_needed = 1, uses_anonymous_args = 0
 887 0000 80B5     		push	{r7, lr}
 888              		.cfi_def_cfa_offset 8
 889              		.cfi_offset 7, -8
 890              		.cfi_offset 14, -4
 891 0002 00AF     		add	r7, sp, #0
 892              		.cfi_def_cfa_register 7
2694:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   &= ~CY_LVD_PROPAGATE_INT_TO_CPU;
 893              		.loc 1 2694 0
 894 0004 074B     		ldr	r3, .L51
 895 0006 074A     		ldr	r2, .L51
 896 0008 1268     		ldr	r2, [r2]
 897 000a 0221     		movs	r1, #2
 898 000c 8A43     		bics	r2, r1
 899 000e 1A60     		str	r2, [r3]
2695:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG &= ~CY_LVD_PWR_VMON_CONFIG_LVD_EN;
 900              		.loc 1 2695 0
 901 0010 054B     		ldr	r3, .L51+4
 902 0012 054A     		ldr	r2, .L51+4
 903 0014 1268     		ldr	r2, [r2]
 904 0016 0121     		movs	r1, #1
 905 0018 8A43     		bics	r2, r1
 906 001a 1A60     		str	r2, [r3]
2696:Generated_Source\PSoC4/CyLib.c ****     }
 907              		.loc 1 2696 0
 908 001c C046     		nop
 909 001e BD46     		mov	sp, r7
 910              		@ sp needed
 911 0020 80BD     		pop	{r7, pc}
 912              	.L52:
 913 0022 C046     		.align	2
 914              	.L51:
 915 0024 08000B40 		.word	1074462728
 916 0028 18000B40 		.word	1074462744
 917              		.cfi_endproc
 918              	.LFE14:
 919              		.size	CySysLvdDisable, .-CySysLvdDisable
 920              		.section	.text.CySysLvdGetInterruptSource,"ax",%progbits
 921              		.align	2
 922              		.global	CySysLvdGetInterruptSource
 923              		.code	16
 924              		.thumb_func
 925              		.type	CySysLvdGetInterruptSource, %function
 926              	CySysLvdGetInterruptSource:
 927              	.LFB15:
2697:Generated_Source\PSoC4/CyLib.c **** 
2698:Generated_Source\PSoC4/CyLib.c **** 
2699:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2700:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdGetInterruptSource
2701:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2702:Generated_Source\PSoC4/CyLib.c ****     *
2703:Generated_Source\PSoC4/CyLib.c ****     *  Gets the low voltage detection interrupt status (without clearing).
2704:Generated_Source\PSoC4/CyLib.c ****     *
2705:Generated_Source\PSoC4/CyLib.c ****     * \return
2706:Generated_Source\PSoC4/CyLib.c ****     *  Interrupt request value:
2707:Generated_Source\PSoC4/CyLib.c ****     *    CY_SYS_LVD_INT - Indicates an Low Voltage Detect interrupt
2708:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 65


2709:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2710:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysLvdGetInterruptSource(void)
2711:Generated_Source\PSoC4/CyLib.c ****     {
 928              		.loc 1 2711 0
 929              		.cfi_startproc
 930              		@ args = 0, pretend = 0, frame = 0
 931              		@ frame_needed = 1, uses_anonymous_args = 0
 932 0000 80B5     		push	{r7, lr}
 933              		.cfi_def_cfa_offset 8
 934              		.cfi_offset 7, -8
 935              		.cfi_offset 14, -4
 936 0002 00AF     		add	r7, sp, #0
 937              		.cfi_def_cfa_register 7
2712:Generated_Source\PSoC4/CyLib.c ****         return (CY_LVD_PWR_INTR_REG & CY_SYS_LVD_INT);
 938              		.loc 1 2712 0
 939 0004 034B     		ldr	r3, .L55
 940 0006 1B68     		ldr	r3, [r3]
 941 0008 0222     		movs	r2, #2
 942 000a 1340     		ands	r3, r2
2713:Generated_Source\PSoC4/CyLib.c ****     }
 943              		.loc 1 2713 0
 944 000c 1800     		movs	r0, r3
 945 000e BD46     		mov	sp, r7
 946              		@ sp needed
 947 0010 80BD     		pop	{r7, pc}
 948              	.L56:
 949 0012 C046     		.align	2
 950              	.L55:
 951 0014 04000B40 		.word	1074462724
 952              		.cfi_endproc
 953              	.LFE15:
 954              		.size	CySysLvdGetInterruptSource, .-CySysLvdGetInterruptSource
 955              		.section	.text.CySysLvdClearInterrupt,"ax",%progbits
 956              		.align	2
 957              		.global	CySysLvdClearInterrupt
 958              		.code	16
 959              		.thumb_func
 960              		.type	CySysLvdClearInterrupt, %function
 961              	CySysLvdClearInterrupt:
 962              	.LFB16:
2714:Generated_Source\PSoC4/CyLib.c **** 
2715:Generated_Source\PSoC4/CyLib.c **** 
2716:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2717:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdClearInterrupt
2718:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2719:Generated_Source\PSoC4/CyLib.c ****     *
2720:Generated_Source\PSoC4/CyLib.c ****     *  Clears the low voltage detection interrupt status.
2721:Generated_Source\PSoC4/CyLib.c ****     *
2722:Generated_Source\PSoC4/CyLib.c ****     * \return
2723:Generated_Source\PSoC4/CyLib.c ****     *  None
2724:Generated_Source\PSoC4/CyLib.c ****     *
2725:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2726:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdClearInterrupt(void)
2727:Generated_Source\PSoC4/CyLib.c ****     {
 963              		.loc 1 2727 0
 964              		.cfi_startproc
 965              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 66


 966              		@ frame_needed = 1, uses_anonymous_args = 0
 967 0000 80B5     		push	{r7, lr}
 968              		.cfi_def_cfa_offset 8
 969              		.cfi_offset 7, -8
 970              		.cfi_offset 14, -4
 971 0002 00AF     		add	r7, sp, #0
 972              		.cfi_def_cfa_register 7
2728:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_REG = CY_SYS_LVD_INT;
 973              		.loc 1 2728 0
 974 0004 024B     		ldr	r3, .L58
 975 0006 0222     		movs	r2, #2
 976 0008 1A60     		str	r2, [r3]
2729:Generated_Source\PSoC4/CyLib.c ****     }
 977              		.loc 1 2729 0
 978 000a C046     		nop
 979 000c BD46     		mov	sp, r7
 980              		@ sp needed
 981 000e 80BD     		pop	{r7, pc}
 982              	.L59:
 983              		.align	2
 984              	.L58:
 985 0010 04000B40 		.word	1074462724
 986              		.cfi_endproc
 987              	.LFE16:
 988              		.size	CySysLvdClearInterrupt, .-CySysLvdClearInterrupt
 989              		.section	.text.CySysGetResetReason,"ax",%progbits
 990              		.align	2
 991              		.global	CySysGetResetReason
 992              		.code	16
 993              		.thumb_func
 994              		.type	CySysGetResetReason, %function
 995              	CySysGetResetReason:
 996              	.LFB17:
2730:Generated_Source\PSoC4/CyLib.c **** 
2731:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
2732:Generated_Source\PSoC4/CyLib.c **** 
2733:Generated_Source\PSoC4/CyLib.c **** 
2734:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2735:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysGetResetReason
2736:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2737:Generated_Source\PSoC4/CyLib.c **** *
2738:Generated_Source\PSoC4/CyLib.c **** *  Reports the cause for the latest reset(s) that occurred in the system. All
2739:Generated_Source\PSoC4/CyLib.c **** *  the bits in the RES_CAUSE register assert when the corresponding reset cause
2740:Generated_Source\PSoC4/CyLib.c **** *  occurs and must be cleared by the firmware. These bits are cleared by the
2741:Generated_Source\PSoC4/CyLib.c **** *  hardware only during XRES, POR, or a detected brown-out.
2742:Generated_Source\PSoC4/CyLib.c **** *
2743:Generated_Source\PSoC4/CyLib.c **** *  \param reason: bits in the RES_CAUSE register to clear.
2744:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_WDT       - WDT caused a reset
2745:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_PROTFAULT - Occured protection violation that requires reset
2746:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_SW        - Cortex-M0 requested a system reset.
2747:Generated_Source\PSoC4/CyLib.c **** *
2748:Generated_Source\PSoC4/CyLib.c **** * \return
2749:Generated_Source\PSoC4/CyLib.c **** *  Status. Same enumerated bit values as used for the reason parameter.
2750:Generated_Source\PSoC4/CyLib.c **** *
2751:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2752:Generated_Source\PSoC4/CyLib.c **** uint32 CySysGetResetReason(uint32 reason)
2753:Generated_Source\PSoC4/CyLib.c **** {
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 67


 997              		.loc 1 2753 0
 998              		.cfi_startproc
 999              		@ args = 0, pretend = 0, frame = 16
 1000              		@ frame_needed = 1, uses_anonymous_args = 0
 1001 0000 80B5     		push	{r7, lr}
 1002              		.cfi_def_cfa_offset 8
 1003              		.cfi_offset 7, -8
 1004              		.cfi_offset 14, -4
 1005 0002 84B0     		sub	sp, sp, #16
 1006              		.cfi_def_cfa_offset 24
 1007 0004 00AF     		add	r7, sp, #0
 1008              		.cfi_def_cfa_register 7
 1009 0006 7860     		str	r0, [r7, #4]
2754:Generated_Source\PSoC4/CyLib.c ****     uint32 returnStatus;
2755:Generated_Source\PSoC4/CyLib.c **** 
2756:Generated_Source\PSoC4/CyLib.c ****     reason &= (CY_SYS_RESET_WDT | CY_SYS_RESET_PROTFAULT | CY_SYS_RESET_SW);
 1010              		.loc 1 2756 0
 1011 0008 7B68     		ldr	r3, [r7, #4]
 1012 000a 1922     		movs	r2, #25
 1013 000c 1340     		ands	r3, r2
 1014 000e 7B60     		str	r3, [r7, #4]
2757:Generated_Source\PSoC4/CyLib.c ****     returnStatus = CY_SYS_RES_CAUSE_REG &
 1015              		.loc 1 2757 0
 1016 0010 064B     		ldr	r3, .L62
 1017 0012 1B68     		ldr	r3, [r3]
 1018 0014 1922     		movs	r2, #25
 1019 0016 1340     		ands	r3, r2
 1020 0018 FB60     		str	r3, [r7, #12]
2758:Generated_Source\PSoC4/CyLib.c ****                   (CY_SYS_RESET_WDT | CY_SYS_RESET_PROTFAULT | CY_SYS_RESET_SW);
2759:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_RES_CAUSE_REG = reason;
 1021              		.loc 1 2759 0
 1022 001a 044B     		ldr	r3, .L62
 1023 001c 7A68     		ldr	r2, [r7, #4]
 1024 001e 1A60     		str	r2, [r3]
2760:Generated_Source\PSoC4/CyLib.c **** 
2761:Generated_Source\PSoC4/CyLib.c ****     return (returnStatus);
 1025              		.loc 1 2761 0
 1026 0020 FB68     		ldr	r3, [r7, #12]
2762:Generated_Source\PSoC4/CyLib.c **** }
 1027              		.loc 1 2762 0
 1028 0022 1800     		movs	r0, r3
 1029 0024 BD46     		mov	sp, r7
 1030 0026 04B0     		add	sp, sp, #16
 1031              		@ sp needed
 1032 0028 80BD     		pop	{r7, pc}
 1033              	.L63:
 1034 002a C046     		.align	2
 1035              	.L62:
 1036 002c 00030B40 		.word	1074463488
 1037              		.cfi_endproc
 1038              	.LFE17:
 1039              		.size	CySysGetResetReason, .-CySysGetResetReason
 1040              		.section	.text.CyDisableInts,"ax",%progbits
 1041              		.align	2
 1042              		.global	CyDisableInts
 1043              		.code	16
 1044              		.thumb_func
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 68


 1045              		.type	CyDisableInts, %function
 1046              	CyDisableInts:
 1047              	.LFB18:
2763:Generated_Source\PSoC4/CyLib.c **** 
2764:Generated_Source\PSoC4/CyLib.c **** 
2765:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2766:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDisableInts
2767:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2768:Generated_Source\PSoC4/CyLib.c **** *
2769:Generated_Source\PSoC4/CyLib.c **** *  Disables all interrupts.
2770:Generated_Source\PSoC4/CyLib.c **** *
2771:Generated_Source\PSoC4/CyLib.c **** * \return
2772:Generated_Source\PSoC4/CyLib.c **** *  32 bit mask of previously enabled interrupts.
2773:Generated_Source\PSoC4/CyLib.c **** *
2774:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2775:Generated_Source\PSoC4/CyLib.c **** uint32 CyDisableInts(void)
2776:Generated_Source\PSoC4/CyLib.c **** {
 1048              		.loc 1 2776 0
 1049              		.cfi_startproc
 1050              		@ args = 0, pretend = 0, frame = 8
 1051              		@ frame_needed = 1, uses_anonymous_args = 0
 1052 0000 80B5     		push	{r7, lr}
 1053              		.cfi_def_cfa_offset 8
 1054              		.cfi_offset 7, -8
 1055              		.cfi_offset 14, -4
 1056 0002 82B0     		sub	sp, sp, #8
 1057              		.cfi_def_cfa_offset 16
 1058 0004 00AF     		add	r7, sp, #0
 1059              		.cfi_def_cfa_register 7
2777:Generated_Source\PSoC4/CyLib.c ****     uint32 intState;
2778:Generated_Source\PSoC4/CyLib.c **** 
2779:Generated_Source\PSoC4/CyLib.c ****     /* Get current interrupt state. */
2780:Generated_Source\PSoC4/CyLib.c ****     intState = CY_INT_CLEAR_REG;
 1060              		.loc 1 2780 0
 1061 0006 064B     		ldr	r3, .L66
 1062 0008 1B68     		ldr	r3, [r3]
 1063 000a 7B60     		str	r3, [r7, #4]
2781:Generated_Source\PSoC4/CyLib.c **** 
2782:Generated_Source\PSoC4/CyLib.c ****     /* Disable all interrupts. */
2783:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLEAR_REG = CY_INT_CLEAR_DISABLE_ALL;
 1064              		.loc 1 2783 0
 1065 000c 044B     		ldr	r3, .L66
 1066 000e 0122     		movs	r2, #1
 1067 0010 5242     		rsbs	r2, r2, #0
 1068 0012 1A60     		str	r2, [r3]
2784:Generated_Source\PSoC4/CyLib.c **** 
2785:Generated_Source\PSoC4/CyLib.c ****     return (intState);
 1069              		.loc 1 2785 0
 1070 0014 7B68     		ldr	r3, [r7, #4]
2786:Generated_Source\PSoC4/CyLib.c **** }
 1071              		.loc 1 2786 0
 1072 0016 1800     		movs	r0, r3
 1073 0018 BD46     		mov	sp, r7
 1074 001a 02B0     		add	sp, sp, #8
 1075              		@ sp needed
 1076 001c 80BD     		pop	{r7, pc}
 1077              	.L67:
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 69


 1078 001e C046     		.align	2
 1079              	.L66:
 1080 0020 80E100E0 		.word	-536813184
 1081              		.cfi_endproc
 1082              	.LFE18:
 1083              		.size	CyDisableInts, .-CyDisableInts
 1084              		.section	.text.CyEnableInts,"ax",%progbits
 1085              		.align	2
 1086              		.global	CyEnableInts
 1087              		.code	16
 1088              		.thumb_func
 1089              		.type	CyEnableInts, %function
 1090              	CyEnableInts:
 1091              	.LFB19:
2787:Generated_Source\PSoC4/CyLib.c **** 
2788:Generated_Source\PSoC4/CyLib.c **** 
2789:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2790:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyEnableInts
2791:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2792:Generated_Source\PSoC4/CyLib.c **** *
2793:Generated_Source\PSoC4/CyLib.c **** *  Enables interrupts to a given state.
2794:Generated_Source\PSoC4/CyLib.c **** *
2795:Generated_Source\PSoC4/CyLib.c **** *  \param mask The 32 bit mask of interrupts to enable.
2796:Generated_Source\PSoC4/CyLib.c **** *
2797:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2798:Generated_Source\PSoC4/CyLib.c **** void CyEnableInts(uint32 mask)
2799:Generated_Source\PSoC4/CyLib.c **** {
 1092              		.loc 1 2799 0
 1093              		.cfi_startproc
 1094              		@ args = 0, pretend = 0, frame = 8
 1095              		@ frame_needed = 1, uses_anonymous_args = 0
 1096 0000 80B5     		push	{r7, lr}
 1097              		.cfi_def_cfa_offset 8
 1098              		.cfi_offset 7, -8
 1099              		.cfi_offset 14, -4
 1100 0002 82B0     		sub	sp, sp, #8
 1101              		.cfi_def_cfa_offset 16
 1102 0004 00AF     		add	r7, sp, #0
 1103              		.cfi_def_cfa_register 7
 1104 0006 7860     		str	r0, [r7, #4]
2800:Generated_Source\PSoC4/CyLib.c ****     CY_INT_ENABLE_REG = mask;
 1105              		.loc 1 2800 0
 1106 0008 034B     		ldr	r3, .L69
 1107 000a 7A68     		ldr	r2, [r7, #4]
 1108 000c 1A60     		str	r2, [r3]
2801:Generated_Source\PSoC4/CyLib.c **** }
 1109              		.loc 1 2801 0
 1110 000e C046     		nop
 1111 0010 BD46     		mov	sp, r7
 1112 0012 02B0     		add	sp, sp, #8
 1113              		@ sp needed
 1114 0014 80BD     		pop	{r7, pc}
 1115              	.L70:
 1116 0016 C046     		.align	2
 1117              	.L69:
 1118 0018 00E100E0 		.word	-536813312
 1119              		.cfi_endproc
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 70


 1120              	.LFE19:
 1121              		.size	CyEnableInts, .-CyEnableInts
 1122              		.section	.text.CyIntSetSysVector,"ax",%progbits
 1123              		.align	2
 1124              		.global	CyIntSetSysVector
 1125              		.code	16
 1126              		.thumb_func
 1127              		.type	CyIntSetSysVector, %function
 1128              	CyIntSetSysVector:
 1129              	.LFB20:
2802:Generated_Source\PSoC4/CyLib.c **** 
2803:Generated_Source\PSoC4/CyLib.c **** 
2804:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2805:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetSysVector
2806:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2807:Generated_Source\PSoC4/CyLib.c **** *
2808:Generated_Source\PSoC4/CyLib.c **** *  Sets the interrupt vector of the specified system interrupt number. These
2809:Generated_Source\PSoC4/CyLib.c **** *  interrupts are for SysTick, PendSV and others.
2810:Generated_Source\PSoC4/CyLib.c **** *
2811:Generated_Source\PSoC4/CyLib.c **** *  \param number: System interrupt number:
2812:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_NMI_IRQN        - Non Maskable Interrupt
2813:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_HARD_FAULT_IRQN - Hard Fault Interrupt
2814:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SVCALL_IRQN     - SV Call Interrupt
2815:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_PEND_SV_IRQN    - Pend SV Interrupt
2816:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SYSTICK_IRQN    - System Tick Interrupt
2817:Generated_Source\PSoC4/CyLib.c **** *
2818:Generated_Source\PSoC4/CyLib.c **** *  \param address Pointer to an interrupt service routine.
2819:Generated_Source\PSoC4/CyLib.c **** *
2820:Generated_Source\PSoC4/CyLib.c **** * \return The old ISR vector at this location.
2821:Generated_Source\PSoC4/CyLib.c **** *
2822:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2823:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntSetSysVector(uint8 number, cyisraddress address)
2824:Generated_Source\PSoC4/CyLib.c **** {
 1130              		.loc 1 2824 0
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 16
 1133              		@ frame_needed = 1, uses_anonymous_args = 0
 1134 0000 80B5     		push	{r7, lr}
 1135              		.cfi_def_cfa_offset 8
 1136              		.cfi_offset 7, -8
 1137              		.cfi_offset 14, -4
 1138 0002 84B0     		sub	sp, sp, #16
 1139              		.cfi_def_cfa_offset 24
 1140 0004 00AF     		add	r7, sp, #0
 1141              		.cfi_def_cfa_register 7
 1142 0006 0200     		movs	r2, r0
 1143 0008 3960     		str	r1, [r7]
 1144 000a FB1D     		adds	r3, r7, #7
 1145 000c 1A70     		strb	r2, [r3]
2825:Generated_Source\PSoC4/CyLib.c ****     cyisraddress oldIsr;
2826:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1146              		.loc 1 2826 0
 1147 000e 8023     		movs	r3, #128
 1148 0010 9B05     		lsls	r3, r3, #22
 1149 0012 FB60     		str	r3, [r7, #12]
2827:Generated_Source\PSoC4/CyLib.c **** 
2828:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_INT_IRQ_BASE);
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 71


 1150              		.loc 1 2828 0
 1151 0014 FB1D     		adds	r3, r7, #7
 1152 0016 1B78     		ldrb	r3, [r3]
 1153 0018 0F2B     		cmp	r3, #15
 1154 001a 02D9     		bls	.L72
 1155              		.loc 1 2828 0 is_stmt 0 discriminator 1
 1156 001c 0020     		movs	r0, #0
 1157 001e FFF7FEFF 		bl	CyHalt
 1158              	.L72:
2829:Generated_Source\PSoC4/CyLib.c **** 
2830:Generated_Source\PSoC4/CyLib.c ****     /* Save old Interrupt service routine. */
2831:Generated_Source\PSoC4/CyLib.c ****     oldIsr = ramVectorTable[number];
 1159              		.loc 1 2831 0 is_stmt 1
 1160 0022 FB1D     		adds	r3, r7, #7
 1161 0024 1B78     		ldrb	r3, [r3]
 1162 0026 9B00     		lsls	r3, r3, #2
 1163 0028 FA68     		ldr	r2, [r7, #12]
 1164 002a D318     		adds	r3, r2, r3
 1165 002c 1B68     		ldr	r3, [r3]
 1166 002e BB60     		str	r3, [r7, #8]
2832:Generated_Source\PSoC4/CyLib.c **** 
2833:Generated_Source\PSoC4/CyLib.c ****     /* Set new Interrupt service routine. */
2834:Generated_Source\PSoC4/CyLib.c ****     ramVectorTable[number] = address;
 1167              		.loc 1 2834 0
 1168 0030 FB1D     		adds	r3, r7, #7
 1169 0032 1B78     		ldrb	r3, [r3]
 1170 0034 9B00     		lsls	r3, r3, #2
 1171 0036 FA68     		ldr	r2, [r7, #12]
 1172 0038 D318     		adds	r3, r2, r3
 1173 003a 3A68     		ldr	r2, [r7]
 1174 003c 1A60     		str	r2, [r3]
2835:Generated_Source\PSoC4/CyLib.c **** 
2836:Generated_Source\PSoC4/CyLib.c ****     return(oldIsr);
 1175              		.loc 1 2836 0
 1176 003e BB68     		ldr	r3, [r7, #8]
2837:Generated_Source\PSoC4/CyLib.c **** }
 1177              		.loc 1 2837 0
 1178 0040 1800     		movs	r0, r3
 1179 0042 BD46     		mov	sp, r7
 1180 0044 04B0     		add	sp, sp, #16
 1181              		@ sp needed
 1182 0046 80BD     		pop	{r7, pc}
 1183              		.cfi_endproc
 1184              	.LFE20:
 1185              		.size	CyIntSetSysVector, .-CyIntSetSysVector
 1186              		.section	.text.CyIntGetSysVector,"ax",%progbits
 1187              		.align	2
 1188              		.global	CyIntGetSysVector
 1189              		.code	16
 1190              		.thumb_func
 1191              		.type	CyIntGetSysVector, %function
 1192              	CyIntGetSysVector:
 1193              	.LFB21:
2838:Generated_Source\PSoC4/CyLib.c **** 
2839:Generated_Source\PSoC4/CyLib.c **** 
2840:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2841:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetSysVector
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 72


2842:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2843:Generated_Source\PSoC4/CyLib.c **** *
2844:Generated_Source\PSoC4/CyLib.c **** *   Gets the interrupt vector of the specified system interrupt number. These
2845:Generated_Source\PSoC4/CyLib.c **** *   interrupts are for SysTick, PendSV and others.
2846:Generated_Source\PSoC4/CyLib.c **** *
2847:Generated_Source\PSoC4/CyLib.c **** *  \param number: System interrupt number:
2848:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_NMI_IRQN        - Non Maskable Interrupt
2849:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_HARD_FAULT_IRQN - Hard Fault Interrupt
2850:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SVCALL_IRQN     - SV Call Interrupt
2851:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_PEND_SV_IRQN    - Pend SV Interrupt
2852:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SYSTICK_IRQN    - System Tick Interrupt
2853:Generated_Source\PSoC4/CyLib.c **** *
2854:Generated_Source\PSoC4/CyLib.c **** * \return Address of the ISR in the interrupt vector table.
2855:Generated_Source\PSoC4/CyLib.c **** *
2856:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2857:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntGetSysVector(uint8 number)
2858:Generated_Source\PSoC4/CyLib.c **** {
 1194              		.loc 1 2858 0
 1195              		.cfi_startproc
 1196              		@ args = 0, pretend = 0, frame = 16
 1197              		@ frame_needed = 1, uses_anonymous_args = 0
 1198 0000 80B5     		push	{r7, lr}
 1199              		.cfi_def_cfa_offset 8
 1200              		.cfi_offset 7, -8
 1201              		.cfi_offset 14, -4
 1202 0002 84B0     		sub	sp, sp, #16
 1203              		.cfi_def_cfa_offset 24
 1204 0004 00AF     		add	r7, sp, #0
 1205              		.cfi_def_cfa_register 7
 1206 0006 0200     		movs	r2, r0
 1207 0008 FB1D     		adds	r3, r7, #7
 1208 000a 1A70     		strb	r2, [r3]
2859:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1209              		.loc 1 2859 0
 1210 000c 8023     		movs	r3, #128
 1211 000e 9B05     		lsls	r3, r3, #22
 1212 0010 FB60     		str	r3, [r7, #12]
2860:Generated_Source\PSoC4/CyLib.c **** 
2861:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_INT_IRQ_BASE);
 1213              		.loc 1 2861 0
 1214 0012 FB1D     		adds	r3, r7, #7
 1215 0014 1B78     		ldrb	r3, [r3]
 1216 0016 0F2B     		cmp	r3, #15
 1217 0018 02D9     		bls	.L75
 1218              		.loc 1 2861 0 is_stmt 0 discriminator 1
 1219 001a 0020     		movs	r0, #0
 1220 001c FFF7FEFF 		bl	CyHalt
 1221              	.L75:
2862:Generated_Source\PSoC4/CyLib.c **** 
2863:Generated_Source\PSoC4/CyLib.c ****     return(ramVectorTable[number]);
 1222              		.loc 1 2863 0 is_stmt 1
 1223 0020 FB1D     		adds	r3, r7, #7
 1224 0022 1B78     		ldrb	r3, [r3]
 1225 0024 9B00     		lsls	r3, r3, #2
 1226 0026 FA68     		ldr	r2, [r7, #12]
 1227 0028 D318     		adds	r3, r2, r3
 1228 002a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 73


2864:Generated_Source\PSoC4/CyLib.c **** }
 1229              		.loc 1 2864 0
 1230 002c 1800     		movs	r0, r3
 1231 002e BD46     		mov	sp, r7
 1232 0030 04B0     		add	sp, sp, #16
 1233              		@ sp needed
 1234 0032 80BD     		pop	{r7, pc}
 1235              		.cfi_endproc
 1236              	.LFE21:
 1237              		.size	CyIntGetSysVector, .-CyIntGetSysVector
 1238              		.section	.text.CyIntSetVector,"ax",%progbits
 1239              		.align	2
 1240              		.global	CyIntSetVector
 1241              		.code	16
 1242              		.thumb_func
 1243              		.type	CyIntSetVector, %function
 1244              	CyIntSetVector:
 1245              	.LFB22:
2865:Generated_Source\PSoC4/CyLib.c **** 
2866:Generated_Source\PSoC4/CyLib.c **** 
2867:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2868:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetVector
2869:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2870:Generated_Source\PSoC4/CyLib.c **** *
2871:Generated_Source\PSoC4/CyLib.c **** *  Sets the interrupt vector of the specified interrupt number.
2872:Generated_Source\PSoC4/CyLib.c **** *
2873:Generated_Source\PSoC4/CyLib.c **** *  \param number Valid range [0-31].  Interrupt number
2874:Generated_Source\PSoC4/CyLib.c **** *  \param address Pointer to an interrupt service routine
2875:Generated_Source\PSoC4/CyLib.c **** *
2876:Generated_Source\PSoC4/CyLib.c **** * \return Previous interrupt vector value.
2877:Generated_Source\PSoC4/CyLib.c **** *
2878:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2879:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntSetVector(uint8 number, cyisraddress address)
2880:Generated_Source\PSoC4/CyLib.c **** {
 1246              		.loc 1 2880 0
 1247              		.cfi_startproc
 1248              		@ args = 0, pretend = 0, frame = 16
 1249              		@ frame_needed = 1, uses_anonymous_args = 0
 1250 0000 80B5     		push	{r7, lr}
 1251              		.cfi_def_cfa_offset 8
 1252              		.cfi_offset 7, -8
 1253              		.cfi_offset 14, -4
 1254 0002 84B0     		sub	sp, sp, #16
 1255              		.cfi_def_cfa_offset 24
 1256 0004 00AF     		add	r7, sp, #0
 1257              		.cfi_def_cfa_register 7
 1258 0006 0200     		movs	r2, r0
 1259 0008 3960     		str	r1, [r7]
 1260 000a FB1D     		adds	r3, r7, #7
 1261 000c 1A70     		strb	r2, [r3]
2881:Generated_Source\PSoC4/CyLib.c ****     cyisraddress oldIsr;
2882:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1262              		.loc 1 2882 0
 1263 000e 8023     		movs	r3, #128
 1264 0010 9B05     		lsls	r3, r3, #22
 1265 0012 FB60     		str	r3, [r7, #12]
2883:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 74


2884:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1266              		.loc 1 2884 0
 1267 0014 FB1D     		adds	r3, r7, #7
 1268 0016 1B78     		ldrb	r3, [r3]
 1269 0018 1F2B     		cmp	r3, #31
 1270 001a 02D9     		bls	.L78
 1271              		.loc 1 2884 0 is_stmt 0 discriminator 1
 1272 001c 0020     		movs	r0, #0
 1273 001e FFF7FEFF 		bl	CyHalt
 1274              	.L78:
2885:Generated_Source\PSoC4/CyLib.c **** 
2886:Generated_Source\PSoC4/CyLib.c ****     /* Save old Interrupt service routine. */
2887:Generated_Source\PSoC4/CyLib.c ****     oldIsr = ramVectorTable[CY_INT_IRQ_BASE + number];
 1275              		.loc 1 2887 0 is_stmt 1
 1276 0022 FB1D     		adds	r3, r7, #7
 1277 0024 1B78     		ldrb	r3, [r3]
 1278 0026 1033     		adds	r3, r3, #16
 1279 0028 9B00     		lsls	r3, r3, #2
 1280 002a FA68     		ldr	r2, [r7, #12]
 1281 002c D318     		adds	r3, r2, r3
 1282 002e 1B68     		ldr	r3, [r3]
 1283 0030 BB60     		str	r3, [r7, #8]
2888:Generated_Source\PSoC4/CyLib.c **** 
2889:Generated_Source\PSoC4/CyLib.c ****     /* Set new Interrupt service routine. */
2890:Generated_Source\PSoC4/CyLib.c ****     ramVectorTable[CY_INT_IRQ_BASE + number] = address;
 1284              		.loc 1 2890 0
 1285 0032 FB1D     		adds	r3, r7, #7
 1286 0034 1B78     		ldrb	r3, [r3]
 1287 0036 1033     		adds	r3, r3, #16
 1288 0038 9B00     		lsls	r3, r3, #2
 1289 003a FA68     		ldr	r2, [r7, #12]
 1290 003c D318     		adds	r3, r2, r3
 1291 003e 3A68     		ldr	r2, [r7]
 1292 0040 1A60     		str	r2, [r3]
2891:Generated_Source\PSoC4/CyLib.c **** 
2892:Generated_Source\PSoC4/CyLib.c ****     return(oldIsr);
 1293              		.loc 1 2892 0
 1294 0042 BB68     		ldr	r3, [r7, #8]
2893:Generated_Source\PSoC4/CyLib.c **** }
 1295              		.loc 1 2893 0
 1296 0044 1800     		movs	r0, r3
 1297 0046 BD46     		mov	sp, r7
 1298 0048 04B0     		add	sp, sp, #16
 1299              		@ sp needed
 1300 004a 80BD     		pop	{r7, pc}
 1301              		.cfi_endproc
 1302              	.LFE22:
 1303              		.size	CyIntSetVector, .-CyIntSetVector
 1304              		.section	.text.CyIntGetVector,"ax",%progbits
 1305              		.align	2
 1306              		.global	CyIntGetVector
 1307              		.code	16
 1308              		.thumb_func
 1309              		.type	CyIntGetVector, %function
 1310              	CyIntGetVector:
 1311              	.LFB23:
2894:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 75


2895:Generated_Source\PSoC4/CyLib.c **** 
2896:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2897:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetVector
2898:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2899:Generated_Source\PSoC4/CyLib.c **** *
2900:Generated_Source\PSoC4/CyLib.c **** *  Gets the interrupt vector of the specified interrupt number.
2901:Generated_Source\PSoC4/CyLib.c **** *
2902:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number
2903:Generated_Source\PSoC4/CyLib.c **** *
2904:Generated_Source\PSoC4/CyLib.c **** * \return Address of the ISR in the interrupt vector table.
2905:Generated_Source\PSoC4/CyLib.c **** *
2906:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2907:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntGetVector(uint8 number)
2908:Generated_Source\PSoC4/CyLib.c **** {
 1312              		.loc 1 2908 0
 1313              		.cfi_startproc
 1314              		@ args = 0, pretend = 0, frame = 16
 1315              		@ frame_needed = 1, uses_anonymous_args = 0
 1316 0000 80B5     		push	{r7, lr}
 1317              		.cfi_def_cfa_offset 8
 1318              		.cfi_offset 7, -8
 1319              		.cfi_offset 14, -4
 1320 0002 84B0     		sub	sp, sp, #16
 1321              		.cfi_def_cfa_offset 24
 1322 0004 00AF     		add	r7, sp, #0
 1323              		.cfi_def_cfa_register 7
 1324 0006 0200     		movs	r2, r0
 1325 0008 FB1D     		adds	r3, r7, #7
 1326 000a 1A70     		strb	r2, [r3]
2909:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1327              		.loc 1 2909 0
 1328 000c 8023     		movs	r3, #128
 1329 000e 9B05     		lsls	r3, r3, #22
 1330 0010 FB60     		str	r3, [r7, #12]
2910:Generated_Source\PSoC4/CyLib.c **** 
2911:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1331              		.loc 1 2911 0
 1332 0012 FB1D     		adds	r3, r7, #7
 1333 0014 1B78     		ldrb	r3, [r3]
 1334 0016 1F2B     		cmp	r3, #31
 1335 0018 02D9     		bls	.L81
 1336              		.loc 1 2911 0 is_stmt 0 discriminator 1
 1337 001a 0020     		movs	r0, #0
 1338 001c FFF7FEFF 		bl	CyHalt
 1339              	.L81:
2912:Generated_Source\PSoC4/CyLib.c **** 
2913:Generated_Source\PSoC4/CyLib.c ****     return (ramVectorTable[CY_INT_IRQ_BASE + number]);
 1340              		.loc 1 2913 0 is_stmt 1
 1341 0020 FB1D     		adds	r3, r7, #7
 1342 0022 1B78     		ldrb	r3, [r3]
 1343 0024 1033     		adds	r3, r3, #16
 1344 0026 9B00     		lsls	r3, r3, #2
 1345 0028 FA68     		ldr	r2, [r7, #12]
 1346 002a D318     		adds	r3, r2, r3
 1347 002c 1B68     		ldr	r3, [r3]
2914:Generated_Source\PSoC4/CyLib.c **** }
 1348              		.loc 1 2914 0
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 76


 1349 002e 1800     		movs	r0, r3
 1350 0030 BD46     		mov	sp, r7
 1351 0032 04B0     		add	sp, sp, #16
 1352              		@ sp needed
 1353 0034 80BD     		pop	{r7, pc}
 1354              		.cfi_endproc
 1355              	.LFE23:
 1356              		.size	CyIntGetVector, .-CyIntGetVector
 1357 0036 C046     		.section	.text.CyIntSetPriority,"ax",%progbits
 1358              		.align	2
 1359              		.global	CyIntSetPriority
 1360              		.code	16
 1361              		.thumb_func
 1362              		.type	CyIntSetPriority, %function
 1363              	CyIntSetPriority:
 1364              	.LFB24:
2915:Generated_Source\PSoC4/CyLib.c **** 
2916:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2917:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetPriority
2918:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2919:Generated_Source\PSoC4/CyLib.c **** *
2920:Generated_Source\PSoC4/CyLib.c **** *  Sets the priority of the interrupt.
2921:Generated_Source\PSoC4/CyLib.c **** *
2922:Generated_Source\PSoC4/CyLib.c **** *  \param priority: Priority of the interrupt. 0 - 3, 0 being the highest.
2923:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the interrupt, 0 - 31.
2924:Generated_Source\PSoC4/CyLib.c **** *
2925:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2926:Generated_Source\PSoC4/CyLib.c **** void CyIntSetPriority(uint8 number, uint8 priority)
2927:Generated_Source\PSoC4/CyLib.c **** {
 1365              		.loc 1 2927 0
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 24
 1368              		@ frame_needed = 1, uses_anonymous_args = 0
 1369 0000 90B5     		push	{r4, r7, lr}
 1370              		.cfi_def_cfa_offset 12
 1371              		.cfi_offset 4, -12
 1372              		.cfi_offset 7, -8
 1373              		.cfi_offset 14, -4
 1374 0002 87B0     		sub	sp, sp, #28
 1375              		.cfi_def_cfa_offset 40
 1376 0004 00AF     		add	r7, sp, #0
 1377              		.cfi_def_cfa_register 7
 1378 0006 0200     		movs	r2, r0
 1379 0008 FB1D     		adds	r3, r7, #7
 1380 000a 1A70     		strb	r2, [r3]
 1381 000c BB1D     		adds	r3, r7, #6
 1382 000e 0A1C     		adds	r2, r1, #0
 1383 0010 1A70     		strb	r2, [r3]
2928:Generated_Source\PSoC4/CyLib.c ****     uint8 interruptState;
2929:Generated_Source\PSoC4/CyLib.c ****     uint32 shift;
2930:Generated_Source\PSoC4/CyLib.c ****     uint32 value;
2931:Generated_Source\PSoC4/CyLib.c **** 
2932:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(priority <= CY_MIN_PRIORITY);
 1384              		.loc 1 2932 0
 1385 0012 BB1D     		adds	r3, r7, #6
 1386 0014 1B78     		ldrb	r3, [r3]
 1387 0016 032B     		cmp	r3, #3
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 77


 1388 0018 02D9     		bls	.L84
 1389              		.loc 1 2932 0 is_stmt 0 discriminator 1
 1390 001a 0020     		movs	r0, #0
 1391 001c FFF7FEFF 		bl	CyHalt
 1392              	.L84:
2933:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1393              		.loc 1 2933 0 is_stmt 1
 1394 0020 FB1D     		adds	r3, r7, #7
 1395 0022 1B78     		ldrb	r3, [r3]
 1396 0024 1F2B     		cmp	r3, #31
 1397 0026 02D9     		bls	.L85
 1398              		.loc 1 2933 0 is_stmt 0 discriminator 1
 1399 0028 0020     		movs	r0, #0
 1400 002a FFF7FEFF 		bl	CyHalt
 1401              	.L85:
2934:Generated_Source\PSoC4/CyLib.c **** 
2935:Generated_Source\PSoC4/CyLib.c ****     shift = CY_INT_PRIORITY_SHIFT(number);
 1402              		.loc 1 2935 0 is_stmt 1
 1403 002e FB1D     		adds	r3, r7, #7
 1404 0030 1B78     		ldrb	r3, [r3]
 1405 0032 0322     		movs	r2, #3
 1406 0034 1340     		ands	r3, r2
 1407 0036 DB00     		lsls	r3, r3, #3
 1408 0038 0633     		adds	r3, r3, #6
 1409 003a 7B61     		str	r3, [r7, #20]
2936:Generated_Source\PSoC4/CyLib.c **** 
2937:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 1410              		.loc 1 2937 0
 1411 003c 1323     		movs	r3, #19
 1412 003e FC18     		adds	r4, r7, r3
 1413 0040 FFF7FEFF 		bl	CyEnterCriticalSection
 1414 0044 0300     		movs	r3, r0
 1415 0046 2370     		strb	r3, [r4]
2938:Generated_Source\PSoC4/CyLib.c **** 
2939:Generated_Source\PSoC4/CyLib.c ****     value = CY_INT_PRIORITY_REG(number);
 1416              		.loc 1 2939 0
 1417 0048 FB1D     		adds	r3, r7, #7
 1418 004a 1B78     		ldrb	r3, [r3]
 1419 004c 9B08     		lsrs	r3, r3, #2
 1420 004e DBB2     		uxtb	r3, r3
 1421 0050 9B00     		lsls	r3, r3, #2
 1422 0052 144A     		ldr	r2, .L86
 1423 0054 9446     		mov	ip, r2
 1424 0056 6344     		add	r3, r3, ip
 1425 0058 1B68     		ldr	r3, [r3]
 1426 005a FB60     		str	r3, [r7, #12]
2940:Generated_Source\PSoC4/CyLib.c ****     value &= (uint32)(~((uint32)(CY_INT_PRIORITY_MASK << shift)));
 1427              		.loc 1 2940 0
 1428 005c 0322     		movs	r2, #3
 1429 005e 7B69     		ldr	r3, [r7, #20]
 1430 0060 9A40     		lsls	r2, r2, r3
 1431 0062 1300     		movs	r3, r2
 1432 0064 DA43     		mvns	r2, r3
 1433 0066 FB68     		ldr	r3, [r7, #12]
 1434 0068 1340     		ands	r3, r2
 1435 006a FB60     		str	r3, [r7, #12]
2941:Generated_Source\PSoC4/CyLib.c ****     value |= ((uint32)priority << shift);
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 78


 1436              		.loc 1 2941 0
 1437 006c BB1D     		adds	r3, r7, #6
 1438 006e 1A78     		ldrb	r2, [r3]
 1439 0070 7B69     		ldr	r3, [r7, #20]
 1440 0072 9A40     		lsls	r2, r2, r3
 1441 0074 1300     		movs	r3, r2
 1442 0076 FA68     		ldr	r2, [r7, #12]
 1443 0078 1343     		orrs	r3, r2
 1444 007a FB60     		str	r3, [r7, #12]
2942:Generated_Source\PSoC4/CyLib.c ****     CY_INT_PRIORITY_REG(number) = value;
 1445              		.loc 1 2942 0
 1446 007c FB1D     		adds	r3, r7, #7
 1447 007e 1B78     		ldrb	r3, [r3]
 1448 0080 9B08     		lsrs	r3, r3, #2
 1449 0082 DBB2     		uxtb	r3, r3
 1450 0084 9B00     		lsls	r3, r3, #2
 1451 0086 074A     		ldr	r2, .L86
 1452 0088 9446     		mov	ip, r2
 1453 008a 6344     		add	r3, r3, ip
 1454 008c FA68     		ldr	r2, [r7, #12]
 1455 008e 1A60     		str	r2, [r3]
2943:Generated_Source\PSoC4/CyLib.c **** 
2944:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 1456              		.loc 1 2944 0
 1457 0090 1323     		movs	r3, #19
 1458 0092 FB18     		adds	r3, r7, r3
 1459 0094 1B78     		ldrb	r3, [r3]
 1460 0096 1800     		movs	r0, r3
 1461 0098 FFF7FEFF 		bl	CyExitCriticalSection
2945:Generated_Source\PSoC4/CyLib.c **** }
 1462              		.loc 1 2945 0
 1463 009c C046     		nop
 1464 009e BD46     		mov	sp, r7
 1465 00a0 07B0     		add	sp, sp, #28
 1466              		@ sp needed
 1467 00a2 90BD     		pop	{r4, r7, pc}
 1468              	.L87:
 1469              		.align	2
 1470              	.L86:
 1471 00a4 00E400E0 		.word	-536812544
 1472              		.cfi_endproc
 1473              	.LFE24:
 1474              		.size	CyIntSetPriority, .-CyIntSetPriority
 1475              		.section	.text.CyIntGetPriority,"ax",%progbits
 1476              		.align	2
 1477              		.global	CyIntGetPriority
 1478              		.code	16
 1479              		.thumb_func
 1480              		.type	CyIntGetPriority, %function
 1481              	CyIntGetPriority:
 1482              	.LFB25:
2946:Generated_Source\PSoC4/CyLib.c **** 
2947:Generated_Source\PSoC4/CyLib.c **** 
2948:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2949:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetPriority
2950:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2951:Generated_Source\PSoC4/CyLib.c **** *
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 79


2952:Generated_Source\PSoC4/CyLib.c **** *  Gets the priority of the interrupt.
2953:Generated_Source\PSoC4/CyLib.c **** *
2954:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the interrupt, 0 - 31.
2955:Generated_Source\PSoC4/CyLib.c **** *
2956:Generated_Source\PSoC4/CyLib.c **** * \return
2957:Generated_Source\PSoC4/CyLib.c **** *  Priority of the interrupt. 0 - 3, 0 being the highest.
2958:Generated_Source\PSoC4/CyLib.c **** *
2959:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2960:Generated_Source\PSoC4/CyLib.c **** uint8 CyIntGetPriority(uint8 number)
2961:Generated_Source\PSoC4/CyLib.c **** {
 1483              		.loc 1 2961 0
 1484              		.cfi_startproc
 1485              		@ args = 0, pretend = 0, frame = 16
 1486              		@ frame_needed = 1, uses_anonymous_args = 0
 1487 0000 80B5     		push	{r7, lr}
 1488              		.cfi_def_cfa_offset 8
 1489              		.cfi_offset 7, -8
 1490              		.cfi_offset 14, -4
 1491 0002 84B0     		sub	sp, sp, #16
 1492              		.cfi_def_cfa_offset 24
 1493 0004 00AF     		add	r7, sp, #0
 1494              		.cfi_def_cfa_register 7
 1495 0006 0200     		movs	r2, r0
 1496 0008 FB1D     		adds	r3, r7, #7
 1497 000a 1A70     		strb	r2, [r3]
2962:Generated_Source\PSoC4/CyLib.c ****     uint8 priority;
2963:Generated_Source\PSoC4/CyLib.c **** 
2964:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1498              		.loc 1 2964 0
 1499 000c FB1D     		adds	r3, r7, #7
 1500 000e 1B78     		ldrb	r3, [r3]
 1501 0010 1F2B     		cmp	r3, #31
 1502 0012 02D9     		bls	.L89
 1503              		.loc 1 2964 0 is_stmt 0 discriminator 1
 1504 0014 0020     		movs	r0, #0
 1505 0016 FFF7FEFF 		bl	CyHalt
 1506              	.L89:
2965:Generated_Source\PSoC4/CyLib.c **** 
2966:Generated_Source\PSoC4/CyLib.c ****     priority = (uint8) (CY_INT_PRIORITY_REG(number) >> CY_INT_PRIORITY_SHIFT(number));
 1507              		.loc 1 2966 0 is_stmt 1
 1508 001a FB1D     		adds	r3, r7, #7
 1509 001c 1B78     		ldrb	r3, [r3]
 1510 001e 9B08     		lsrs	r3, r3, #2
 1511 0020 DBB2     		uxtb	r3, r3
 1512 0022 9B00     		lsls	r3, r3, #2
 1513 0024 0B4A     		ldr	r2, .L91
 1514 0026 9446     		mov	ip, r2
 1515 0028 6344     		add	r3, r3, ip
 1516 002a 1A68     		ldr	r2, [r3]
 1517 002c FB1D     		adds	r3, r7, #7
 1518 002e 1B78     		ldrb	r3, [r3]
 1519 0030 0321     		movs	r1, #3
 1520 0032 0B40     		ands	r3, r1
 1521 0034 DB00     		lsls	r3, r3, #3
 1522 0036 0633     		adds	r3, r3, #6
 1523 0038 DA40     		lsrs	r2, r2, r3
 1524 003a 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 80


 1525 003c FB18     		adds	r3, r7, r3
 1526 003e 1A70     		strb	r2, [r3]
2967:Generated_Source\PSoC4/CyLib.c **** 
2968:Generated_Source\PSoC4/CyLib.c ****     return (priority & (uint8) CY_INT_PRIORITY_MASK);
 1527              		.loc 1 2968 0
 1528 0040 0F23     		movs	r3, #15
 1529 0042 FB18     		adds	r3, r7, r3
 1530 0044 1B78     		ldrb	r3, [r3]
 1531 0046 0322     		movs	r2, #3
 1532 0048 1340     		ands	r3, r2
 1533 004a DBB2     		uxtb	r3, r3
2969:Generated_Source\PSoC4/CyLib.c **** }
 1534              		.loc 1 2969 0
 1535 004c 1800     		movs	r0, r3
 1536 004e BD46     		mov	sp, r7
 1537 0050 04B0     		add	sp, sp, #16
 1538              		@ sp needed
 1539 0052 80BD     		pop	{r7, pc}
 1540              	.L92:
 1541              		.align	2
 1542              	.L91:
 1543 0054 00E400E0 		.word	-536812544
 1544              		.cfi_endproc
 1545              	.LFE25:
 1546              		.size	CyIntGetPriority, .-CyIntGetPriority
 1547              		.section	.text.CyIntEnable,"ax",%progbits
 1548              		.align	2
 1549              		.global	CyIntEnable
 1550              		.code	16
 1551              		.thumb_func
 1552              		.type	CyIntEnable, %function
 1553              	CyIntEnable:
 1554              	.LFB26:
2970:Generated_Source\PSoC4/CyLib.c **** 
2971:Generated_Source\PSoC4/CyLib.c **** 
2972:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2973:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntEnable
2974:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2975:Generated_Source\PSoC4/CyLib.c **** *
2976:Generated_Source\PSoC4/CyLib.c **** *  Enables the specified interrupt number.
2977:Generated_Source\PSoC4/CyLib.c **** *
2978:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number
2979:Generated_Source\PSoC4/CyLib.c **** *
2980:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2981:Generated_Source\PSoC4/CyLib.c **** void CyIntEnable(uint8 number)
2982:Generated_Source\PSoC4/CyLib.c **** {
 1555              		.loc 1 2982 0
 1556              		.cfi_startproc
 1557              		@ args = 0, pretend = 0, frame = 8
 1558              		@ frame_needed = 1, uses_anonymous_args = 0
 1559 0000 80B5     		push	{r7, lr}
 1560              		.cfi_def_cfa_offset 8
 1561              		.cfi_offset 7, -8
 1562              		.cfi_offset 14, -4
 1563 0002 82B0     		sub	sp, sp, #8
 1564              		.cfi_def_cfa_offset 16
 1565 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 81


 1566              		.cfi_def_cfa_register 7
 1567 0006 0200     		movs	r2, r0
 1568 0008 FB1D     		adds	r3, r7, #7
 1569 000a 1A70     		strb	r2, [r3]
2983:Generated_Source\PSoC4/CyLib.c ****     CY_INT_ENABLE_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1570              		.loc 1 2983 0
 1571 000c 064B     		ldr	r3, .L94
 1572 000e FA1D     		adds	r2, r7, #7
 1573 0010 1278     		ldrb	r2, [r2]
 1574 0012 1F21     		movs	r1, #31
 1575 0014 0A40     		ands	r2, r1
 1576 0016 0121     		movs	r1, #1
 1577 0018 9140     		lsls	r1, r1, r2
 1578 001a 0A00     		movs	r2, r1
 1579 001c 1A60     		str	r2, [r3]
2984:Generated_Source\PSoC4/CyLib.c **** }
 1580              		.loc 1 2984 0
 1581 001e C046     		nop
 1582 0020 BD46     		mov	sp, r7
 1583 0022 02B0     		add	sp, sp, #8
 1584              		@ sp needed
 1585 0024 80BD     		pop	{r7, pc}
 1586              	.L95:
 1587 0026 C046     		.align	2
 1588              	.L94:
 1589 0028 00E100E0 		.word	-536813312
 1590              		.cfi_endproc
 1591              	.LFE26:
 1592              		.size	CyIntEnable, .-CyIntEnable
 1593              		.section	.text.CyIntGetState,"ax",%progbits
 1594              		.align	2
 1595              		.global	CyIntGetState
 1596              		.code	16
 1597              		.thumb_func
 1598              		.type	CyIntGetState, %function
 1599              	CyIntGetState:
 1600              	.LFB27:
2985:Generated_Source\PSoC4/CyLib.c **** 
2986:Generated_Source\PSoC4/CyLib.c **** 
2987:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2988:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetState
2989:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2990:Generated_Source\PSoC4/CyLib.c **** *
2991:Generated_Source\PSoC4/CyLib.c **** *  Gets the enable state of the specified interrupt number.
2992:Generated_Source\PSoC4/CyLib.c **** *
2993:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2994:Generated_Source\PSoC4/CyLib.c **** *
2995:Generated_Source\PSoC4/CyLib.c **** * \return
2996:Generated_Source\PSoC4/CyLib.c **** *  Enable status: 1 if enabled, 0 if disabled
2997:Generated_Source\PSoC4/CyLib.c **** *
2998:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2999:Generated_Source\PSoC4/CyLib.c **** uint8 CyIntGetState(uint8 number)
3000:Generated_Source\PSoC4/CyLib.c **** {
 1601              		.loc 1 3000 0
 1602              		.cfi_startproc
 1603              		@ args = 0, pretend = 0, frame = 8
 1604              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 82


 1605 0000 80B5     		push	{r7, lr}
 1606              		.cfi_def_cfa_offset 8
 1607              		.cfi_offset 7, -8
 1608              		.cfi_offset 14, -4
 1609 0002 82B0     		sub	sp, sp, #8
 1610              		.cfi_def_cfa_offset 16
 1611 0004 00AF     		add	r7, sp, #0
 1612              		.cfi_def_cfa_register 7
 1613 0006 0200     		movs	r2, r0
 1614 0008 FB1D     		adds	r3, r7, #7
 1615 000a 1A70     		strb	r2, [r3]
3001:Generated_Source\PSoC4/CyLib.c ****     /* Get state of interrupt. */
3002:Generated_Source\PSoC4/CyLib.c ****     return ((0u != (CY_INT_ENABLE_REG & ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number)))) ?
 1616              		.loc 1 3002 0
 1617 000c 074B     		ldr	r3, .L98
 1618 000e 1A68     		ldr	r2, [r3]
 1619 0010 FB1D     		adds	r3, r7, #7
 1620 0012 1B78     		ldrb	r3, [r3]
 1621 0014 1F21     		movs	r1, #31
 1622 0016 0B40     		ands	r3, r1
 1623 0018 DA40     		lsrs	r2, r2, r3
 1624 001a 1300     		movs	r3, r2
 1625 001c DBB2     		uxtb	r3, r3
 1626 001e 0122     		movs	r2, #1
 1627 0020 1340     		ands	r3, r2
 1628 0022 DBB2     		uxtb	r3, r3
3003:Generated_Source\PSoC4/CyLib.c **** }
 1629              		.loc 1 3003 0
 1630 0024 1800     		movs	r0, r3
 1631 0026 BD46     		mov	sp, r7
 1632 0028 02B0     		add	sp, sp, #8
 1633              		@ sp needed
 1634 002a 80BD     		pop	{r7, pc}
 1635              	.L99:
 1636              		.align	2
 1637              	.L98:
 1638 002c 00E100E0 		.word	-536813312
 1639              		.cfi_endproc
 1640              	.LFE27:
 1641              		.size	CyIntGetState, .-CyIntGetState
 1642              		.section	.text.CyIntDisable,"ax",%progbits
 1643              		.align	2
 1644              		.global	CyIntDisable
 1645              		.code	16
 1646              		.thumb_func
 1647              		.type	CyIntDisable, %function
 1648              	CyIntDisable:
 1649              	.LFB28:
3004:Generated_Source\PSoC4/CyLib.c **** 
3005:Generated_Source\PSoC4/CyLib.c **** 
3006:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3007:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntDisable
3008:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3009:Generated_Source\PSoC4/CyLib.c **** *
3010:Generated_Source\PSoC4/CyLib.c **** *   Disables the specified interrupt number.
3011:Generated_Source\PSoC4/CyLib.c **** *
3012:Generated_Source\PSoC4/CyLib.c **** *   \param number: Valid range [0-31].  Interrupt number.
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 83


3013:Generated_Source\PSoC4/CyLib.c **** *
3014:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3015:Generated_Source\PSoC4/CyLib.c **** void CyIntDisable(uint8 number)
3016:Generated_Source\PSoC4/CyLib.c **** {
 1650              		.loc 1 3016 0
 1651              		.cfi_startproc
 1652              		@ args = 0, pretend = 0, frame = 8
 1653              		@ frame_needed = 1, uses_anonymous_args = 0
 1654 0000 80B5     		push	{r7, lr}
 1655              		.cfi_def_cfa_offset 8
 1656              		.cfi_offset 7, -8
 1657              		.cfi_offset 14, -4
 1658 0002 82B0     		sub	sp, sp, #8
 1659              		.cfi_def_cfa_offset 16
 1660 0004 00AF     		add	r7, sp, #0
 1661              		.cfi_def_cfa_register 7
 1662 0006 0200     		movs	r2, r0
 1663 0008 FB1D     		adds	r3, r7, #7
 1664 000a 1A70     		strb	r2, [r3]
3017:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLEAR_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1665              		.loc 1 3017 0
 1666 000c 064B     		ldr	r3, .L101
 1667 000e FA1D     		adds	r2, r7, #7
 1668 0010 1278     		ldrb	r2, [r2]
 1669 0012 1F21     		movs	r1, #31
 1670 0014 0A40     		ands	r2, r1
 1671 0016 0121     		movs	r1, #1
 1672 0018 9140     		lsls	r1, r1, r2
 1673 001a 0A00     		movs	r2, r1
 1674 001c 1A60     		str	r2, [r3]
3018:Generated_Source\PSoC4/CyLib.c **** }
 1675              		.loc 1 3018 0
 1676 001e C046     		nop
 1677 0020 BD46     		mov	sp, r7
 1678 0022 02B0     		add	sp, sp, #8
 1679              		@ sp needed
 1680 0024 80BD     		pop	{r7, pc}
 1681              	.L102:
 1682 0026 C046     		.align	2
 1683              	.L101:
 1684 0028 80E100E0 		.word	-536813184
 1685              		.cfi_endproc
 1686              	.LFE28:
 1687              		.size	CyIntDisable, .-CyIntDisable
 1688              		.section	.text.CyIntSetPending,"ax",%progbits
 1689              		.align	2
 1690              		.global	CyIntSetPending
 1691              		.code	16
 1692              		.thumb_func
 1693              		.type	CyIntSetPending, %function
 1694              	CyIntSetPending:
 1695              	.LFB29:
3019:Generated_Source\PSoC4/CyLib.c **** 
3020:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3021:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetPending
3022:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3023:Generated_Source\PSoC4/CyLib.c **** *
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 84


3024:Generated_Source\PSoC4/CyLib.c **** *  Forces the specified interrupt number to be pending.
3025:Generated_Source\PSoC4/CyLib.c **** *
3026:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
3027:Generated_Source\PSoC4/CyLib.c **** *
3028:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3029:Generated_Source\PSoC4/CyLib.c **** void CyIntSetPending(uint8 number)
3030:Generated_Source\PSoC4/CyLib.c **** {
 1696              		.loc 1 3030 0
 1697              		.cfi_startproc
 1698              		@ args = 0, pretend = 0, frame = 8
 1699              		@ frame_needed = 1, uses_anonymous_args = 0
 1700 0000 80B5     		push	{r7, lr}
 1701              		.cfi_def_cfa_offset 8
 1702              		.cfi_offset 7, -8
 1703              		.cfi_offset 14, -4
 1704 0002 82B0     		sub	sp, sp, #8
 1705              		.cfi_def_cfa_offset 16
 1706 0004 00AF     		add	r7, sp, #0
 1707              		.cfi_def_cfa_register 7
 1708 0006 0200     		movs	r2, r0
 1709 0008 FB1D     		adds	r3, r7, #7
 1710 000a 1A70     		strb	r2, [r3]
3031:Generated_Source\PSoC4/CyLib.c ****     CY_INT_SET_PEND_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1711              		.loc 1 3031 0
 1712 000c 064B     		ldr	r3, .L104
 1713 000e FA1D     		adds	r2, r7, #7
 1714 0010 1278     		ldrb	r2, [r2]
 1715 0012 1F21     		movs	r1, #31
 1716 0014 0A40     		ands	r2, r1
 1717 0016 0121     		movs	r1, #1
 1718 0018 9140     		lsls	r1, r1, r2
 1719 001a 0A00     		movs	r2, r1
 1720 001c 1A60     		str	r2, [r3]
3032:Generated_Source\PSoC4/CyLib.c **** }
 1721              		.loc 1 3032 0
 1722 001e C046     		nop
 1723 0020 BD46     		mov	sp, r7
 1724 0022 02B0     		add	sp, sp, #8
 1725              		@ sp needed
 1726 0024 80BD     		pop	{r7, pc}
 1727              	.L105:
 1728 0026 C046     		.align	2
 1729              	.L104:
 1730 0028 00E200E0 		.word	-536813056
 1731              		.cfi_endproc
 1732              	.LFE29:
 1733              		.size	CyIntSetPending, .-CyIntSetPending
 1734              		.section	.text.CyIntClearPending,"ax",%progbits
 1735              		.align	2
 1736              		.global	CyIntClearPending
 1737              		.code	16
 1738              		.thumb_func
 1739              		.type	CyIntClearPending, %function
 1740              	CyIntClearPending:
 1741              	.LFB30:
3033:Generated_Source\PSoC4/CyLib.c **** 
3034:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 85


3035:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3036:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntClearPending
3037:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3038:Generated_Source\PSoC4/CyLib.c **** *
3039:Generated_Source\PSoC4/CyLib.c **** *  Clears any pending interrupt for the specified interrupt number.
3040:Generated_Source\PSoC4/CyLib.c **** *
3041:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
3042:Generated_Source\PSoC4/CyLib.c **** *
3043:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3044:Generated_Source\PSoC4/CyLib.c **** void CyIntClearPending(uint8 number)
3045:Generated_Source\PSoC4/CyLib.c **** {
 1742              		.loc 1 3045 0
 1743              		.cfi_startproc
 1744              		@ args = 0, pretend = 0, frame = 8
 1745              		@ frame_needed = 1, uses_anonymous_args = 0
 1746 0000 80B5     		push	{r7, lr}
 1747              		.cfi_def_cfa_offset 8
 1748              		.cfi_offset 7, -8
 1749              		.cfi_offset 14, -4
 1750 0002 82B0     		sub	sp, sp, #8
 1751              		.cfi_def_cfa_offset 16
 1752 0004 00AF     		add	r7, sp, #0
 1753              		.cfi_def_cfa_register 7
 1754 0006 0200     		movs	r2, r0
 1755 0008 FB1D     		adds	r3, r7, #7
 1756 000a 1A70     		strb	r2, [r3]
3046:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLR_PEND_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1757              		.loc 1 3046 0
 1758 000c 064B     		ldr	r3, .L107
 1759 000e FA1D     		adds	r2, r7, #7
 1760 0010 1278     		ldrb	r2, [r2]
 1761 0012 1F21     		movs	r1, #31
 1762 0014 0A40     		ands	r2, r1
 1763 0016 0121     		movs	r1, #1
 1764 0018 9140     		lsls	r1, r1, r2
 1765 001a 0A00     		movs	r2, r1
 1766 001c 1A60     		str	r2, [r3]
3047:Generated_Source\PSoC4/CyLib.c **** }
 1767              		.loc 1 3047 0
 1768 001e C046     		nop
 1769 0020 BD46     		mov	sp, r7
 1770 0022 02B0     		add	sp, sp, #8
 1771              		@ sp needed
 1772 0024 80BD     		pop	{r7, pc}
 1773              	.L108:
 1774 0026 C046     		.align	2
 1775              	.L107:
 1776 0028 80E200E0 		.word	-536812928
 1777              		.cfi_endproc
 1778              	.LFE30:
 1779              		.size	CyIntClearPending, .-CyIntClearPending
 1780              		.section	.text.CyHalt,"ax",%progbits
 1781              		.align	2
 1782              		.global	CyHalt
 1783              		.code	16
 1784              		.thumb_func
 1785              		.type	CyHalt, %function
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 86


 1786              	CyHalt:
 1787              	.LFB31:
3048:Generated_Source\PSoC4/CyLib.c **** 
3049:Generated_Source\PSoC4/CyLib.c **** 
3050:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3051:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyHalt
3052:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3053:Generated_Source\PSoC4/CyLib.c **** *
3054:Generated_Source\PSoC4/CyLib.c **** *  Halts the CPU.
3055:Generated_Source\PSoC4/CyLib.c **** *
3056:Generated_Source\PSoC4/CyLib.c **** *  \param reason: Value to be used during debugging.
3057:Generated_Source\PSoC4/CyLib.c **** *
3058:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3059:Generated_Source\PSoC4/CyLib.c **** void CyHalt(uint8 reason)
3060:Generated_Source\PSoC4/CyLib.c **** {
 1788              		.loc 1 3060 0
 1789              		.cfi_startproc
 1790              		@ args = 0, pretend = 0, frame = 8
 1791              		@ frame_needed = 1, uses_anonymous_args = 0
 1792 0000 80B5     		push	{r7, lr}
 1793              		.cfi_def_cfa_offset 8
 1794              		.cfi_offset 7, -8
 1795              		.cfi_offset 14, -4
 1796 0002 82B0     		sub	sp, sp, #8
 1797              		.cfi_def_cfa_offset 16
 1798 0004 00AF     		add	r7, sp, #0
 1799              		.cfi_def_cfa_register 7
 1800 0006 0200     		movs	r2, r0
 1801 0008 FB1D     		adds	r3, r7, #7
 1802 000a 1A70     		strb	r2, [r3]
3061:Generated_Source\PSoC4/CyLib.c ****     if(0u != reason)
3062:Generated_Source\PSoC4/CyLib.c ****     {
3063:Generated_Source\PSoC4/CyLib.c ****         /* To remove unreferenced local variable warning */
3064:Generated_Source\PSoC4/CyLib.c ****     }
3065:Generated_Source\PSoC4/CyLib.c **** 
3066:Generated_Source\PSoC4/CyLib.c ****     #if defined (__ARMCC_VERSION)
3067:Generated_Source\PSoC4/CyLib.c ****         __breakpoint(0x0);
3068:Generated_Source\PSoC4/CyLib.c ****     #elif defined(__GNUC__) || defined (__ICCARM__)
3069:Generated_Source\PSoC4/CyLib.c ****         __asm("    bkpt    1");
 1803              		.loc 1 3069 0
 1804              		.syntax divided
 1805              	@ 3069 "Generated_Source\PSoC4\CyLib.c" 1
 1806 000c 01BE     		    bkpt    1
 1807              	@ 0 "" 2
3070:Generated_Source\PSoC4/CyLib.c ****     #elif defined(__C51__)
3071:Generated_Source\PSoC4/CyLib.c ****         CYDEV_HALT_CPU;
3072:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (__ARMCC_VERSION) */
3073:Generated_Source\PSoC4/CyLib.c **** }
 1808              		.loc 1 3073 0
 1809              		.thumb
 1810              		.syntax unified
 1811 000e C046     		nop
 1812 0010 BD46     		mov	sp, r7
 1813 0012 02B0     		add	sp, sp, #8
 1814              		@ sp needed
 1815 0014 80BD     		pop	{r7, pc}
 1816              		.cfi_endproc
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 87


 1817              	.LFE31:
 1818              		.size	CyHalt, .-CyHalt
 1819 0016 C046     		.section	.text.CySoftwareReset,"ax",%progbits
 1820              		.align	2
 1821              		.global	CySoftwareReset
 1822              		.code	16
 1823              		.thumb_func
 1824              		.type	CySoftwareReset, %function
 1825              	CySoftwareReset:
 1826              	.LFB32:
3074:Generated_Source\PSoC4/CyLib.c **** 
3075:Generated_Source\PSoC4/CyLib.c **** 
3076:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3077:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySoftwareReset
3078:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3079:Generated_Source\PSoC4/CyLib.c **** *
3080:Generated_Source\PSoC4/CyLib.c **** *  Forces a software reset of the device.
3081:Generated_Source\PSoC4/CyLib.c **** *
3082:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3083:Generated_Source\PSoC4/CyLib.c **** void CySoftwareReset(void)
3084:Generated_Source\PSoC4/CyLib.c **** {
 1827              		.loc 1 3084 0
 1828              		.cfi_startproc
 1829              		@ args = 0, pretend = 0, frame = 0
 1830              		@ frame_needed = 1, uses_anonymous_args = 0
 1831 0000 80B5     		push	{r7, lr}
 1832              		.cfi_def_cfa_offset 8
 1833              		.cfi_offset 7, -8
 1834              		.cfi_offset 14, -4
 1835 0002 00AF     		add	r7, sp, #0
 1836              		.cfi_def_cfa_register 7
3085:Generated_Source\PSoC4/CyLib.c ****     /***************************************************************************
3086:Generated_Source\PSoC4/CyLib.c ****     * Setting the system reset request bit. The vector key value must be written
3087:Generated_Source\PSoC4/CyLib.c ****     * to the register, otherwise the register write is unpredictable.
3088:Generated_Source\PSoC4/CyLib.c ****     ***************************************************************************/
3089:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_AIRCR_REG = (CY_SYS_AIRCR_REG & (uint32)(~CY_SYS_AIRCR_VECTKEY_MASK)) |
 1837              		.loc 1 3089 0
 1838 0004 054B     		ldr	r3, .L111
 1839 0006 054A     		ldr	r2, .L111
 1840 0008 1268     		ldr	r2, [r2]
 1841 000a 1204     		lsls	r2, r2, #16
 1842 000c 120C     		lsrs	r2, r2, #16
3090:Generated_Source\PSoC4/CyLib.c ****                             CY_SYS_AIRCR_VECTKEY | CY_SYS_AIRCR_SYSRESETREQ;
 1843              		.loc 1 3090 0
 1844 000e 0449     		ldr	r1, .L111+4
 1845 0010 0A43     		orrs	r2, r1
3089:Generated_Source\PSoC4/CyLib.c ****                             CY_SYS_AIRCR_VECTKEY | CY_SYS_AIRCR_SYSRESETREQ;
 1846              		.loc 1 3089 0
 1847 0012 1A60     		str	r2, [r3]
3091:Generated_Source\PSoC4/CyLib.c **** }
 1848              		.loc 1 3091 0
 1849 0014 C046     		nop
 1850 0016 BD46     		mov	sp, r7
 1851              		@ sp needed
 1852 0018 80BD     		pop	{r7, pc}
 1853              	.L112:
 1854 001a C046     		.align	2
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 88


 1855              	.L111:
 1856 001c 0CED00E0 		.word	-536810228
 1857 0020 0400FA05 		.word	100270084
 1858              		.cfi_endproc
 1859              	.LFE32:
 1860              		.size	CySoftwareReset, .-CySoftwareReset
 1861              		.section	.text.CyDelay,"ax",%progbits
 1862              		.align	2
 1863              		.global	CyDelay
 1864              		.code	16
 1865              		.thumb_func
 1866              		.type	CyDelay, %function
 1867              	CyDelay:
 1868              	.LFB33:
3092:Generated_Source\PSoC4/CyLib.c **** 
3093:Generated_Source\PSoC4/CyLib.c **** 
3094:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3095:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelay
3096:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3097:Generated_Source\PSoC4/CyLib.c **** *
3098:Generated_Source\PSoC4/CyLib.c **** *  Blocks for milliseconds.
3099:Generated_Source\PSoC4/CyLib.c **** *
3100:Generated_Source\PSoC4/CyLib.c **** *  \param milliseconds: number of milliseconds to delay.
3101:Generated_Source\PSoC4/CyLib.c **** *
3102:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3103:Generated_Source\PSoC4/CyLib.c **** void CyDelay(uint32 milliseconds)
3104:Generated_Source\PSoC4/CyLib.c **** {
 1869              		.loc 1 3104 0
 1870              		.cfi_startproc
 1871              		@ args = 0, pretend = 0, frame = 8
 1872              		@ frame_needed = 1, uses_anonymous_args = 0
 1873 0000 80B5     		push	{r7, lr}
 1874              		.cfi_def_cfa_offset 8
 1875              		.cfi_offset 7, -8
 1876              		.cfi_offset 14, -4
 1877 0002 82B0     		sub	sp, sp, #8
 1878              		.cfi_def_cfa_offset 16
 1879 0004 00AF     		add	r7, sp, #0
 1880              		.cfi_def_cfa_register 7
 1881 0006 7860     		str	r0, [r7, #4]
3105:Generated_Source\PSoC4/CyLib.c ****     while (milliseconds > CY_DELAY_MS_OVERFLOW)
 1882              		.loc 1 3105 0
 1883 0008 09E0     		b	.L114
 1884              	.L115:
3106:Generated_Source\PSoC4/CyLib.c ****     {
3107:Generated_Source\PSoC4/CyLib.c ****         /* This loop prevents overflow.
3108:Generated_Source\PSoC4/CyLib.c ****          * At 100MHz, milliseconds * cydelayFreqKhz overflows at about 42 seconds
3109:Generated_Source\PSoC4/CyLib.c ****          */
3110:Generated_Source\PSoC4/CyLib.c ****         CyDelayCycles(cydelay32kMs);
 1885              		.loc 1 3110 0
 1886 000a 0D4B     		ldr	r3, .L116
 1887 000c 1B68     		ldr	r3, [r3]
 1888 000e 1800     		movs	r0, r3
 1889 0010 FFF7FEFF 		bl	CyDelayCycles
3111:Generated_Source\PSoC4/CyLib.c ****         milliseconds -= CY_DELAY_MS_OVERFLOW;
 1890              		.loc 1 3111 0
 1891 0014 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 89


 1892 0016 0B4A     		ldr	r2, .L116+4
 1893 0018 9446     		mov	ip, r2
 1894 001a 6344     		add	r3, r3, ip
 1895 001c 7B60     		str	r3, [r7, #4]
 1896              	.L114:
3105:Generated_Source\PSoC4/CyLib.c ****     while (milliseconds > CY_DELAY_MS_OVERFLOW)
 1897              		.loc 1 3105 0
 1898 001e 7A68     		ldr	r2, [r7, #4]
 1899 0020 8023     		movs	r3, #128
 1900 0022 1B02     		lsls	r3, r3, #8
 1901 0024 9A42     		cmp	r2, r3
 1902 0026 F0D8     		bhi	.L115
3112:Generated_Source\PSoC4/CyLib.c ****     }
3113:Generated_Source\PSoC4/CyLib.c **** 
3114:Generated_Source\PSoC4/CyLib.c ****     CyDelayCycles(milliseconds * cydelayFreqKhz);
 1903              		.loc 1 3114 0
 1904 0028 074B     		ldr	r3, .L116+8
 1905 002a 1B68     		ldr	r3, [r3]
 1906 002c 7A68     		ldr	r2, [r7, #4]
 1907 002e 5343     		muls	r3, r2
 1908 0030 1800     		movs	r0, r3
 1909 0032 FFF7FEFF 		bl	CyDelayCycles
3115:Generated_Source\PSoC4/CyLib.c **** }
 1910              		.loc 1 3115 0
 1911 0036 C046     		nop
 1912 0038 BD46     		mov	sp, r7
 1913 003a 02B0     		add	sp, sp, #8
 1914              		@ sp needed
 1915 003c 80BD     		pop	{r7, pc}
 1916              	.L117:
 1917 003e C046     		.align	2
 1918              	.L116:
 1919 0040 00000000 		.word	cydelay32kMs
 1920 0044 0080FFFF 		.word	-32768
 1921 0048 00000000 		.word	cydelayFreqKhz
 1922              		.cfi_endproc
 1923              	.LFE33:
 1924              		.size	CyDelay, .-CyDelay
 1925              		.section	.text.CyDelayUs,"ax",%progbits
 1926              		.align	2
 1927              		.global	CyDelayUs
 1928              		.code	16
 1929              		.thumb_func
 1930              		.type	CyDelayUs, %function
 1931              	CyDelayUs:
 1932              	.LFB34:
3116:Generated_Source\PSoC4/CyLib.c **** 
3117:Generated_Source\PSoC4/CyLib.c **** 
3118:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3119:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelayUs
3120:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3121:Generated_Source\PSoC4/CyLib.c **** *  Blocks for microseconds.
3122:Generated_Source\PSoC4/CyLib.c **** *
3123:Generated_Source\PSoC4/CyLib.c **** *  \param microseconds: number of microseconds to delay.
3124:Generated_Source\PSoC4/CyLib.c **** *
3125:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3126:Generated_Source\PSoC4/CyLib.c **** void CyDelayUs(uint16 microseconds)
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 90


3127:Generated_Source\PSoC4/CyLib.c **** {
 1933              		.loc 1 3127 0
 1934              		.cfi_startproc
 1935              		@ args = 0, pretend = 0, frame = 8
 1936              		@ frame_needed = 1, uses_anonymous_args = 0
 1937 0000 80B5     		push	{r7, lr}
 1938              		.cfi_def_cfa_offset 8
 1939              		.cfi_offset 7, -8
 1940              		.cfi_offset 14, -4
 1941 0002 82B0     		sub	sp, sp, #8
 1942              		.cfi_def_cfa_offset 16
 1943 0004 00AF     		add	r7, sp, #0
 1944              		.cfi_def_cfa_register 7
 1945 0006 0200     		movs	r2, r0
 1946 0008 BB1D     		adds	r3, r7, #6
 1947 000a 1A80     		strh	r2, [r3]
3128:Generated_Source\PSoC4/CyLib.c ****     CyDelayCycles((uint32)microseconds * cydelayFreqMhz);
 1948              		.loc 1 3128 0
 1949 000c BB1D     		adds	r3, r7, #6
 1950 000e 1B88     		ldrh	r3, [r3]
 1951 0010 044A     		ldr	r2, .L119
 1952 0012 1278     		ldrb	r2, [r2]
 1953 0014 5343     		muls	r3, r2
 1954 0016 1800     		movs	r0, r3
 1955 0018 FFF7FEFF 		bl	CyDelayCycles
3129:Generated_Source\PSoC4/CyLib.c **** }
 1956              		.loc 1 3129 0
 1957 001c C046     		nop
 1958 001e BD46     		mov	sp, r7
 1959 0020 02B0     		add	sp, sp, #8
 1960              		@ sp needed
 1961 0022 80BD     		pop	{r7, pc}
 1962              	.L120:
 1963              		.align	2
 1964              	.L119:
 1965 0024 00000000 		.word	cydelayFreqMhz
 1966              		.cfi_endproc
 1967              	.LFE34:
 1968              		.size	CyDelayUs, .-CyDelayUs
 1969              		.global	__aeabi_uidiv
 1970              		.section	.text.CyDelayFreq,"ax",%progbits
 1971              		.align	2
 1972              		.global	CyDelayFreq
 1973              		.code	16
 1974              		.thumb_func
 1975              		.type	CyDelayFreq, %function
 1976              	CyDelayFreq:
 1977              	.LFB35:
3130:Generated_Source\PSoC4/CyLib.c **** 
3131:Generated_Source\PSoC4/CyLib.c **** 
3132:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3133:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelayFreq
3134:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3135:Generated_Source\PSoC4/CyLib.c **** *  Sets clock frequency for CyDelay.
3136:Generated_Source\PSoC4/CyLib.c **** *
3137:Generated_Source\PSoC4/CyLib.c **** *  \param freq: Frequency of bus clock in Hertz.
3138:Generated_Source\PSoC4/CyLib.c **** *
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 91


3139:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3140:Generated_Source\PSoC4/CyLib.c **** void CyDelayFreq(uint32 freq)
3141:Generated_Source\PSoC4/CyLib.c **** {
 1978              		.loc 1 3141 0
 1979              		.cfi_startproc
 1980              		@ args = 0, pretend = 0, frame = 8
 1981              		@ frame_needed = 1, uses_anonymous_args = 0
 1982 0000 80B5     		push	{r7, lr}
 1983              		.cfi_def_cfa_offset 8
 1984              		.cfi_offset 7, -8
 1985              		.cfi_offset 14, -4
 1986 0002 82B0     		sub	sp, sp, #8
 1987              		.cfi_def_cfa_offset 16
 1988 0004 00AF     		add	r7, sp, #0
 1989              		.cfi_def_cfa_register 7
 1990 0006 7860     		str	r0, [r7, #4]
3142:Generated_Source\PSoC4/CyLib.c ****     if (freq != 0u)
 1991              		.loc 1 3142 0
 1992 0008 7B68     		ldr	r3, [r7, #4]
 1993 000a 002B     		cmp	r3, #0
 1994 000c 03D0     		beq	.L122
3143:Generated_Source\PSoC4/CyLib.c ****     {
3144:Generated_Source\PSoC4/CyLib.c ****         cydelayFreqHz = freq;
 1995              		.loc 1 3144 0
 1996 000e 154B     		ldr	r3, .L124
 1997 0010 7A68     		ldr	r2, [r7, #4]
 1998 0012 1A60     		str	r2, [r3]
 1999 0014 02E0     		b	.L123
 2000              	.L122:
3145:Generated_Source\PSoC4/CyLib.c ****     }
3146:Generated_Source\PSoC4/CyLib.c ****     else
3147:Generated_Source\PSoC4/CyLib.c ****     {
3148:Generated_Source\PSoC4/CyLib.c ****         cydelayFreqHz = CYDEV_BCLK__SYSCLK__HZ;
 2001              		.loc 1 3148 0
 2002 0016 134B     		ldr	r3, .L124
 2003 0018 134A     		ldr	r2, .L124+4
 2004 001a 1A60     		str	r2, [r3]
 2005              	.L123:
3149:Generated_Source\PSoC4/CyLib.c ****     }
3150:Generated_Source\PSoC4/CyLib.c **** 
3151:Generated_Source\PSoC4/CyLib.c ****     cydelayFreqMhz = (uint8)((cydelayFreqHz + CY_DELAY_1M_MINUS_1_THRESHOLD) / CY_DELAY_1M_THRESHOL
 2006              		.loc 1 3151 0
 2007 001c 114B     		ldr	r3, .L124
 2008 001e 1B68     		ldr	r3, [r3]
 2009 0020 124A     		ldr	r2, .L124+8
 2010 0022 9446     		mov	ip, r2
 2011 0024 6344     		add	r3, r3, ip
 2012 0026 1249     		ldr	r1, .L124+12
 2013 0028 1800     		movs	r0, r3
 2014 002a FFF7FEFF 		bl	__aeabi_uidiv
 2015 002e 0300     		movs	r3, r0
 2016 0030 DAB2     		uxtb	r2, r3
 2017 0032 104B     		ldr	r3, .L124+16
 2018 0034 1A70     		strb	r2, [r3]
3152:Generated_Source\PSoC4/CyLib.c ****     cydelayFreqKhz = (cydelayFreqHz + CY_DELAY_1K_MINUS_1_THRESHOLD) / CY_DELAY_1K_THRESHOLD;
 2019              		.loc 1 3152 0
 2020 0036 0B4B     		ldr	r3, .L124
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 92


 2021 0038 1B68     		ldr	r3, [r3]
 2022 003a 0F4A     		ldr	r2, .L124+20
 2023 003c 9A18     		adds	r2, r3, r2
 2024 003e FA23     		movs	r3, #250
 2025 0040 9900     		lsls	r1, r3, #2
 2026 0042 1000     		movs	r0, r2
 2027 0044 FFF7FEFF 		bl	__aeabi_uidiv
 2028 0048 0300     		movs	r3, r0
 2029 004a 1A00     		movs	r2, r3
 2030 004c 0B4B     		ldr	r3, .L124+24
 2031 004e 1A60     		str	r2, [r3]
3153:Generated_Source\PSoC4/CyLib.c ****     cydelay32kMs   = CY_DELAY_MS_OVERFLOW * cydelayFreqKhz;
 2032              		.loc 1 3153 0
 2033 0050 0A4B     		ldr	r3, .L124+24
 2034 0052 1B68     		ldr	r3, [r3]
 2035 0054 DA03     		lsls	r2, r3, #15
 2036 0056 0A4B     		ldr	r3, .L124+28
 2037 0058 1A60     		str	r2, [r3]
3154:Generated_Source\PSoC4/CyLib.c **** }
 2038              		.loc 1 3154 0
 2039 005a C046     		nop
 2040 005c BD46     		mov	sp, r7
 2041 005e 02B0     		add	sp, sp, #8
 2042              		@ sp needed
 2043 0060 80BD     		pop	{r7, pc}
 2044              	.L125:
 2045 0062 C046     		.align	2
 2046              	.L124:
 2047 0064 00000000 		.word	cydelayFreqHz
 2048 0068 006CDC02 		.word	48000000
 2049 006c 3F420F00 		.word	999999
 2050 0070 40420F00 		.word	1000000
 2051 0074 00000000 		.word	cydelayFreqMhz
 2052 0078 E7030000 		.word	999
 2053 007c 00000000 		.word	cydelayFreqKhz
 2054 0080 00000000 		.word	cydelay32kMs
 2055              		.cfi_endproc
 2056              	.LFE35:
 2057              		.size	CyDelayFreq, .-CyDelayFreq
 2058              		.section	.text.CySysTickStart,"ax",%progbits
 2059              		.align	2
 2060              		.global	CySysTickStart
 2061              		.code	16
 2062              		.thumb_func
 2063              		.type	CySysTickStart, %function
 2064              	CySysTickStart:
 2065              	.LFB36:
3155:Generated_Source\PSoC4/CyLib.c **** 
3156:Generated_Source\PSoC4/CyLib.c **** 
3157:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3158:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTick_Start
3159:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3160:Generated_Source\PSoC4/CyLib.c **** *
3161:Generated_Source\PSoC4/CyLib.c **** *  Starts the system timer (SysTick): configures SysTick to generate interrupt
3162:Generated_Source\PSoC4/CyLib.c **** *  every 1 ms and enables the interrupt.
3163:Generated_Source\PSoC4/CyLib.c **** *
3164:Generated_Source\PSoC4/CyLib.c **** *  There are components (LIN, CapSense Gesture) that relies on the default
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 93


3165:Generated_Source\PSoC4/CyLib.c **** *  interval (1 ms). And that changing the interval will negatively impact
3166:Generated_Source\PSoC4/CyLib.c **** *  their functionality.
3167:Generated_Source\PSoC4/CyLib.c **** *
3168:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
3169:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
3170:Generated_Source\PSoC4/CyLib.c **** *
3171:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3172:Generated_Source\PSoC4/CyLib.c **** void CySysTickStart(void)
3173:Generated_Source\PSoC4/CyLib.c **** {
 2066              		.loc 1 3173 0
 2067              		.cfi_startproc
 2068              		@ args = 0, pretend = 0, frame = 0
 2069              		@ frame_needed = 1, uses_anonymous_args = 0
 2070 0000 80B5     		push	{r7, lr}
 2071              		.cfi_def_cfa_offset 8
 2072              		.cfi_offset 7, -8
 2073              		.cfi_offset 14, -4
 2074 0002 00AF     		add	r7, sp, #0
 2075              		.cfi_def_cfa_register 7
3174:Generated_Source\PSoC4/CyLib.c ****     if (0u == CySysTickInitVar)
 2076              		.loc 1 3174 0
 2077 0004 064B     		ldr	r3, .L128
 2078 0006 1B68     		ldr	r3, [r3]
 2079 0008 002B     		cmp	r3, #0
 2080 000a 04D1     		bne	.L127
3175:Generated_Source\PSoC4/CyLib.c ****     {
3176:Generated_Source\PSoC4/CyLib.c ****         CySysTickInit();
 2081              		.loc 1 3176 0
 2082 000c FFF7FEFF 		bl	CySysTickInit
3177:Generated_Source\PSoC4/CyLib.c ****         CySysTickInitVar = 1u;
 2083              		.loc 1 3177 0
 2084 0010 034B     		ldr	r3, .L128
 2085 0012 0122     		movs	r2, #1
 2086 0014 1A60     		str	r2, [r3]
 2087              	.L127:
3178:Generated_Source\PSoC4/CyLib.c ****     }
3179:Generated_Source\PSoC4/CyLib.c **** 
3180:Generated_Source\PSoC4/CyLib.c ****     CySysTickEnable();
 2088              		.loc 1 3180 0
 2089 0016 FFF7FEFF 		bl	CySysTickEnable
3181:Generated_Source\PSoC4/CyLib.c **** }
 2090              		.loc 1 3181 0
 2091 001a C046     		nop
 2092 001c BD46     		mov	sp, r7
 2093              		@ sp needed
 2094 001e 80BD     		pop	{r7, pc}
 2095              	.L129:
 2096              		.align	2
 2097              	.L128:
 2098 0020 00000000 		.word	CySysTickInitVar
 2099              		.cfi_endproc
 2100              	.LFE36:
 2101              		.size	CySysTickStart, .-CySysTickStart
 2102              		.section	.text.CySysTickInit,"ax",%progbits
 2103              		.align	2
 2104              		.global	CySysTickInit
 2105              		.code	16
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 94


 2106              		.thumb_func
 2107              		.type	CySysTickInit, %function
 2108              	CySysTickInit:
 2109              	.LFB37:
3182:Generated_Source\PSoC4/CyLib.c **** 
3183:Generated_Source\PSoC4/CyLib.c **** 
3184:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3185:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickInit
3186:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3187:Generated_Source\PSoC4/CyLib.c **** *
3188:Generated_Source\PSoC4/CyLib.c **** *  Initializes the callback addresses with pointers to NULL, associates the
3189:Generated_Source\PSoC4/CyLib.c **** *  SysTick system vector with the function that is responsible for calling
3190:Generated_Source\PSoC4/CyLib.c **** *  registered callback functions, configures SysTick timer to generate interrupt
3191:Generated_Source\PSoC4/CyLib.c **** *  every 1 ms.
3192:Generated_Source\PSoC4/CyLib.c **** *
3193:Generated_Source\PSoC4/CyLib.c **** *  The 1 ms interrupt interval is configured based on the frequency determined
3194:Generated_Source\PSoC4/CyLib.c **** *  by PSoC Creator at build time. If System clock frequency is changed in
3195:Generated_Source\PSoC4/CyLib.c **** *  runtime, the CyDelayFreq() with the appropriate parameter should be called.
3196:Generated_Source\PSoC4/CyLib.c **** *
3197:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
3198:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
3199:Generated_Source\PSoC4/CyLib.c **** *
3200:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3201:Generated_Source\PSoC4/CyLib.c **** void CySysTickInit(void)
3202:Generated_Source\PSoC4/CyLib.c **** {
 2110              		.loc 1 3202 0
 2111              		.cfi_startproc
 2112              		@ args = 0, pretend = 0, frame = 8
 2113              		@ frame_needed = 1, uses_anonymous_args = 0
 2114 0000 80B5     		push	{r7, lr}
 2115              		.cfi_def_cfa_offset 8
 2116              		.cfi_offset 7, -8
 2117              		.cfi_offset 14, -4
 2118 0002 82B0     		sub	sp, sp, #8
 2119              		.cfi_def_cfa_offset 16
 2120 0004 00AF     		add	r7, sp, #0
 2121              		.cfi_def_cfa_register 7
3203:Generated_Source\PSoC4/CyLib.c ****     uint32 i;
3204:Generated_Source\PSoC4/CyLib.c **** 
3205:Generated_Source\PSoC4/CyLib.c ****     for (i = 0u; i<CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
 2122              		.loc 1 3205 0
 2123 0006 0023     		movs	r3, #0
 2124 0008 7B60     		str	r3, [r7, #4]
 2125 000a 07E0     		b	.L131
 2126              	.L132:
3206:Generated_Source\PSoC4/CyLib.c ****     {
3207:Generated_Source\PSoC4/CyLib.c ****         CySysTickCallbacks[i] = (void *) 0;
 2127              		.loc 1 3207 0 discriminator 3
 2128 000c 114B     		ldr	r3, .L133
 2129 000e 7A68     		ldr	r2, [r7, #4]
 2130 0010 9200     		lsls	r2, r2, #2
 2131 0012 0021     		movs	r1, #0
 2132 0014 D150     		str	r1, [r2, r3]
3205:Generated_Source\PSoC4/CyLib.c ****     {
 2133              		.loc 1 3205 0 discriminator 3
 2134 0016 7B68     		ldr	r3, [r7, #4]
 2135 0018 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 95


 2136 001a 7B60     		str	r3, [r7, #4]
 2137              	.L131:
3205:Generated_Source\PSoC4/CyLib.c ****     {
 2138              		.loc 1 3205 0 is_stmt 0 discriminator 1
 2139 001c 7B68     		ldr	r3, [r7, #4]
 2140 001e 042B     		cmp	r3, #4
 2141 0020 F4D9     		bls	.L132
3208:Generated_Source\PSoC4/CyLib.c ****     }
3209:Generated_Source\PSoC4/CyLib.c **** 
3210:Generated_Source\PSoC4/CyLib.c ****     (void) CyIntSetSysVector(CY_INT_SYSTICK_IRQN, &CySysTickServiceCallbacks);
 2142              		.loc 1 3210 0 is_stmt 1
 2143 0022 0D4B     		ldr	r3, .L133+4
 2144 0024 1900     		movs	r1, r3
 2145 0026 0F20     		movs	r0, #15
 2146 0028 FFF7FEFF 		bl	CyIntSetSysVector
3211:Generated_Source\PSoC4/CyLib.c **** 
3212:Generated_Source\PSoC4/CyLib.c ****     #if(CY_SYSTICK_LFCLK_SOURCE)
3213:Generated_Source\PSoC4/CyLib.c ****         CySysTickSetClockSource(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK);
 2147              		.loc 1 3213 0
 2148 002c 0120     		movs	r0, #1
 2149 002e FFF7FEFF 		bl	CySysTickSetClockSource
3214:Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_SYSTICK_LFCLK_SOURCE) */
3215:Generated_Source\PSoC4/CyLib.c **** 
3216:Generated_Source\PSoC4/CyLib.c ****     CySysTickSetReload(cydelayFreqHz/1000u);
 2150              		.loc 1 3216 0
 2151 0032 0A4B     		ldr	r3, .L133+8
 2152 0034 1A68     		ldr	r2, [r3]
 2153 0036 FA23     		movs	r3, #250
 2154 0038 9900     		lsls	r1, r3, #2
 2155 003a 1000     		movs	r0, r2
 2156 003c FFF7FEFF 		bl	__aeabi_uidiv
 2157 0040 0300     		movs	r3, r0
 2158 0042 1800     		movs	r0, r3
 2159 0044 FFF7FEFF 		bl	CySysTickSetReload
3217:Generated_Source\PSoC4/CyLib.c ****     CySysTickClear();
 2160              		.loc 1 3217 0
 2161 0048 FFF7FEFF 		bl	CySysTickClear
3218:Generated_Source\PSoC4/CyLib.c **** }
 2162              		.loc 1 3218 0
 2163 004c C046     		nop
 2164 004e BD46     		mov	sp, r7
 2165 0050 02B0     		add	sp, sp, #8
 2166              		@ sp needed
 2167 0052 80BD     		pop	{r7, pc}
 2168              	.L134:
 2169              		.align	2
 2170              	.L133:
 2171 0054 00000000 		.word	CySysTickCallbacks
 2172 0058 00000000 		.word	CySysTickServiceCallbacks
 2173 005c 00000000 		.word	cydelayFreqHz
 2174              		.cfi_endproc
 2175              	.LFE37:
 2176              		.size	CySysTickInit, .-CySysTickInit
 2177              		.section	.text.CySysTickEnable,"ax",%progbits
 2178              		.align	2
 2179              		.global	CySysTickEnable
 2180              		.code	16
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 96


 2181              		.thumb_func
 2182              		.type	CySysTickEnable, %function
 2183              	CySysTickEnable:
 2184              	.LFB38:
3219:Generated_Source\PSoC4/CyLib.c **** 
3220:Generated_Source\PSoC4/CyLib.c **** 
3221:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3222:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickEnable
3223:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3224:Generated_Source\PSoC4/CyLib.c **** *
3225:Generated_Source\PSoC4/CyLib.c **** *  Enables the SysTick timer and its interrupt.
3226:Generated_Source\PSoC4/CyLib.c **** *
3227:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
3228:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
3229:Generated_Source\PSoC4/CyLib.c **** *
3230:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3231:Generated_Source\PSoC4/CyLib.c **** void CySysTickEnable(void)
3232:Generated_Source\PSoC4/CyLib.c **** {
 2185              		.loc 1 3232 0
 2186              		.cfi_startproc
 2187              		@ args = 0, pretend = 0, frame = 0
 2188              		@ frame_needed = 1, uses_anonymous_args = 0
 2189 0000 80B5     		push	{r7, lr}
 2190              		.cfi_def_cfa_offset 8
 2191              		.cfi_offset 7, -8
 2192              		.cfi_offset 14, -4
 2193 0002 00AF     		add	r7, sp, #0
 2194              		.cfi_def_cfa_register 7
3233:Generated_Source\PSoC4/CyLib.c ****     CySysTickEnableInterrupt();
 2195              		.loc 1 3233 0
 2196 0004 FFF7FEFF 		bl	CySysTickEnableInterrupt
3234:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE;
 2197              		.loc 1 3234 0
 2198 0008 044B     		ldr	r3, .L136
 2199 000a 044A     		ldr	r2, .L136
 2200 000c 1268     		ldr	r2, [r2]
 2201 000e 0121     		movs	r1, #1
 2202 0010 0A43     		orrs	r2, r1
 2203 0012 1A60     		str	r2, [r3]
3235:Generated_Source\PSoC4/CyLib.c **** }
 2204              		.loc 1 3235 0
 2205 0014 C046     		nop
 2206 0016 BD46     		mov	sp, r7
 2207              		@ sp needed
 2208 0018 80BD     		pop	{r7, pc}
 2209              	.L137:
 2210 001a C046     		.align	2
 2211              	.L136:
 2212 001c 10E000E0 		.word	-536813552
 2213              		.cfi_endproc
 2214              	.LFE38:
 2215              		.size	CySysTickEnable, .-CySysTickEnable
 2216              		.section	.text.CySysTickStop,"ax",%progbits
 2217              		.align	2
 2218              		.global	CySysTickStop
 2219              		.code	16
 2220              		.thumb_func
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 97


 2221              		.type	CySysTickStop, %function
 2222              	CySysTickStop:
 2223              	.LFB39:
3236:Generated_Source\PSoC4/CyLib.c **** 
3237:Generated_Source\PSoC4/CyLib.c **** 
3238:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3239:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickStop
3240:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3241:Generated_Source\PSoC4/CyLib.c **** *
3242:Generated_Source\PSoC4/CyLib.c **** *  Stops the system timer (SysTick).
3243:Generated_Source\PSoC4/CyLib.c **** *
3244:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
3245:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
3246:Generated_Source\PSoC4/CyLib.c **** *
3247:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3248:Generated_Source\PSoC4/CyLib.c **** void CySysTickStop(void)
3249:Generated_Source\PSoC4/CyLib.c **** {
 2224              		.loc 1 3249 0
 2225              		.cfi_startproc
 2226              		@ args = 0, pretend = 0, frame = 0
 2227              		@ frame_needed = 1, uses_anonymous_args = 0
 2228 0000 80B5     		push	{r7, lr}
 2229              		.cfi_def_cfa_offset 8
 2230              		.cfi_offset 7, -8
 2231              		.cfi_offset 14, -4
 2232 0002 00AF     		add	r7, sp, #0
 2233              		.cfi_def_cfa_register 7
3250:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE));
 2234              		.loc 1 3250 0
 2235 0004 044B     		ldr	r3, .L139
 2236 0006 044A     		ldr	r2, .L139
 2237 0008 1268     		ldr	r2, [r2]
 2238 000a 0121     		movs	r1, #1
 2239 000c 8A43     		bics	r2, r1
 2240 000e 1A60     		str	r2, [r3]
3251:Generated_Source\PSoC4/CyLib.c **** }
 2241              		.loc 1 3251 0
 2242 0010 C046     		nop
 2243 0012 BD46     		mov	sp, r7
 2244              		@ sp needed
 2245 0014 80BD     		pop	{r7, pc}
 2246              	.L140:
 2247 0016 C046     		.align	2
 2248              	.L139:
 2249 0018 10E000E0 		.word	-536813552
 2250              		.cfi_endproc
 2251              	.LFE39:
 2252              		.size	CySysTickStop, .-CySysTickStop
 2253              		.section	.text.CySysTickEnableInterrupt,"ax",%progbits
 2254              		.align	2
 2255              		.global	CySysTickEnableInterrupt
 2256              		.code	16
 2257              		.thumb_func
 2258              		.type	CySysTickEnableInterrupt, %function
 2259              	CySysTickEnableInterrupt:
 2260              	.LFB40:
3252:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 98


3253:Generated_Source\PSoC4/CyLib.c **** 
3254:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3255:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickEnableInterrupt
3256:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3257:Generated_Source\PSoC4/CyLib.c **** *
3258:Generated_Source\PSoC4/CyLib.c **** *  Enables the SysTick interrupt.
3259:Generated_Source\PSoC4/CyLib.c **** *
3260:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
3261:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
3262:Generated_Source\PSoC4/CyLib.c **** *
3263:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3264:Generated_Source\PSoC4/CyLib.c **** void CySysTickEnableInterrupt(void)
3265:Generated_Source\PSoC4/CyLib.c **** {
 2261              		.loc 1 3265 0
 2262              		.cfi_startproc
 2263              		@ args = 0, pretend = 0, frame = 0
 2264              		@ frame_needed = 1, uses_anonymous_args = 0
 2265 0000 80B5     		push	{r7, lr}
 2266              		.cfi_def_cfa_offset 8
 2267              		.cfi_offset 7, -8
 2268              		.cfi_offset 14, -4
 2269 0002 00AF     		add	r7, sp, #0
 2270              		.cfi_def_cfa_register 7
3266:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE_INT;
 2271              		.loc 1 3266 0
 2272 0004 044B     		ldr	r3, .L142
 2273 0006 044A     		ldr	r2, .L142
 2274 0008 1268     		ldr	r2, [r2]
 2275 000a 0221     		movs	r1, #2
 2276 000c 0A43     		orrs	r2, r1
 2277 000e 1A60     		str	r2, [r3]
3267:Generated_Source\PSoC4/CyLib.c **** }
 2278              		.loc 1 3267 0
 2279 0010 C046     		nop
 2280 0012 BD46     		mov	sp, r7
 2281              		@ sp needed
 2282 0014 80BD     		pop	{r7, pc}
 2283              	.L143:
 2284 0016 C046     		.align	2
 2285              	.L142:
 2286 0018 10E000E0 		.word	-536813552
 2287              		.cfi_endproc
 2288              	.LFE40:
 2289              		.size	CySysTickEnableInterrupt, .-CySysTickEnableInterrupt
 2290              		.section	.text.CySysTickDisableInterrupt,"ax",%progbits
 2291              		.align	2
 2292              		.global	CySysTickDisableInterrupt
 2293              		.code	16
 2294              		.thumb_func
 2295              		.type	CySysTickDisableInterrupt, %function
 2296              	CySysTickDisableInterrupt:
 2297              	.LFB41:
3268:Generated_Source\PSoC4/CyLib.c **** 
3269:Generated_Source\PSoC4/CyLib.c **** 
3270:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3271:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickDisableInterrupt
3272:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 99


3273:Generated_Source\PSoC4/CyLib.c **** *
3274:Generated_Source\PSoC4/CyLib.c **** *  Disables the SysTick interrupt.
3275:Generated_Source\PSoC4/CyLib.c **** *
3276:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
3277:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
3278:Generated_Source\PSoC4/CyLib.c **** *
3279:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3280:Generated_Source\PSoC4/CyLib.c **** void CySysTickDisableInterrupt(void)
3281:Generated_Source\PSoC4/CyLib.c **** {
 2298              		.loc 1 3281 0
 2299              		.cfi_startproc
 2300              		@ args = 0, pretend = 0, frame = 0
 2301              		@ frame_needed = 1, uses_anonymous_args = 0
 2302 0000 80B5     		push	{r7, lr}
 2303              		.cfi_def_cfa_offset 8
 2304              		.cfi_offset 7, -8
 2305              		.cfi_offset 14, -4
 2306 0002 00AF     		add	r7, sp, #0
 2307              		.cfi_def_cfa_register 7
3282:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE_INT));
 2308              		.loc 1 3282 0
 2309 0004 044B     		ldr	r3, .L145
 2310 0006 044A     		ldr	r2, .L145
 2311 0008 1268     		ldr	r2, [r2]
 2312 000a 0221     		movs	r1, #2
 2313 000c 8A43     		bics	r2, r1
 2314 000e 1A60     		str	r2, [r3]
3283:Generated_Source\PSoC4/CyLib.c **** }
 2315              		.loc 1 3283 0
 2316 0010 C046     		nop
 2317 0012 BD46     		mov	sp, r7
 2318              		@ sp needed
 2319 0014 80BD     		pop	{r7, pc}
 2320              	.L146:
 2321 0016 C046     		.align	2
 2322              	.L145:
 2323 0018 10E000E0 		.word	-536813552
 2324              		.cfi_endproc
 2325              	.LFE41:
 2326              		.size	CySysTickDisableInterrupt, .-CySysTickDisableInterrupt
 2327              		.section	.text.CySysTickSetReload,"ax",%progbits
 2328              		.align	2
 2329              		.global	CySysTickSetReload
 2330              		.code	16
 2331              		.thumb_func
 2332              		.type	CySysTickSetReload, %function
 2333              	CySysTickSetReload:
 2334              	.LFB42:
3284:Generated_Source\PSoC4/CyLib.c **** 
3285:Generated_Source\PSoC4/CyLib.c **** 
3286:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3287:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickSetReload
3288:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3289:Generated_Source\PSoC4/CyLib.c **** *
3290:Generated_Source\PSoC4/CyLib.c **** *  Sets value the counter is set to on startup and after it reaches zero. This
3291:Generated_Source\PSoC4/CyLib.c **** *  function do not change or reset current sysTick counter value, so it should
3292:Generated_Source\PSoC4/CyLib.c **** *  be cleared using CySysTickClear() API.
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 100


3293:Generated_Source\PSoC4/CyLib.c **** *
3294:Generated_Source\PSoC4/CyLib.c **** *  \param value: Valid range [0x0-0x00FFFFFF]. Counter reset value
3295:Generated_Source\PSoC4/CyLib.c **** *
3296:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3297:Generated_Source\PSoC4/CyLib.c **** void CySysTickSetReload(uint32 value)
3298:Generated_Source\PSoC4/CyLib.c **** {
 2335              		.loc 1 3298 0
 2336              		.cfi_startproc
 2337              		@ args = 0, pretend = 0, frame = 8
 2338              		@ frame_needed = 1, uses_anonymous_args = 0
 2339 0000 80B5     		push	{r7, lr}
 2340              		.cfi_def_cfa_offset 8
 2341              		.cfi_offset 7, -8
 2342              		.cfi_offset 14, -4
 2343 0002 82B0     		sub	sp, sp, #8
 2344              		.cfi_def_cfa_offset 16
 2345 0004 00AF     		add	r7, sp, #0
 2346              		.cfi_def_cfa_register 7
 2347 0006 7860     		str	r0, [r7, #4]
3299:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_RVR_REG = (value & CY_SYS_SYST_RVR_CNT_MASK);
 2348              		.loc 1 3299 0
 2349 0008 044B     		ldr	r3, .L148
 2350 000a 7A68     		ldr	r2, [r7, #4]
 2351 000c 1202     		lsls	r2, r2, #8
 2352 000e 120A     		lsrs	r2, r2, #8
 2353 0010 1A60     		str	r2, [r3]
3300:Generated_Source\PSoC4/CyLib.c **** }
 2354              		.loc 1 3300 0
 2355 0012 C046     		nop
 2356 0014 BD46     		mov	sp, r7
 2357 0016 02B0     		add	sp, sp, #8
 2358              		@ sp needed
 2359 0018 80BD     		pop	{r7, pc}
 2360              	.L149:
 2361 001a C046     		.align	2
 2362              	.L148:
 2363 001c 14E000E0 		.word	-536813548
 2364              		.cfi_endproc
 2365              	.LFE42:
 2366              		.size	CySysTickSetReload, .-CySysTickSetReload
 2367              		.section	.text.CySysTickGetReload,"ax",%progbits
 2368              		.align	2
 2369              		.global	CySysTickGetReload
 2370              		.code	16
 2371              		.thumb_func
 2372              		.type	CySysTickGetReload, %function
 2373              	CySysTickGetReload:
 2374              	.LFB43:
3301:Generated_Source\PSoC4/CyLib.c **** 
3302:Generated_Source\PSoC4/CyLib.c **** 
3303:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3304:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetReload
3305:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3306:Generated_Source\PSoC4/CyLib.c **** *
3307:Generated_Source\PSoC4/CyLib.c **** *  Gets value the counter is set to on startup and after it reaches zero.
3308:Generated_Source\PSoC4/CyLib.c **** *
3309:Generated_Source\PSoC4/CyLib.c **** * \return
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 101


3310:Generated_Source\PSoC4/CyLib.c **** *  Counter reset value.
3311:Generated_Source\PSoC4/CyLib.c **** *
3312:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3313:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetReload(void)
3314:Generated_Source\PSoC4/CyLib.c **** {
 2375              		.loc 1 3314 0
 2376              		.cfi_startproc
 2377              		@ args = 0, pretend = 0, frame = 0
 2378              		@ frame_needed = 1, uses_anonymous_args = 0
 2379 0000 80B5     		push	{r7, lr}
 2380              		.cfi_def_cfa_offset 8
 2381              		.cfi_offset 7, -8
 2382              		.cfi_offset 14, -4
 2383 0002 00AF     		add	r7, sp, #0
 2384              		.cfi_def_cfa_register 7
3315:Generated_Source\PSoC4/CyLib.c ****     return(CY_SYS_SYST_RVR_REG & CY_SYS_SYST_RVR_CNT_MASK);
 2385              		.loc 1 3315 0
 2386 0004 034B     		ldr	r3, .L152
 2387 0006 1B68     		ldr	r3, [r3]
 2388 0008 1B02     		lsls	r3, r3, #8
 2389 000a 1B0A     		lsrs	r3, r3, #8
3316:Generated_Source\PSoC4/CyLib.c **** }
 2390              		.loc 1 3316 0
 2391 000c 1800     		movs	r0, r3
 2392 000e BD46     		mov	sp, r7
 2393              		@ sp needed
 2394 0010 80BD     		pop	{r7, pc}
 2395              	.L153:
 2396 0012 C046     		.align	2
 2397              	.L152:
 2398 0014 14E000E0 		.word	-536813548
 2399              		.cfi_endproc
 2400              	.LFE43:
 2401              		.size	CySysTickGetReload, .-CySysTickGetReload
 2402              		.section	.text.CySysTickGetValue,"ax",%progbits
 2403              		.align	2
 2404              		.global	CySysTickGetValue
 2405              		.code	16
 2406              		.thumb_func
 2407              		.type	CySysTickGetValue, %function
 2408              	CySysTickGetValue:
 2409              	.LFB44:
3317:Generated_Source\PSoC4/CyLib.c **** 
3318:Generated_Source\PSoC4/CyLib.c **** 
3319:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3320:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetValue
3321:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3322:Generated_Source\PSoC4/CyLib.c **** *
3323:Generated_Source\PSoC4/CyLib.c **** *  Gets current SysTick counter value.
3324:Generated_Source\PSoC4/CyLib.c **** *
3325:Generated_Source\PSoC4/CyLib.c **** * \return
3326:Generated_Source\PSoC4/CyLib.c **** *  Current SysTick counter value
3327:Generated_Source\PSoC4/CyLib.c **** *
3328:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3329:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetValue(void)
3330:Generated_Source\PSoC4/CyLib.c **** {
 2410              		.loc 1 3330 0
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 102


 2411              		.cfi_startproc
 2412              		@ args = 0, pretend = 0, frame = 0
 2413              		@ frame_needed = 1, uses_anonymous_args = 0
 2414 0000 80B5     		push	{r7, lr}
 2415              		.cfi_def_cfa_offset 8
 2416              		.cfi_offset 7, -8
 2417              		.cfi_offset 14, -4
 2418 0002 00AF     		add	r7, sp, #0
 2419              		.cfi_def_cfa_register 7
3331:Generated_Source\PSoC4/CyLib.c ****     return(CY_SYS_SYST_CVR_REG & CY_SYS_SYST_CVR_CNT_MASK);
 2420              		.loc 1 3331 0
 2421 0004 034B     		ldr	r3, .L156
 2422 0006 1B68     		ldr	r3, [r3]
 2423 0008 1B02     		lsls	r3, r3, #8
 2424 000a 1B0A     		lsrs	r3, r3, #8
3332:Generated_Source\PSoC4/CyLib.c **** }
 2425              		.loc 1 3332 0
 2426 000c 1800     		movs	r0, r3
 2427 000e BD46     		mov	sp, r7
 2428              		@ sp needed
 2429 0010 80BD     		pop	{r7, pc}
 2430              	.L157:
 2431 0012 C046     		.align	2
 2432              	.L156:
 2433 0014 18E000E0 		.word	-536813544
 2434              		.cfi_endproc
 2435              	.LFE44:
 2436              		.size	CySysTickGetValue, .-CySysTickGetValue
 2437              		.section	.text.CySysTickSetClockSource,"ax",%progbits
 2438              		.align	2
 2439              		.global	CySysTickSetClockSource
 2440              		.code	16
 2441              		.thumb_func
 2442              		.type	CySysTickSetClockSource, %function
 2443              	CySysTickSetClockSource:
 2444              	.LFB45:
3333:Generated_Source\PSoC4/CyLib.c **** 
3334:Generated_Source\PSoC4/CyLib.c **** 
3335:Generated_Source\PSoC4/CyLib.c **** #if(CY_SYSTICK_LFCLK_SOURCE)
3336:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
3337:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysTickSetClockSource
3338:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
3339:Generated_Source\PSoC4/CyLib.c ****     *
3340:Generated_Source\PSoC4/CyLib.c ****     *  Sets the clock source for the SysTick counter.
3341:Generated_Source\PSoC4/CyLib.c ****     *
3342:Generated_Source\PSoC4/CyLib.c ****     *  Clears SysTick count flag if it was set. If clock source is not ready this
3343:Generated_Source\PSoC4/CyLib.c ****     *  function call will have no effect. After changing clock source to the low
3344:Generated_Source\PSoC4/CyLib.c ****     *  frequency clock the counter and reload register values will remain unchanged
3345:Generated_Source\PSoC4/CyLib.c ****     *  so time to the interrupt will be significantly longer and vice versa.
3346:Generated_Source\PSoC4/CyLib.c ****     *
3347:Generated_Source\PSoC4/CyLib.c ****     *  The changing of SysTick clock source and\or its frequency will change
3348:Generated_Source\PSoC4/CyLib.c ****     *  the interrupt interval and that CySysTickSetReload() should be
3349:Generated_Source\PSoC4/CyLib.c ****     *  called to compensate this change.
3350:Generated_Source\PSoC4/CyLib.c ****     *
3351:Generated_Source\PSoC4/CyLib.c ****     *  The function is not available on PSoC 4000, PSoC 4100, and PSoC 42000
3352:Generated_Source\PSoC4/CyLib.c ****     *  devices. The SysTick timer clocked by the System clock on these devices.
3353:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 103


3354:Generated_Source\PSoC4/CyLib.c ****     *  \param clockSource Clock source for SysTick counter
3355:Generated_Source\PSoC4/CyLib.c ****     *         Define                     Clock Source
3356:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_SYSCLK     SysTick is clocked by the CPU clock.
3357:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_LFCLK      SysTick is clocked by the low frequency
3358:Generated_Source\PSoC4/CyLib.c ****     *                                      clock. (ILO 100 KHz for PSoC 5LP, and
3359:Generated_Source\PSoC4/CyLib.c ****     *                                      LFCLK for PSoC 4).
3360:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
3361:Generated_Source\PSoC4/CyLib.c ****     void CySysTickSetClockSource(uint32 clockSource)
3362:Generated_Source\PSoC4/CyLib.c ****     {
 2445              		.loc 1 3362 0
 2446              		.cfi_startproc
 2447              		@ args = 0, pretend = 0, frame = 8
 2448              		@ frame_needed = 1, uses_anonymous_args = 0
 2449 0000 80B5     		push	{r7, lr}
 2450              		.cfi_def_cfa_offset 8
 2451              		.cfi_offset 7, -8
 2452              		.cfi_offset 14, -4
 2453 0002 82B0     		sub	sp, sp, #8
 2454              		.cfi_def_cfa_offset 16
 2455 0004 00AF     		add	r7, sp, #0
 2456              		.cfi_def_cfa_register 7
 2457 0006 7860     		str	r0, [r7, #4]
3363:Generated_Source\PSoC4/CyLib.c ****         if (clockSource == CY_SYS_SYST_CSR_CLK_SRC_SYSCLK)
 2458              		.loc 1 3363 0
 2459 0008 7B68     		ldr	r3, [r7, #4]
 2460 000a 012B     		cmp	r3, #1
 2461 000c 06D1     		bne	.L159
3364:Generated_Source\PSoC4/CyLib.c ****         {
3365:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_SYST_CSR_REG |= (uint32)(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK << CY_SYS_SYST_CSR_CLK_S
 2462              		.loc 1 3365 0
 2463 000e 084B     		ldr	r3, .L162
 2464 0010 074A     		ldr	r2, .L162
 2465 0012 1268     		ldr	r2, [r2]
 2466 0014 0421     		movs	r1, #4
 2467 0016 0A43     		orrs	r2, r1
 2468 0018 1A60     		str	r2, [r3]
3366:Generated_Source\PSoC4/CyLib.c ****         }
3367:Generated_Source\PSoC4/CyLib.c ****         else
3368:Generated_Source\PSoC4/CyLib.c ****         {
3369:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_SYST_CSR_REG &= ((uint32) ~((uint32)(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK << CY_SYS_SY
3370:Generated_Source\PSoC4/CyLib.c ****         }
3371:Generated_Source\PSoC4/CyLib.c ****     }
 2469              		.loc 1 3371 0
 2470 001a 05E0     		b	.L161
 2471              	.L159:
3369:Generated_Source\PSoC4/CyLib.c ****         }
 2472              		.loc 1 3369 0
 2473 001c 044B     		ldr	r3, .L162
 2474 001e 044A     		ldr	r2, .L162
 2475 0020 1268     		ldr	r2, [r2]
 2476 0022 0421     		movs	r1, #4
 2477 0024 8A43     		bics	r2, r1
 2478 0026 1A60     		str	r2, [r3]
 2479              	.L161:
 2480              		.loc 1 3371 0
 2481 0028 C046     		nop
 2482 002a BD46     		mov	sp, r7
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 104


 2483 002c 02B0     		add	sp, sp, #8
 2484              		@ sp needed
 2485 002e 80BD     		pop	{r7, pc}
 2486              	.L163:
 2487              		.align	2
 2488              	.L162:
 2489 0030 10E000E0 		.word	-536813552
 2490              		.cfi_endproc
 2491              	.LFE45:
 2492              		.size	CySysTickSetClockSource, .-CySysTickSetClockSource
 2493              		.section	.text.CySysTickGetClockSource,"ax",%progbits
 2494              		.align	2
 2495              		.global	CySysTickGetClockSource
 2496              		.code	16
 2497              		.thumb_func
 2498              		.type	CySysTickGetClockSource, %function
 2499              	CySysTickGetClockSource:
 2500              	.LFB46:
3372:Generated_Source\PSoC4/CyLib.c **** 
3373:Generated_Source\PSoC4/CyLib.c **** 
3374:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
3375:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysTickGetClockSource
3376:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
3377:Generated_Source\PSoC4/CyLib.c ****     *
3378:Generated_Source\PSoC4/CyLib.c ****     *  Returns the current clock source of the SysTick counter.
3379:Generated_Source\PSoC4/CyLib.c ****     *
3380:Generated_Source\PSoC4/CyLib.c ****     *  \return
3381:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_SYSCLK     SysTick is clocked by CPU clock.
3382:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_LFCLK      SysTick is clocked by the low frequency
3383:Generated_Source\PSoC4/CyLib.c ****     *                                      clock. (ILO 100 KHz for PSoC 5LP, and
3384:Generated_Source\PSoC4/CyLib.c ****     *                                      LFCLK for PSoC 4).
3385:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
3386:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysTickGetClockSource(void)
3387:Generated_Source\PSoC4/CyLib.c ****     {
 2501              		.loc 1 3387 0
 2502              		.cfi_startproc
 2503              		@ args = 0, pretend = 0, frame = 0
 2504              		@ frame_needed = 1, uses_anonymous_args = 0
 2505 0000 80B5     		push	{r7, lr}
 2506              		.cfi_def_cfa_offset 8
 2507              		.cfi_offset 7, -8
 2508              		.cfi_offset 14, -4
 2509 0002 00AF     		add	r7, sp, #0
 2510              		.cfi_def_cfa_register 7
3388:Generated_Source\PSoC4/CyLib.c ****         return ((CY_SYS_SYST_CSR_REG >> CY_SYS_SYST_CSR_CLK_SOURCE_SHIFT) & CY_SYS_SYST_CSR_CLK_SRC
 2511              		.loc 1 3388 0
 2512 0004 034B     		ldr	r3, .L166
 2513 0006 1B68     		ldr	r3, [r3]
 2514 0008 9B08     		lsrs	r3, r3, #2
 2515 000a 0122     		movs	r2, #1
 2516 000c 1340     		ands	r3, r2
3389:Generated_Source\PSoC4/CyLib.c ****     }
 2517              		.loc 1 3389 0
 2518 000e 1800     		movs	r0, r3
 2519 0010 BD46     		mov	sp, r7
 2520              		@ sp needed
 2521 0012 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 105


 2522              	.L167:
 2523              		.align	2
 2524              	.L166:
 2525 0014 10E000E0 		.word	-536813552
 2526              		.cfi_endproc
 2527              	.LFE46:
 2528              		.size	CySysTickGetClockSource, .-CySysTickGetClockSource
 2529              		.section	.text.CySysTickGetCountFlag,"ax",%progbits
 2530              		.align	2
 2531              		.global	CySysTickGetCountFlag
 2532              		.code	16
 2533              		.thumb_func
 2534              		.type	CySysTickGetCountFlag, %function
 2535              	CySysTickGetCountFlag:
 2536              	.LFB47:
3390:Generated_Source\PSoC4/CyLib.c **** 
3391:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_SYSTICK_LFCLK_SOURCE) */
3392:Generated_Source\PSoC4/CyLib.c **** 
3393:Generated_Source\PSoC4/CyLib.c **** 
3394:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3395:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetCountFlag
3396:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3397:Generated_Source\PSoC4/CyLib.c **** *
3398:Generated_Source\PSoC4/CyLib.c **** *  The count flag is set once SysTick counter reaches zero.
3399:Generated_Source\PSoC4/CyLib.c **** *  The flag cleared on read.
3400:Generated_Source\PSoC4/CyLib.c **** *
3401:Generated_Source\PSoC4/CyLib.c **** * \return
3402:Generated_Source\PSoC4/CyLib.c ****     *  Returns non-zero value if flag is set, otherwise zero is returned.
3403:Generated_Source\PSoC4/CyLib.c **** *
3404:Generated_Source\PSoC4/CyLib.c **** *
3405:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
3406:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
3407:Generated_Source\PSoC4/CyLib.c **** *
3408:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3409:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetCountFlag(void)
3410:Generated_Source\PSoC4/CyLib.c **** {
 2537              		.loc 1 3410 0
 2538              		.cfi_startproc
 2539              		@ args = 0, pretend = 0, frame = 0
 2540              		@ frame_needed = 1, uses_anonymous_args = 0
 2541 0000 80B5     		push	{r7, lr}
 2542              		.cfi_def_cfa_offset 8
 2543              		.cfi_offset 7, -8
 2544              		.cfi_offset 14, -4
 2545 0002 00AF     		add	r7, sp, #0
 2546              		.cfi_def_cfa_register 7
3411:Generated_Source\PSoC4/CyLib.c ****     return ((CY_SYS_SYST_CSR_REG >> CY_SYS_SYST_CSR_COUNTFLAG_SHIFT) & 0x01u);
 2547              		.loc 1 3411 0
 2548 0004 034B     		ldr	r3, .L170
 2549 0006 1B68     		ldr	r3, [r3]
 2550 0008 1B0C     		lsrs	r3, r3, #16
 2551 000a 0122     		movs	r2, #1
 2552 000c 1340     		ands	r3, r2
3412:Generated_Source\PSoC4/CyLib.c **** }
 2553              		.loc 1 3412 0
 2554 000e 1800     		movs	r0, r3
 2555 0010 BD46     		mov	sp, r7
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 106


 2556              		@ sp needed
 2557 0012 80BD     		pop	{r7, pc}
 2558              	.L171:
 2559              		.align	2
 2560              	.L170:
 2561 0014 10E000E0 		.word	-536813552
 2562              		.cfi_endproc
 2563              	.LFE47:
 2564              		.size	CySysTickGetCountFlag, .-CySysTickGetCountFlag
 2565              		.section	.text.CySysTickClear,"ax",%progbits
 2566              		.align	2
 2567              		.global	CySysTickClear
 2568              		.code	16
 2569              		.thumb_func
 2570              		.type	CySysTickClear, %function
 2571              	CySysTickClear:
 2572              	.LFB48:
3413:Generated_Source\PSoC4/CyLib.c **** 
3414:Generated_Source\PSoC4/CyLib.c **** 
3415:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3416:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickClear
3417:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3418:Generated_Source\PSoC4/CyLib.c **** *
3419:Generated_Source\PSoC4/CyLib.c **** *  Clears the SysTick counter for well-defined startup.
3420:Generated_Source\PSoC4/CyLib.c **** *
3421:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3422:Generated_Source\PSoC4/CyLib.c **** void CySysTickClear(void)
3423:Generated_Source\PSoC4/CyLib.c **** {
 2573              		.loc 1 3423 0
 2574              		.cfi_startproc
 2575              		@ args = 0, pretend = 0, frame = 0
 2576              		@ frame_needed = 1, uses_anonymous_args = 0
 2577 0000 80B5     		push	{r7, lr}
 2578              		.cfi_def_cfa_offset 8
 2579              		.cfi_offset 7, -8
 2580              		.cfi_offset 14, -4
 2581 0002 00AF     		add	r7, sp, #0
 2582              		.cfi_def_cfa_register 7
3424:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CVR_REG = 0u;
 2583              		.loc 1 3424 0
 2584 0004 024B     		ldr	r3, .L173
 2585 0006 0022     		movs	r2, #0
 2586 0008 1A60     		str	r2, [r3]
3425:Generated_Source\PSoC4/CyLib.c **** }
 2587              		.loc 1 3425 0
 2588 000a C046     		nop
 2589 000c BD46     		mov	sp, r7
 2590              		@ sp needed
 2591 000e 80BD     		pop	{r7, pc}
 2592              	.L174:
 2593              		.align	2
 2594              	.L173:
 2595 0010 18E000E0 		.word	-536813544
 2596              		.cfi_endproc
 2597              	.LFE48:
 2598              		.size	CySysTickClear, .-CySysTickClear
 2599              		.section	.text.CySysTickSetCallback,"ax",%progbits
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 107


 2600              		.align	2
 2601              		.global	CySysTickSetCallback
 2602              		.code	16
 2603              		.thumb_func
 2604              		.type	CySysTickSetCallback, %function
 2605              	CySysTickSetCallback:
 2606              	.LFB49:
3426:Generated_Source\PSoC4/CyLib.c **** 
3427:Generated_Source\PSoC4/CyLib.c **** 
3428:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3429:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickSetCallback
3430:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3431:Generated_Source\PSoC4/CyLib.c **** *
3432:Generated_Source\PSoC4/CyLib.c **** *  This function allows up to five user-defined interrupt service routine
3433:Generated_Source\PSoC4/CyLib.c **** *  functions to be associated with the SysTick interrupt. These are specified
3434:Generated_Source\PSoC4/CyLib.c **** *  through the use of pointers to the function.
3435:Generated_Source\PSoC4/CyLib.c **** *
3436:Generated_Source\PSoC4/CyLib.c **** *  To set a custom callback function without the overhead of the system provided
3437:Generated_Source\PSoC4/CyLib.c **** *  one, use CyIntSetSysVector(CY_INT_SYSTICK_IRQN, cyisraddress <address>),
3438:Generated_Source\PSoC4/CyLib.c **** *  where <address> is address of the custom defined interrupt service routine.
3439:Generated_Source\PSoC4/CyLib.c **** *  Note: a custom callback function overrides the system defined callback
3440:Generated_Source\PSoC4/CyLib.c **** *  functions.
3441:Generated_Source\PSoC4/CyLib.c **** *
3442:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the callback function addresses to be set. The valid
3443:Generated_Source\PSoC4/CyLib.c **** *          range is from 0 to 4.
3444:Generated_Source\PSoC4/CyLib.c **** *
3445:Generated_Source\PSoC4/CyLib.c **** *  void(*CallbackFunction(void): A pointer to the function that will be
3446:Generated_Source\PSoC4/CyLib.c **** *                                associated with the SysTick ISR for the
3447:Generated_Source\PSoC4/CyLib.c **** *                                specified number.
3448:Generated_Source\PSoC4/CyLib.c **** *
3449:Generated_Source\PSoC4/CyLib.c **** * \return
3450:Generated_Source\PSoC4/CyLib.c **** *  Returns the address of the previous callback function.
3451:Generated_Source\PSoC4/CyLib.c **** *  The NULL is returned if the specified address in not set.
3452:Generated_Source\PSoC4/CyLib.c **** *
3453:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
3454:Generated_Source\PSoC4/CyLib.c **** *  The registered callback functions will be executed in the interrupt.
3455:Generated_Source\PSoC4/CyLib.c **** *
3456:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3457:Generated_Source\PSoC4/CyLib.c **** cySysTickCallback CySysTickSetCallback(uint32 number, cySysTickCallback function)
3458:Generated_Source\PSoC4/CyLib.c **** {
 2607              		.loc 1 3458 0
 2608              		.cfi_startproc
 2609              		@ args = 0, pretend = 0, frame = 16
 2610              		@ frame_needed = 1, uses_anonymous_args = 0
 2611 0000 80B5     		push	{r7, lr}
 2612              		.cfi_def_cfa_offset 8
 2613              		.cfi_offset 7, -8
 2614              		.cfi_offset 14, -4
 2615 0002 84B0     		sub	sp, sp, #16
 2616              		.cfi_def_cfa_offset 24
 2617 0004 00AF     		add	r7, sp, #0
 2618              		.cfi_def_cfa_register 7
 2619 0006 7860     		str	r0, [r7, #4]
 2620 0008 3960     		str	r1, [r7]
3459:Generated_Source\PSoC4/CyLib.c ****     cySysTickCallback retVal;
3460:Generated_Source\PSoC4/CyLib.c **** 
3461:Generated_Source\PSoC4/CyLib.c ****     retVal = CySysTickCallbacks[number];
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 108


 2621              		.loc 1 3461 0
 2622 000a 074B     		ldr	r3, .L177
 2623 000c 7A68     		ldr	r2, [r7, #4]
 2624 000e 9200     		lsls	r2, r2, #2
 2625 0010 D358     		ldr	r3, [r2, r3]
 2626 0012 FB60     		str	r3, [r7, #12]
3462:Generated_Source\PSoC4/CyLib.c ****     CySysTickCallbacks[number] = function;
 2627              		.loc 1 3462 0
 2628 0014 044B     		ldr	r3, .L177
 2629 0016 7A68     		ldr	r2, [r7, #4]
 2630 0018 9200     		lsls	r2, r2, #2
 2631 001a 3968     		ldr	r1, [r7]
 2632 001c D150     		str	r1, [r2, r3]
3463:Generated_Source\PSoC4/CyLib.c ****     return (retVal);
 2633              		.loc 1 3463 0
 2634 001e FB68     		ldr	r3, [r7, #12]
3464:Generated_Source\PSoC4/CyLib.c **** }
 2635              		.loc 1 3464 0
 2636 0020 1800     		movs	r0, r3
 2637 0022 BD46     		mov	sp, r7
 2638 0024 04B0     		add	sp, sp, #16
 2639              		@ sp needed
 2640 0026 80BD     		pop	{r7, pc}
 2641              	.L178:
 2642              		.align	2
 2643              	.L177:
 2644 0028 00000000 		.word	CySysTickCallbacks
 2645              		.cfi_endproc
 2646              	.LFE49:
 2647              		.size	CySysTickSetCallback, .-CySysTickSetCallback
 2648              		.section	.text.CySysTickGetCallback,"ax",%progbits
 2649              		.align	2
 2650              		.global	CySysTickGetCallback
 2651              		.code	16
 2652              		.thumb_func
 2653              		.type	CySysTickGetCallback, %function
 2654              	CySysTickGetCallback:
 2655              	.LFB50:
3465:Generated_Source\PSoC4/CyLib.c **** 
3466:Generated_Source\PSoC4/CyLib.c **** 
3467:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3468:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetCallback
3469:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3470:Generated_Source\PSoC4/CyLib.c **** *
3471:Generated_Source\PSoC4/CyLib.c **** *  The function get the specified callback pointer.
3472:Generated_Source\PSoC4/CyLib.c **** *
3473:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of callback function address to get. The valid
3474:Generated_Source\PSoC4/CyLib.c **** *          range is from 0 to 4.
3475:Generated_Source\PSoC4/CyLib.c **** *
3476:Generated_Source\PSoC4/CyLib.c **** * \return
3477:Generated_Source\PSoC4/CyLib.c **** *  Returns the address of the specified callback function.
3478:Generated_Source\PSoC4/CyLib.c **** *  The NULL is returned if the specified address in not initialized.
3479:Generated_Source\PSoC4/CyLib.c **** *
3480:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3481:Generated_Source\PSoC4/CyLib.c **** cySysTickCallback CySysTickGetCallback(uint32 number)
3482:Generated_Source\PSoC4/CyLib.c **** {
 2656              		.loc 1 3482 0
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 109


 2657              		.cfi_startproc
 2658              		@ args = 0, pretend = 0, frame = 8
 2659              		@ frame_needed = 1, uses_anonymous_args = 0
 2660 0000 80B5     		push	{r7, lr}
 2661              		.cfi_def_cfa_offset 8
 2662              		.cfi_offset 7, -8
 2663              		.cfi_offset 14, -4
 2664 0002 82B0     		sub	sp, sp, #8
 2665              		.cfi_def_cfa_offset 16
 2666 0004 00AF     		add	r7, sp, #0
 2667              		.cfi_def_cfa_register 7
 2668 0006 7860     		str	r0, [r7, #4]
3483:Generated_Source\PSoC4/CyLib.c ****     return ((cySysTickCallback) CySysTickCallbacks[number]);
 2669              		.loc 1 3483 0
 2670 0008 034B     		ldr	r3, .L181
 2671 000a 7A68     		ldr	r2, [r7, #4]
 2672 000c 9200     		lsls	r2, r2, #2
 2673 000e D358     		ldr	r3, [r2, r3]
3484:Generated_Source\PSoC4/CyLib.c **** }
 2674              		.loc 1 3484 0
 2675 0010 1800     		movs	r0, r3
 2676 0012 BD46     		mov	sp, r7
 2677 0014 02B0     		add	sp, sp, #8
 2678              		@ sp needed
 2679 0016 80BD     		pop	{r7, pc}
 2680              	.L182:
 2681              		.align	2
 2682              	.L181:
 2683 0018 00000000 		.word	CySysTickCallbacks
 2684              		.cfi_endproc
 2685              	.LFE50:
 2686              		.size	CySysTickGetCallback, .-CySysTickGetCallback
 2687              		.section	.text.CySysTickServiceCallbacks,"ax",%progbits
 2688              		.align	2
 2689              		.code	16
 2690              		.thumb_func
 2691              		.type	CySysTickServiceCallbacks, %function
 2692              	CySysTickServiceCallbacks:
 2693              	.LFB51:
3485:Generated_Source\PSoC4/CyLib.c **** 
3486:Generated_Source\PSoC4/CyLib.c **** 
3487:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3488:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickServiceCallbacks
3489:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3490:Generated_Source\PSoC4/CyLib.c **** *
3491:Generated_Source\PSoC4/CyLib.c **** *  System Tick timer interrupt routine
3492:Generated_Source\PSoC4/CyLib.c **** *
3493:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3494:Generated_Source\PSoC4/CyLib.c **** static void CySysTickServiceCallbacks(void)
3495:Generated_Source\PSoC4/CyLib.c **** {
 2694              		.loc 1 3495 0
 2695              		.cfi_startproc
 2696              		@ args = 0, pretend = 0, frame = 8
 2697              		@ frame_needed = 1, uses_anonymous_args = 0
 2698 0000 80B5     		push	{r7, lr}
 2699              		.cfi_def_cfa_offset 8
 2700              		.cfi_offset 7, -8
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 110


 2701              		.cfi_offset 14, -4
 2702 0002 82B0     		sub	sp, sp, #8
 2703              		.cfi_def_cfa_offset 16
 2704 0004 00AF     		add	r7, sp, #0
 2705              		.cfi_def_cfa_register 7
3496:Generated_Source\PSoC4/CyLib.c ****     uint32 i;
3497:Generated_Source\PSoC4/CyLib.c **** 
3498:Generated_Source\PSoC4/CyLib.c ****     /* Verify that tick timer flag was set */
3499:Generated_Source\PSoC4/CyLib.c ****     if (1u == CySysTickGetCountFlag())
 2706              		.loc 1 3499 0
 2707 0006 FFF7FEFF 		bl	CySysTickGetCountFlag
 2708 000a 0300     		movs	r3, r0
 2709 000c 012B     		cmp	r3, #1
 2710 000e 13D1     		bne	.L188
3500:Generated_Source\PSoC4/CyLib.c ****     {
3501:Generated_Source\PSoC4/CyLib.c ****         for (i=0u; i < CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
 2711              		.loc 1 3501 0
 2712 0010 0023     		movs	r3, #0
 2713 0012 7B60     		str	r3, [r7, #4]
 2714 0014 0DE0     		b	.L185
 2715              	.L187:
3502:Generated_Source\PSoC4/CyLib.c ****         {
3503:Generated_Source\PSoC4/CyLib.c ****             if (CySysTickCallbacks[i] != (void *) 0)
 2716              		.loc 1 3503 0
 2717 0016 0A4B     		ldr	r3, .L189
 2718 0018 7A68     		ldr	r2, [r7, #4]
 2719 001a 9200     		lsls	r2, r2, #2
 2720 001c D358     		ldr	r3, [r2, r3]
 2721 001e 002B     		cmp	r3, #0
 2722 0020 04D0     		beq	.L186
3504:Generated_Source\PSoC4/CyLib.c ****             {
3505:Generated_Source\PSoC4/CyLib.c ****                 (void)(CySysTickCallbacks[i])();
 2723              		.loc 1 3505 0
 2724 0022 074B     		ldr	r3, .L189
 2725 0024 7A68     		ldr	r2, [r7, #4]
 2726 0026 9200     		lsls	r2, r2, #2
 2727 0028 D358     		ldr	r3, [r2, r3]
 2728 002a 9847     		blx	r3
 2729              	.L186:
3501:Generated_Source\PSoC4/CyLib.c ****         {
 2730              		.loc 1 3501 0 discriminator 2
 2731 002c 7B68     		ldr	r3, [r7, #4]
 2732 002e 0133     		adds	r3, r3, #1
 2733 0030 7B60     		str	r3, [r7, #4]
 2734              	.L185:
3501:Generated_Source\PSoC4/CyLib.c ****         {
 2735              		.loc 1 3501 0 is_stmt 0 discriminator 1
 2736 0032 7B68     		ldr	r3, [r7, #4]
 2737 0034 042B     		cmp	r3, #4
 2738 0036 EED9     		bls	.L187
 2739              	.L188:
3506:Generated_Source\PSoC4/CyLib.c ****             }
3507:Generated_Source\PSoC4/CyLib.c ****         }
3508:Generated_Source\PSoC4/CyLib.c ****     }
3509:Generated_Source\PSoC4/CyLib.c **** }
 2740              		.loc 1 3509 0 is_stmt 1
 2741 0038 C046     		nop
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 111


 2742 003a BD46     		mov	sp, r7
 2743 003c 02B0     		add	sp, sp, #8
 2744              		@ sp needed
 2745 003e 80BD     		pop	{r7, pc}
 2746              	.L190:
 2747              		.align	2
 2748              	.L189:
 2749 0040 00000000 		.word	CySysTickCallbacks
 2750              		.cfi_endproc
 2751              	.LFE51:
 2752              		.size	CySysTickServiceCallbacks, .-CySysTickServiceCallbacks
 2753              		.section	.text.CyGetUniqueId,"ax",%progbits
 2754              		.align	2
 2755              		.global	CyGetUniqueId
 2756              		.code	16
 2757              		.thumb_func
 2758              		.type	CyGetUniqueId, %function
 2759              	CyGetUniqueId:
 2760              	.LFB52:
3510:Generated_Source\PSoC4/CyLib.c **** 
3511:Generated_Source\PSoC4/CyLib.c **** 
3512:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3513:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyGetUniqueId
3514:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3515:Generated_Source\PSoC4/CyLib.c **** *
3516:Generated_Source\PSoC4/CyLib.c **** *  Returns the 64-bit unique ID of the device. The uniqueness of the number is
3517:Generated_Source\PSoC4/CyLib.c **** *  guaranteed for 10 years due to the die lot number having a cycle life of 10
3518:Generated_Source\PSoC4/CyLib.c **** *  years and even after 10 years, the probability of getting two identical
3519:Generated_Source\PSoC4/CyLib.c **** *  numbers is very small.
3520:Generated_Source\PSoC4/CyLib.c **** *
3521:Generated_Source\PSoC4/CyLib.c **** *  \param uniqueId: The pointer to a two element 32-bit unsigned integer array. Returns
3522:Generated_Source\PSoC4/CyLib.c **** *  the 64-bit unique ID of the device by loading them into the integer array
3523:Generated_Source\PSoC4/CyLib.c **** *  pointed to by uniqueId.
3524:Generated_Source\PSoC4/CyLib.c **** *
3525:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3526:Generated_Source\PSoC4/CyLib.c **** void CyGetUniqueId(uint32* uniqueId)
3527:Generated_Source\PSoC4/CyLib.c **** {
 2761              		.loc 1 3527 0
 2762              		.cfi_startproc
 2763              		@ args = 0, pretend = 0, frame = 8
 2764              		@ frame_needed = 1, uses_anonymous_args = 0
 2765 0000 80B5     		push	{r7, lr}
 2766              		.cfi_def_cfa_offset 8
 2767              		.cfi_offset 7, -8
 2768              		.cfi_offset 14, -4
 2769 0002 82B0     		sub	sp, sp, #8
 2770              		.cfi_def_cfa_offset 16
 2771 0004 00AF     		add	r7, sp, #0
 2772              		.cfi_def_cfa_register 7
 2773 0006 7860     		str	r0, [r7, #4]
3528:Generated_Source\PSoC4/CyLib.c **** #if(CY_PSOC4)
3529:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u]  =  (uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT0  );
 2774              		.loc 1 3529 0
 2775 0008 254B     		ldr	r3, .L192
 2776 000a 1B78     		ldrb	r3, [r3]
 2777 000c DBB2     		uxtb	r3, r3
 2778 000e 1A00     		movs	r2, r3
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 112


 2779 0010 7B68     		ldr	r3, [r7, #4]
 2780 0012 1A60     		str	r2, [r3]
3530:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT1  ) <<  8u);
 2781              		.loc 1 3530 0
 2782 0014 234B     		ldr	r3, .L192+4
 2783 0016 1B78     		ldrb	r3, [r3]
 2784 0018 DBB2     		uxtb	r3, r3
 2785 001a 1A02     		lsls	r2, r3, #8
 2786 001c 7B68     		ldr	r3, [r7, #4]
 2787 001e 1B68     		ldr	r3, [r3]
 2788 0020 1A43     		orrs	r2, r3
 2789 0022 7B68     		ldr	r3, [r7, #4]
 2790 0024 1A60     		str	r2, [r3]
3531:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT2  ) << 16u);
 2791              		.loc 1 3531 0
 2792 0026 204B     		ldr	r3, .L192+8
 2793 0028 1B78     		ldrb	r3, [r3]
 2794 002a DBB2     		uxtb	r3, r3
 2795 002c 1A04     		lsls	r2, r3, #16
 2796 002e 7B68     		ldr	r3, [r7, #4]
 2797 0030 1B68     		ldr	r3, [r3]
 2798 0032 1A43     		orrs	r2, r3
 2799 0034 7B68     		ldr	r3, [r7, #4]
 2800 0036 1A60     		str	r2, [r3]
3532:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_WAFER ) << 24u);
 2801              		.loc 1 3532 0
 2802 0038 1C4B     		ldr	r3, .L192+12
 2803 003a 1B78     		ldrb	r3, [r3]
 2804 003c DBB2     		uxtb	r3, r3
 2805 003e 1A06     		lsls	r2, r3, #24
 2806 0040 7B68     		ldr	r3, [r7, #4]
 2807 0042 1B68     		ldr	r3, [r3]
 2808 0044 1A43     		orrs	r2, r3
 2809 0046 7B68     		ldr	r3, [r7, #4]
 2810 0048 1A60     		str	r2, [r3]
3533:Generated_Source\PSoC4/CyLib.c **** 
3534:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u]  =  (uint32)(* (reg8 *) CYREG_SFLASH_DIE_X     );
 2811              		.loc 1 3534 0
 2812 004a 7B68     		ldr	r3, [r7, #4]
 2813 004c 0433     		adds	r3, r3, #4
 2814 004e 184A     		ldr	r2, .L192+16
 2815 0050 1278     		ldrb	r2, [r2]
 2816 0052 D2B2     		uxtb	r2, r2
 2817 0054 1A60     		str	r2, [r3]
3535:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_Y     ) <<  8u);
 2818              		.loc 1 3535 0
 2819 0056 174B     		ldr	r3, .L192+20
 2820 0058 1B78     		ldrb	r3, [r3]
 2821 005a DBB2     		uxtb	r3, r3
 2822 005c 1902     		lsls	r1, r3, #8
 2823 005e 7B68     		ldr	r3, [r7, #4]
 2824 0060 0433     		adds	r3, r3, #4
 2825 0062 7A68     		ldr	r2, [r7, #4]
 2826 0064 0432     		adds	r2, r2, #4
 2827 0066 1268     		ldr	r2, [r2]
 2828 0068 0A43     		orrs	r2, r1
 2829 006a 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 113


3536:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_SORT  ) << 16u);
 2830              		.loc 1 3536 0
 2831 006c 124B     		ldr	r3, .L192+24
 2832 006e 1B78     		ldrb	r3, [r3]
 2833 0070 DBB2     		uxtb	r3, r3
 2834 0072 1904     		lsls	r1, r3, #16
 2835 0074 7B68     		ldr	r3, [r7, #4]
 2836 0076 0433     		adds	r3, r3, #4
 2837 0078 7A68     		ldr	r2, [r7, #4]
 2838 007a 0432     		adds	r2, r2, #4
 2839 007c 1268     		ldr	r2, [r2]
 2840 007e 0A43     		orrs	r2, r1
 2841 0080 1A60     		str	r2, [r3]
3537:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_MINOR ) << 24u);
 2842              		.loc 1 3537 0
 2843 0082 0E4B     		ldr	r3, .L192+28
 2844 0084 1B78     		ldrb	r3, [r3]
 2845 0086 DBB2     		uxtb	r3, r3
 2846 0088 1906     		lsls	r1, r3, #24
 2847 008a 7B68     		ldr	r3, [r7, #4]
 2848 008c 0433     		adds	r3, r3, #4
 2849 008e 7A68     		ldr	r2, [r7, #4]
 2850 0090 0432     		adds	r2, r2, #4
 2851 0092 1268     		ldr	r2, [r2]
 2852 0094 0A43     		orrs	r2, r1
 2853 0096 1A60     		str	r2, [r3]
3538:Generated_Source\PSoC4/CyLib.c **** #else
3539:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u]  =  (uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_LOT_LSB   )
3540:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_LOT_MSB   )
3541:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_MLOGIC_REV_ID                )
3542:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_WAFER_NUM )
3543:Generated_Source\PSoC4/CyLib.c **** 
3544:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u]  =  (uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_X_LOC     )
3545:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_Y_LOC     )
3546:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_WRK_WK    )
3547:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_FAB_YR    )
3548:Generated_Source\PSoC4/CyLib.c **** #endif  /* (CY_PSOC4) */
3549:Generated_Source\PSoC4/CyLib.c **** }
 2854              		.loc 1 3549 0
 2855 0098 C046     		nop
 2856 009a BD46     		mov	sp, r7
 2857 009c 02B0     		add	sp, sp, #8
 2858              		@ sp needed
 2859 009e 80BD     		pop	{r7, pc}
 2860              	.L193:
 2861              		.align	2
 2862              	.L192:
 2863 00a0 78F1FF0F 		.word	268431736
 2864 00a4 79F1FF0F 		.word	268431737
 2865 00a8 7AF1FF0F 		.word	268431738
 2866 00ac 7BF1FF0F 		.word	268431739
 2867 00b0 7CF1FF0F 		.word	268431740
 2868 00b4 7DF1FF0F 		.word	268431741
 2869 00b8 7EF1FF0F 		.word	268431742
 2870 00bc 7FF1FF0F 		.word	268431743
 2871              		.cfi_endproc
 2872              	.LFE52:
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 114


 2873              		.size	CyGetUniqueId, .-CyGetUniqueId
 2874              		.text
 2875              	.Letext0:
 2876              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 2877              		.file 3 "Generated_Source\\PSoC4\\CyLib.h"
 2878              		.section	.debug_info,"",%progbits
 2879              	.Ldebug_info0:
 2880 0000 DB090000 		.4byte	0x9db
 2881 0004 0400     		.2byte	0x4
 2882 0006 00000000 		.4byte	.Ldebug_abbrev0
 2883 000a 04       		.byte	0x4
 2884 000b 01       		.uleb128 0x1
 2885 000c 07030000 		.4byte	.LASF109
 2886 0010 0C       		.byte	0xc
 2887 0011 99060000 		.4byte	.LASF110
 2888 0015 04060000 		.4byte	.LASF111
 2889 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2890 001d 00000000 		.4byte	0
 2891 0021 00000000 		.4byte	.Ldebug_line0
 2892 0025 02       		.uleb128 0x2
 2893 0026 01       		.byte	0x1
 2894 0027 06       		.byte	0x6
 2895 0028 DB000000 		.4byte	.LASF0
 2896 002c 02       		.uleb128 0x2
 2897 002d 01       		.byte	0x1
 2898 002e 08       		.byte	0x8
 2899 002f CF040000 		.4byte	.LASF1
 2900 0033 02       		.uleb128 0x2
 2901 0034 02       		.byte	0x2
 2902 0035 05       		.byte	0x5
 2903 0036 DD040000 		.4byte	.LASF2
 2904 003a 02       		.uleb128 0x2
 2905 003b 02       		.byte	0x2
 2906 003c 07       		.byte	0x7
 2907 003d A8020000 		.4byte	.LASF3
 2908 0041 02       		.uleb128 0x2
 2909 0042 04       		.byte	0x4
 2910 0043 05       		.byte	0x5
 2911 0044 1A010000 		.4byte	.LASF4
 2912 0048 02       		.uleb128 0x2
 2913 0049 04       		.byte	0x4
 2914 004a 07       		.byte	0x7
 2915 004b 32020000 		.4byte	.LASF5
 2916 004f 02       		.uleb128 0x2
 2917 0050 08       		.byte	0x8
 2918 0051 05       		.byte	0x5
 2919 0052 CD000000 		.4byte	.LASF6
 2920 0056 02       		.uleb128 0x2
 2921 0057 08       		.byte	0x8
 2922 0058 07       		.byte	0x7
 2923 0059 67000000 		.4byte	.LASF7
 2924 005d 03       		.uleb128 0x3
 2925 005e 04       		.byte	0x4
 2926 005f 05       		.byte	0x5
 2927 0060 696E7400 		.ascii	"int\000"
 2928 0064 02       		.uleb128 0x2
 2929 0065 04       		.byte	0x4
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 115


 2930 0066 07       		.byte	0x7
 2931 0067 16020000 		.4byte	.LASF8
 2932 006b 04       		.uleb128 0x4
 2933 006c 3A010000 		.4byte	.LASF9
 2934 0070 02       		.byte	0x2
 2935 0071 FB01     		.2byte	0x1fb
 2936 0073 2C000000 		.4byte	0x2c
 2937 0077 04       		.uleb128 0x4
 2938 0078 0F000000 		.4byte	.LASF10
 2939 007c 02       		.byte	0x2
 2940 007d FC01     		.2byte	0x1fc
 2941 007f 3A000000 		.4byte	0x3a
 2942 0083 04       		.uleb128 0x4
 2943 0084 7A010000 		.4byte	.LASF11
 2944 0088 02       		.byte	0x2
 2945 0089 FD01     		.2byte	0x1fd
 2946 008b 48000000 		.4byte	0x48
 2947 008f 02       		.uleb128 0x2
 2948 0090 04       		.byte	0x4
 2949 0091 04       		.byte	0x4
 2950 0092 76040000 		.4byte	.LASF12
 2951 0096 02       		.uleb128 0x2
 2952 0097 08       		.byte	0x8
 2953 0098 04       		.byte	0x4
 2954 0099 56010000 		.4byte	.LASF13
 2955 009d 02       		.uleb128 0x2
 2956 009e 01       		.byte	0x1
 2957 009f 08       		.byte	0x8
 2958 00a0 31050000 		.4byte	.LASF14
 2959 00a4 04       		.uleb128 0x4
 2960 00a5 7F060000 		.4byte	.LASF15
 2961 00a9 02       		.byte	0x2
 2962 00aa 9D02     		.2byte	0x29d
 2963 00ac 48000000 		.4byte	0x48
 2964 00b0 04       		.uleb128 0x4
 2965 00b1 B9040000 		.4byte	.LASF16
 2966 00b5 02       		.byte	0x2
 2967 00b6 A502     		.2byte	0x2a5
 2968 00b8 BC000000 		.4byte	0xbc
 2969 00bc 05       		.uleb128 0x5
 2970 00bd 6B000000 		.4byte	0x6b
 2971 00c1 04       		.uleb128 0x4
 2972 00c2 BC030000 		.4byte	.LASF17
 2973 00c6 02       		.byte	0x2
 2974 00c7 A702     		.2byte	0x2a7
 2975 00c9 CD000000 		.4byte	0xcd
 2976 00cd 05       		.uleb128 0x5
 2977 00ce 83000000 		.4byte	0x83
 2978 00d2 04       		.uleb128 0x4
 2979 00d3 36050000 		.4byte	.LASF18
 2980 00d7 02       		.byte	0x2
 2981 00d8 B702     		.2byte	0x2b7
 2982 00da DE000000 		.4byte	0xde
 2983 00de 06       		.uleb128 0x6
 2984 00df 04       		.byte	0x4
 2985 00e0 E4000000 		.4byte	0xe4
 2986 00e4 07       		.uleb128 0x7
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 116


 2987 00e5 02       		.uleb128 0x2
 2988 00e6 08       		.byte	0x8
 2989 00e7 04       		.byte	0x4
 2990 00e8 0A040000 		.4byte	.LASF19
 2991 00ec 02       		.uleb128 0x2
 2992 00ed 04       		.byte	0x4
 2993 00ee 07       		.byte	0x7
 2994 00ef DE030000 		.4byte	.LASF20
 2995 00f3 04       		.uleb128 0x4
 2996 00f4 8B040000 		.4byte	.LASF21
 2997 00f8 03       		.byte	0x3
 2998 00f9 0801     		.2byte	0x108
 2999 00fb DE000000 		.4byte	0xde
 3000 00ff 08       		.uleb128 0x8
 3001 0100 88060000 		.4byte	.LASF22
 3002 0104 01       		.byte	0x1
 3003 0105 69       		.byte	0x69
 3004 0106 00000000 		.4byte	.LFB2
 3005 010a 1C000000 		.4byte	.LFE2-.LFB2
 3006 010e 01       		.uleb128 0x1
 3007 010f 9C       		.byte	0x9c
 3008 0110 08       		.uleb128 0x8
 3009 0111 5F020000 		.4byte	.LASF23
 3010 0115 01       		.byte	0x1
 3011 0116 8A       		.byte	0x8a
 3012 0117 00000000 		.4byte	.LFB3
 3013 011b 1C000000 		.4byte	.LFE3-.LFB3
 3014 011f 01       		.uleb128 0x1
 3015 0120 9C       		.byte	0x9c
 3016 0121 09       		.uleb128 0x9
 3017 0122 1F000000 		.4byte	.LASF26
 3018 0126 01       		.byte	0x1
 3019 0127 4802     		.2byte	0x248
 3020 0129 00000000 		.4byte	.LFB4
 3021 012d 48000000 		.4byte	.LFE4-.LFB4
 3022 0131 01       		.uleb128 0x1
 3023 0132 9C       		.byte	0x9c
 3024 0133 65010000 		.4byte	0x165
 3025 0137 0A       		.uleb128 0xa
 3026 0138 05050000 		.4byte	.LASF28
 3027 013c 01       		.byte	0x1
 3028 013d 4802     		.2byte	0x248
 3029 013f 83000000 		.4byte	0x83
 3030 0143 02       		.uleb128 0x2
 3031 0144 91       		.byte	0x91
 3032 0145 64       		.sleb128 -28
 3033 0146 0B       		.uleb128 0xb
 3034 0147 F8000000 		.4byte	.LASF24
 3035 014b 01       		.byte	0x1
 3036 014c 4A02     		.2byte	0x24a
 3037 014e 6B000000 		.4byte	0x6b
 3038 0152 02       		.uleb128 0x2
 3039 0153 91       		.byte	0x91
 3040 0154 6F       		.sleb128 -17
 3041 0155 0B       		.uleb128 0xb
 3042 0156 C5060000 		.4byte	.LASF25
 3043 015a 01       		.byte	0x1
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 117


 3044 015b 4B02     		.2byte	0x24b
 3045 015d 83000000 		.4byte	0x83
 3046 0161 02       		.uleb128 0x2
 3047 0162 91       		.byte	0x91
 3048 0163 68       		.sleb128 -24
 3049 0164 00       		.byte	0
 3050 0165 0C       		.uleb128 0xc
 3051 0166 A7030000 		.4byte	.LASF27
 3052 016a 01       		.byte	0x1
 3053 016b 9502     		.2byte	0x295
 3054 016d 00000000 		.4byte	.LFB5
 3055 0171 50000000 		.4byte	.LFE5-.LFB5
 3056 0175 01       		.uleb128 0x1
 3057 0176 9C       		.byte	0x9c
 3058 0177 8B010000 		.4byte	0x18b
 3059 017b 0A       		.uleb128 0xa
 3060 017c 4F010000 		.4byte	.LASF29
 3061 0180 01       		.byte	0x1
 3062 0181 9502     		.2byte	0x295
 3063 0183 83000000 		.4byte	0x83
 3064 0187 02       		.uleb128 0x2
 3065 0188 91       		.byte	0x91
 3066 0189 74       		.sleb128 -12
 3067 018a 00       		.byte	0
 3068 018b 0D       		.uleb128 0xd
 3069 018c 9C010000 		.4byte	.LASF37
 3070 0190 01       		.byte	0x1
 3071 0191 BA02     		.2byte	0x2ba
 3072 0193 83000000 		.4byte	0x83
 3073 0197 00000000 		.4byte	.LFB6
 3074 019b 34000000 		.4byte	.LFE6-.LFB6
 3075 019f 01       		.uleb128 0x1
 3076 01a0 9C       		.byte	0x9c
 3077 01a1 C4010000 		.4byte	0x1c4
 3078 01a5 0B       		.uleb128 0xb
 3079 01a6 F8000000 		.4byte	.LASF24
 3080 01aa 01       		.byte	0x1
 3081 01ab BC02     		.2byte	0x2bc
 3082 01ad 6B000000 		.4byte	0x6b
 3083 01b1 02       		.uleb128 0x2
 3084 01b2 91       		.byte	0x91
 3085 01b3 6F       		.sleb128 -17
 3086 01b4 0B       		.uleb128 0xb
 3087 01b5 1E040000 		.4byte	.LASF30
 3088 01b9 01       		.byte	0x1
 3089 01ba BD02     		.2byte	0x2bd
 3090 01bc 83000000 		.4byte	0x83
 3091 01c0 02       		.uleb128 0x2
 3092 01c1 91       		.byte	0x91
 3093 01c2 68       		.sleb128 -24
 3094 01c3 00       		.byte	0
 3095 01c4 09       		.uleb128 0x9
 3096 01c5 53050000 		.4byte	.LASF31
 3097 01c9 01       		.byte	0x1
 3098 01ca F702     		.2byte	0x2f7
 3099 01cc 00000000 		.4byte	.LFB7
 3100 01d0 48000000 		.4byte	.LFE7-.LFB7
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 118


 3101 01d4 01       		.uleb128 0x1
 3102 01d5 9C       		.byte	0x9c
 3103 01d6 F9010000 		.4byte	0x1f9
 3104 01da 0A       		.uleb128 0xa
 3105 01db 63060000 		.4byte	.LASF32
 3106 01df 01       		.byte	0x1
 3107 01e0 F702     		.2byte	0x2f7
 3108 01e2 83000000 		.4byte	0x83
 3109 01e6 02       		.uleb128 0x2
 3110 01e7 91       		.byte	0x91
 3111 01e8 64       		.sleb128 -28
 3112 01e9 0B       		.uleb128 0xb
 3113 01ea F8000000 		.4byte	.LASF24
 3114 01ee 01       		.byte	0x1
 3115 01ef F902     		.2byte	0x2f9
 3116 01f1 6B000000 		.4byte	0x6b
 3117 01f5 02       		.uleb128 0x2
 3118 01f6 91       		.byte	0x91
 3119 01f7 6F       		.sleb128 -17
 3120 01f8 00       		.byte	0
 3121 01f9 09       		.uleb128 0x9
 3122 01fa F2020000 		.4byte	.LASF33
 3123 01fe 01       		.byte	0x1
 3124 01ff 3103     		.2byte	0x331
 3125 0201 00000000 		.4byte	.LFB8
 3126 0205 9C000000 		.4byte	.LFE8-.LFB8
 3127 0209 01       		.uleb128 0x1
 3128 020a 9C       		.byte	0x9c
 3129 020b 4C020000 		.4byte	0x24c
 3130 020f 0A       		.uleb128 0xa
 3131 0210 E7000000 		.4byte	.LASF34
 3132 0214 01       		.byte	0x1
 3133 0215 3103     		.2byte	0x331
 3134 0217 83000000 		.4byte	0x83
 3135 021b 02       		.uleb128 0x2
 3136 021c 91       		.byte	0x91
 3137 021d 4C       		.sleb128 -52
 3138 021e 0B       		.uleb128 0xb
 3139 021f 7E000000 		.4byte	.LASF35
 3140 0223 01       		.byte	0x1
 3141 0224 3403     		.2byte	0x334
 3142 0226 5C020000 		.4byte	0x25c
 3143 022a 02       		.uleb128 0x2
 3144 022b 91       		.byte	0x91
 3145 022c 64       		.sleb128 -28
 3146 022d 0B       		.uleb128 0xb
 3147 022e 30010000 		.4byte	.LASF36
 3148 0232 01       		.byte	0x1
 3149 0233 3503     		.2byte	0x335
 3150 0235 71020000 		.4byte	0x271
 3151 0239 02       		.uleb128 0x2
 3152 023a 91       		.byte	0x91
 3153 023b 54       		.sleb128 -44
 3154 023c 0B       		.uleb128 0xb
 3155 023d F8000000 		.4byte	.LASF24
 3156 0241 01       		.byte	0x1
 3157 0242 4503     		.2byte	0x345
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 119


 3158 0244 6B000000 		.4byte	0x6b
 3159 0248 02       		.uleb128 0x2
 3160 0249 91       		.byte	0x91
 3161 024a 6F       		.sleb128 -17
 3162 024b 00       		.byte	0
 3163 024c 0E       		.uleb128 0xe
 3164 024d CD000000 		.4byte	0xcd
 3165 0251 5C020000 		.4byte	0x25c
 3166 0255 0F       		.uleb128 0xf
 3167 0256 EC000000 		.4byte	0xec
 3168 025a 01       		.byte	0x1
 3169 025b 00       		.byte	0
 3170 025c 05       		.uleb128 0x5
 3171 025d 4C020000 		.4byte	0x24c
 3172 0261 0E       		.uleb128 0xe
 3173 0262 CD000000 		.4byte	0xcd
 3174 0266 71020000 		.4byte	0x271
 3175 026a 0F       		.uleb128 0xf
 3176 026b EC000000 		.4byte	0xec
 3177 026f 03       		.byte	0x3
 3178 0270 00       		.byte	0
 3179 0271 05       		.uleb128 0x5
 3180 0272 61020000 		.4byte	0x261
 3181 0276 0D       		.uleb128 0xd
 3182 0277 0F050000 		.4byte	.LASF38
 3183 027b 01       		.byte	0x1
 3184 027c B104     		.2byte	0x4b1
 3185 027e A4000000 		.4byte	0xa4
 3186 0282 00000000 		.4byte	.LFB9
 3187 0286 74000000 		.4byte	.LFE9-.LFB9
 3188 028a 01       		.uleb128 0x1
 3189 028b 9C       		.byte	0x9c
 3190 028c AF020000 		.4byte	0x2af
 3191 0290 0A       		.uleb128 0xa
 3192 0291 59060000 		.4byte	.LASF39
 3193 0295 01       		.byte	0x1
 3194 0296 B104     		.2byte	0x4b1
 3195 0298 83000000 		.4byte	0x83
 3196 029c 02       		.uleb128 0x2
 3197 029d 91       		.byte	0x91
 3198 029e 6C       		.sleb128 -20
 3199 029f 0B       		.uleb128 0xb
 3200 02a0 D1030000 		.4byte	.LASF40
 3201 02a4 01       		.byte	0x1
 3202 02a5 B304     		.2byte	0x4b3
 3203 02a7 A4000000 		.4byte	0xa4
 3204 02ab 02       		.uleb128 0x2
 3205 02ac 91       		.byte	0x91
 3206 02ad 74       		.sleb128 -12
 3207 02ae 00       		.byte	0
 3208 02af 10       		.uleb128 0x10
 3209 02b0 F4050000 		.4byte	.LASF41
 3210 02b4 01       		.byte	0x1
 3211 02b5 4205     		.2byte	0x542
 3212 02b7 00000000 		.4byte	.LFB10
 3213 02bb 30000000 		.4byte	.LFE10-.LFB10
 3214 02bf 01       		.uleb128 0x1
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 120


 3215 02c0 9C       		.byte	0x9c
 3216 02c1 11       		.uleb128 0x11
 3217 02c2 81010000 		.4byte	.LASF42
 3218 02c6 01       		.byte	0x1
 3219 02c7 6505     		.2byte	0x565
 3220 02c9 83000000 		.4byte	0x83
 3221 02cd 00000000 		.4byte	.LFB11
 3222 02d1 20000000 		.4byte	.LFE11-.LFB11
 3223 02d5 01       		.uleb128 0x1
 3224 02d6 9C       		.byte	0x9c
 3225 02d7 EB020000 		.4byte	0x2eb
 3226 02db 0B       		.uleb128 0xb
 3227 02dc F9060000 		.4byte	.LASF43
 3228 02e0 01       		.byte	0x1
 3229 02e1 6705     		.2byte	0x567
 3230 02e3 83000000 		.4byte	0x83
 3231 02e7 02       		.uleb128 0x2
 3232 02e8 91       		.byte	0x91
 3233 02e9 74       		.sleb128 -12
 3234 02ea 00       		.byte	0
 3235 02eb 09       		.uleb128 0x9
 3236 02ec 6B060000 		.4byte	.LASF44
 3237 02f0 01       		.byte	0x1
 3238 02f1 9405     		.2byte	0x594
 3239 02f3 00000000 		.4byte	.LFB12
 3240 02f7 58000000 		.4byte	.LFE12-.LFB12
 3241 02fb 01       		.uleb128 0x1
 3242 02fc 9C       		.byte	0x9c
 3243 02fd 20030000 		.4byte	0x320
 3244 0301 0A       		.uleb128 0xa
 3245 0302 63060000 		.4byte	.LASF32
 3246 0306 01       		.byte	0x1
 3247 0307 9405     		.2byte	0x594
 3248 0309 83000000 		.4byte	0x83
 3249 030d 02       		.uleb128 0x2
 3250 030e 91       		.byte	0x91
 3251 030f 64       		.sleb128 -28
 3252 0310 0B       		.uleb128 0xb
 3253 0311 F8000000 		.4byte	.LASF24
 3254 0315 01       		.byte	0x1
 3255 0316 9605     		.2byte	0x596
 3256 0318 6B000000 		.4byte	0x6b
 3257 031c 02       		.uleb128 0x2
 3258 031d 91       		.byte	0x91
 3259 031e 6F       		.sleb128 -17
 3260 031f 00       		.byte	0
 3261 0320 09       		.uleb128 0x9
 3262 0321 7C040000 		.4byte	.LASF45
 3263 0325 01       		.byte	0x1
 3264 0326 660A     		.2byte	0xa66
 3265 0328 00000000 		.4byte	.LFB13
 3266 032c 64000000 		.4byte	.LFE13-.LFB13
 3267 0330 01       		.uleb128 0x1
 3268 0331 9C       		.byte	0x9c
 3269 0332 46030000 		.4byte	0x346
 3270 0336 0A       		.uleb128 0xa
 3271 0337 BE040000 		.4byte	.LASF46
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 121


 3272 033b 01       		.byte	0x1
 3273 033c 660A     		.2byte	0xa66
 3274 033e 83000000 		.4byte	0x83
 3275 0342 02       		.uleb128 0x2
 3276 0343 91       		.byte	0x91
 3277 0344 74       		.sleb128 -12
 3278 0345 00       		.byte	0
 3279 0346 10       		.uleb128 0x10
 3280 0347 D5050000 		.4byte	.LASF47
 3281 034b 01       		.byte	0x1
 3282 034c 840A     		.2byte	0xa84
 3283 034e 00000000 		.4byte	.LFB14
 3284 0352 2C000000 		.4byte	.LFE14-.LFB14
 3285 0356 01       		.uleb128 0x1
 3286 0357 9C       		.byte	0x9c
 3287 0358 12       		.uleb128 0x12
 3288 0359 44020000 		.4byte	.LASF87
 3289 035d 01       		.byte	0x1
 3290 035e 960A     		.2byte	0xa96
 3291 0360 83000000 		.4byte	0x83
 3292 0364 00000000 		.4byte	.LFB15
 3293 0368 18000000 		.4byte	.LFE15-.LFB15
 3294 036c 01       		.uleb128 0x1
 3295 036d 9C       		.byte	0x9c
 3296 036e 10       		.uleb128 0x10
 3297 036f 63010000 		.4byte	.LASF48
 3298 0373 01       		.byte	0x1
 3299 0374 A60A     		.2byte	0xaa6
 3300 0376 00000000 		.4byte	.LFB16
 3301 037a 14000000 		.4byte	.LFE16-.LFB16
 3302 037e 01       		.uleb128 0x1
 3303 037f 9C       		.byte	0x9c
 3304 0380 11       		.uleb128 0x11
 3305 0381 94020000 		.4byte	.LASF49
 3306 0385 01       		.byte	0x1
 3307 0386 C00A     		.2byte	0xac0
 3308 0388 83000000 		.4byte	0x83
 3309 038c 00000000 		.4byte	.LFB17
 3310 0390 30000000 		.4byte	.LFE17-.LFB17
 3311 0394 01       		.uleb128 0x1
 3312 0395 9C       		.byte	0x9c
 3313 0396 B9030000 		.4byte	0x3b9
 3314 039a 0A       		.uleb128 0xa
 3315 039b 2A050000 		.4byte	.LASF50
 3316 039f 01       		.byte	0x1
 3317 03a0 C00A     		.2byte	0xac0
 3318 03a2 83000000 		.4byte	0x83
 3319 03a6 02       		.uleb128 0x2
 3320 03a7 91       		.byte	0x91
 3321 03a8 6C       		.sleb128 -20
 3322 03a9 0B       		.uleb128 0xb
 3323 03aa D1030000 		.4byte	.LASF40
 3324 03ae 01       		.byte	0x1
 3325 03af C20A     		.2byte	0xac2
 3326 03b1 83000000 		.4byte	0x83
 3327 03b5 02       		.uleb128 0x2
 3328 03b6 91       		.byte	0x91
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 122


 3329 03b7 74       		.sleb128 -12
 3330 03b8 00       		.byte	0
 3331 03b9 11       		.uleb128 0x11
 3332 03ba 59000000 		.4byte	.LASF51
 3333 03be 01       		.byte	0x1
 3334 03bf D70A     		.2byte	0xad7
 3335 03c1 83000000 		.4byte	0x83
 3336 03c5 00000000 		.4byte	.LFB18
 3337 03c9 24000000 		.4byte	.LFE18-.LFB18
 3338 03cd 01       		.uleb128 0x1
 3339 03ce 9C       		.byte	0x9c
 3340 03cf E3030000 		.4byte	0x3e3
 3341 03d3 0B       		.uleb128 0xb
 3342 03d4 16000000 		.4byte	.LASF52
 3343 03d8 01       		.byte	0x1
 3344 03d9 D90A     		.2byte	0xad9
 3345 03db 83000000 		.4byte	0x83
 3346 03df 02       		.uleb128 0x2
 3347 03e0 91       		.byte	0x91
 3348 03e1 74       		.sleb128 -12
 3349 03e2 00       		.byte	0
 3350 03e3 0C       		.uleb128 0xc
 3351 03e4 89000000 		.4byte	.LASF53
 3352 03e8 01       		.byte	0x1
 3353 03e9 EE0A     		.2byte	0xaee
 3354 03eb 00000000 		.4byte	.LFB19
 3355 03ef 1C000000 		.4byte	.LFE19-.LFB19
 3356 03f3 01       		.uleb128 0x1
 3357 03f4 9C       		.byte	0x9c
 3358 03f5 09040000 		.4byte	0x409
 3359 03f9 0A       		.uleb128 0xa
 3360 03fa 97010000 		.4byte	.LASF54
 3361 03fe 01       		.byte	0x1
 3362 03ff EE0A     		.2byte	0xaee
 3363 0401 83000000 		.4byte	0x83
 3364 0405 02       		.uleb128 0x2
 3365 0406 91       		.byte	0x91
 3366 0407 74       		.sleb128 -12
 3367 0408 00       		.byte	0
 3368 0409 0D       		.uleb128 0xd
 3369 040a 95030000 		.4byte	.LASF55
 3370 040e 01       		.byte	0x1
 3371 040f 070B     		.2byte	0xb07
 3372 0411 D2000000 		.4byte	0xd2
 3373 0415 00000000 		.4byte	.LFB20
 3374 0419 48000000 		.4byte	.LFE20-.LFB20
 3375 041d 01       		.uleb128 0x1
 3376 041e 9C       		.byte	0x9c
 3377 041f 60040000 		.4byte	0x460
 3378 0423 0A       		.uleb128 0xa
 3379 0424 E2020000 		.4byte	.LASF56
 3380 0428 01       		.byte	0x1
 3381 0429 070B     		.2byte	0xb07
 3382 042b 6B000000 		.4byte	0x6b
 3383 042f 02       		.uleb128 0x2
 3384 0430 91       		.byte	0x91
 3385 0431 6F       		.sleb128 -17
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 123


 3386 0432 0A       		.uleb128 0xa
 3387 0433 16040000 		.4byte	.LASF57
 3388 0437 01       		.byte	0x1
 3389 0438 070B     		.2byte	0xb07
 3390 043a D2000000 		.4byte	0xd2
 3391 043e 02       		.uleb128 0x2
 3392 043f 91       		.byte	0x91
 3393 0440 68       		.sleb128 -24
 3394 0441 0B       		.uleb128 0xb
 3395 0442 4B000000 		.4byte	.LASF58
 3396 0446 01       		.byte	0x1
 3397 0447 090B     		.2byte	0xb09
 3398 0449 D2000000 		.4byte	0xd2
 3399 044d 02       		.uleb128 0x2
 3400 044e 91       		.byte	0x91
 3401 044f 70       		.sleb128 -16
 3402 0450 0B       		.uleb128 0xb
 3403 0451 00000000 		.4byte	.LASF59
 3404 0455 01       		.byte	0x1
 3405 0456 0A0B     		.2byte	0xb0a
 3406 0458 60040000 		.4byte	0x460
 3407 045c 02       		.uleb128 0x2
 3408 045d 91       		.byte	0x91
 3409 045e 74       		.sleb128 -12
 3410 045f 00       		.byte	0
 3411 0460 06       		.uleb128 0x6
 3412 0461 04       		.byte	0x4
 3413 0462 D2000000 		.4byte	0xd2
 3414 0466 0D       		.uleb128 0xd
 3415 0467 F3040000 		.4byte	.LASF60
 3416 046b 01       		.byte	0x1
 3417 046c 290B     		.2byte	0xb29
 3418 046e D2000000 		.4byte	0xd2
 3419 0472 00000000 		.4byte	.LFB21
 3420 0476 34000000 		.4byte	.LFE21-.LFB21
 3421 047a 01       		.uleb128 0x1
 3422 047b 9C       		.byte	0x9c
 3423 047c 9F040000 		.4byte	0x49f
 3424 0480 0A       		.uleb128 0xa
 3425 0481 E2020000 		.4byte	.LASF56
 3426 0485 01       		.byte	0x1
 3427 0486 290B     		.2byte	0xb29
 3428 0488 6B000000 		.4byte	0x6b
 3429 048c 02       		.uleb128 0x2
 3430 048d 91       		.byte	0x91
 3431 048e 6F       		.sleb128 -17
 3432 048f 0B       		.uleb128 0xb
 3433 0490 00000000 		.4byte	.LASF59
 3434 0494 01       		.byte	0x1
 3435 0495 2B0B     		.2byte	0xb2b
 3436 0497 60040000 		.4byte	0x460
 3437 049b 02       		.uleb128 0x2
 3438 049c 91       		.byte	0x91
 3439 049d 74       		.sleb128 -12
 3440 049e 00       		.byte	0
 3441 049f 0D       		.uleb128 0xd
 3442 04a0 D3020000 		.4byte	.LASF61
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 124


 3443 04a4 01       		.byte	0x1
 3444 04a5 3F0B     		.2byte	0xb3f
 3445 04a7 D2000000 		.4byte	0xd2
 3446 04ab 00000000 		.4byte	.LFB22
 3447 04af 4C000000 		.4byte	.LFE22-.LFB22
 3448 04b3 01       		.uleb128 0x1
 3449 04b4 9C       		.byte	0x9c
 3450 04b5 F6040000 		.4byte	0x4f6
 3451 04b9 0A       		.uleb128 0xa
 3452 04ba E2020000 		.4byte	.LASF56
 3453 04be 01       		.byte	0x1
 3454 04bf 3F0B     		.2byte	0xb3f
 3455 04c1 6B000000 		.4byte	0x6b
 3456 04c5 02       		.uleb128 0x2
 3457 04c6 91       		.byte	0x91
 3458 04c7 6F       		.sleb128 -17
 3459 04c8 0A       		.uleb128 0xa
 3460 04c9 16040000 		.4byte	.LASF57
 3461 04cd 01       		.byte	0x1
 3462 04ce 3F0B     		.2byte	0xb3f
 3463 04d0 D2000000 		.4byte	0xd2
 3464 04d4 02       		.uleb128 0x2
 3465 04d5 91       		.byte	0x91
 3466 04d6 68       		.sleb128 -24
 3467 04d7 0B       		.uleb128 0xb
 3468 04d8 4B000000 		.4byte	.LASF58
 3469 04dc 01       		.byte	0x1
 3470 04dd 410B     		.2byte	0xb41
 3471 04df D2000000 		.4byte	0xd2
 3472 04e3 02       		.uleb128 0x2
 3473 04e4 91       		.byte	0x91
 3474 04e5 70       		.sleb128 -16
 3475 04e6 0B       		.uleb128 0xb
 3476 04e7 00000000 		.4byte	.LASF59
 3477 04eb 01       		.byte	0x1
 3478 04ec 420B     		.2byte	0xb42
 3479 04ee 60040000 		.4byte	0x460
 3480 04f2 02       		.uleb128 0x2
 3481 04f3 91       		.byte	0x91
 3482 04f4 74       		.sleb128 -12
 3483 04f5 00       		.byte	0
 3484 04f6 0D       		.uleb128 0xd
 3485 04f7 9D040000 		.4byte	.LASF62
 3486 04fb 01       		.byte	0x1
 3487 04fc 5B0B     		.2byte	0xb5b
 3488 04fe D2000000 		.4byte	0xd2
 3489 0502 00000000 		.4byte	.LFB23
 3490 0506 36000000 		.4byte	.LFE23-.LFB23
 3491 050a 01       		.uleb128 0x1
 3492 050b 9C       		.byte	0x9c
 3493 050c 2F050000 		.4byte	0x52f
 3494 0510 0A       		.uleb128 0xa
 3495 0511 E2020000 		.4byte	.LASF56
 3496 0515 01       		.byte	0x1
 3497 0516 5B0B     		.2byte	0xb5b
 3498 0518 6B000000 		.4byte	0x6b
 3499 051c 02       		.uleb128 0x2
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 125


 3500 051d 91       		.byte	0x91
 3501 051e 6F       		.sleb128 -17
 3502 051f 0B       		.uleb128 0xb
 3503 0520 00000000 		.4byte	.LASF59
 3504 0524 01       		.byte	0x1
 3505 0525 5D0B     		.2byte	0xb5d
 3506 0527 60040000 		.4byte	0x460
 3507 052b 02       		.uleb128 0x2
 3508 052c 91       		.byte	0x91
 3509 052d 74       		.sleb128 -12
 3510 052e 00       		.byte	0
 3511 052f 09       		.uleb128 0x9
 3512 0530 65040000 		.4byte	.LASF63
 3513 0534 01       		.byte	0x1
 3514 0535 6E0B     		.2byte	0xb6e
 3515 0537 00000000 		.4byte	.LFB24
 3516 053b A8000000 		.4byte	.LFE24-.LFB24
 3517 053f 01       		.uleb128 0x1
 3518 0540 9C       		.byte	0x9c
 3519 0541 91050000 		.4byte	0x591
 3520 0545 0A       		.uleb128 0xa
 3521 0546 E2020000 		.4byte	.LASF56
 3522 054a 01       		.byte	0x1
 3523 054b 6E0B     		.2byte	0xb6e
 3524 054d 6B000000 		.4byte	0x6b
 3525 0551 02       		.uleb128 0x2
 3526 0552 91       		.byte	0x91
 3527 0553 5F       		.sleb128 -33
 3528 0554 0A       		.uleb128 0xa
 3529 0555 E9020000 		.4byte	.LASF64
 3530 0559 01       		.byte	0x1
 3531 055a 6E0B     		.2byte	0xb6e
 3532 055c 6B000000 		.4byte	0x6b
 3533 0560 02       		.uleb128 0x2
 3534 0561 91       		.byte	0x91
 3535 0562 5E       		.sleb128 -34
 3536 0563 0B       		.uleb128 0xb
 3537 0564 F8000000 		.4byte	.LASF24
 3538 0568 01       		.byte	0x1
 3539 0569 700B     		.2byte	0xb70
 3540 056b 6B000000 		.4byte	0x6b
 3541 056f 02       		.uleb128 0x2
 3542 0570 91       		.byte	0x91
 3543 0571 6B       		.sleb128 -21
 3544 0572 0B       		.uleb128 0xb
 3545 0573 5D010000 		.4byte	.LASF65
 3546 0577 01       		.byte	0x1
 3547 0578 710B     		.2byte	0xb71
 3548 057a 83000000 		.4byte	0x83
 3549 057e 02       		.uleb128 0x2
 3550 057f 91       		.byte	0x91
 3551 0580 6C       		.sleb128 -20
 3552 0581 0B       		.uleb128 0xb
 3553 0582 E0010000 		.4byte	.LASF66
 3554 0586 01       		.byte	0x1
 3555 0587 720B     		.2byte	0xb72
 3556 0589 83000000 		.4byte	0x83
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 126


 3557 058d 02       		.uleb128 0x2
 3558 058e 91       		.byte	0x91
 3559 058f 64       		.sleb128 -28
 3560 0590 00       		.byte	0
 3561 0591 0D       		.uleb128 0xd
 3562 0592 B4010000 		.4byte	.LASF67
 3563 0596 01       		.byte	0x1
 3564 0597 900B     		.2byte	0xb90
 3565 0599 6B000000 		.4byte	0x6b
 3566 059d 00000000 		.4byte	.LFB25
 3567 05a1 58000000 		.4byte	.LFE25-.LFB25
 3568 05a5 01       		.uleb128 0x1
 3569 05a6 9C       		.byte	0x9c
 3570 05a7 CA050000 		.4byte	0x5ca
 3571 05ab 0A       		.uleb128 0xa
 3572 05ac E2020000 		.4byte	.LASF56
 3573 05b0 01       		.byte	0x1
 3574 05b1 900B     		.2byte	0xb90
 3575 05b3 6B000000 		.4byte	0x6b
 3576 05b7 02       		.uleb128 0x2
 3577 05b8 91       		.byte	0x91
 3578 05b9 6F       		.sleb128 -17
 3579 05ba 0B       		.uleb128 0xb
 3580 05bb E9020000 		.4byte	.LASF64
 3581 05bf 01       		.byte	0x1
 3582 05c0 920B     		.2byte	0xb92
 3583 05c2 6B000000 		.4byte	0x6b
 3584 05c6 02       		.uleb128 0x2
 3585 05c7 91       		.byte	0x91
 3586 05c8 77       		.sleb128 -9
 3587 05c9 00       		.byte	0
 3588 05ca 0C       		.uleb128 0xc
 3589 05cb E7040000 		.4byte	.LASF68
 3590 05cf 01       		.byte	0x1
 3591 05d0 A50B     		.2byte	0xba5
 3592 05d2 00000000 		.4byte	.LFB26
 3593 05d6 2C000000 		.4byte	.LFE26-.LFB26
 3594 05da 01       		.uleb128 0x1
 3595 05db 9C       		.byte	0x9c
 3596 05dc F0050000 		.4byte	0x5f0
 3597 05e0 0A       		.uleb128 0xa
 3598 05e1 E2020000 		.4byte	.LASF56
 3599 05e5 01       		.byte	0x1
 3600 05e6 A50B     		.2byte	0xba5
 3601 05e8 6B000000 		.4byte	0x6b
 3602 05ec 02       		.uleb128 0x2
 3603 05ed 91       		.byte	0x91
 3604 05ee 77       		.sleb128 -9
 3605 05ef 00       		.byte	0
 3606 05f0 11       		.uleb128 0x11
 3607 05f1 BF000000 		.4byte	.LASF69
 3608 05f5 01       		.byte	0x1
 3609 05f6 B70B     		.2byte	0xbb7
 3610 05f8 6B000000 		.4byte	0x6b
 3611 05fc 00000000 		.4byte	.LFB27
 3612 0600 30000000 		.4byte	.LFE27-.LFB27
 3613 0604 01       		.uleb128 0x1
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 127


 3614 0605 9C       		.byte	0x9c
 3615 0606 1A060000 		.4byte	0x61a
 3616 060a 0A       		.uleb128 0xa
 3617 060b E2020000 		.4byte	.LASF56
 3618 060f 01       		.byte	0x1
 3619 0610 B70B     		.2byte	0xbb7
 3620 0612 6B000000 		.4byte	0x6b
 3621 0616 02       		.uleb128 0x2
 3622 0617 91       		.byte	0x91
 3623 0618 77       		.sleb128 -9
 3624 0619 00       		.byte	0
 3625 061a 0C       		.uleb128 0xc
 3626 061b 23010000 		.4byte	.LASF70
 3627 061f 01       		.byte	0x1
 3628 0620 C70B     		.2byte	0xbc7
 3629 0622 00000000 		.4byte	.LFB28
 3630 0626 2C000000 		.4byte	.LFE28-.LFB28
 3631 062a 01       		.uleb128 0x1
 3632 062b 9C       		.byte	0x9c
 3633 062c 40060000 		.4byte	0x640
 3634 0630 0A       		.uleb128 0xa
 3635 0631 E2020000 		.4byte	.LASF56
 3636 0635 01       		.byte	0x1
 3637 0636 C70B     		.2byte	0xbc7
 3638 0638 6B000000 		.4byte	0x6b
 3639 063c 02       		.uleb128 0x2
 3640 063d 91       		.byte	0x91
 3641 063e 77       		.sleb128 -9
 3642 063f 00       		.byte	0
 3643 0640 0C       		.uleb128 0xc
 3644 0641 6F020000 		.4byte	.LASF71
 3645 0645 01       		.byte	0x1
 3646 0646 D50B     		.2byte	0xbd5
 3647 0648 00000000 		.4byte	.LFB29
 3648 064c 2C000000 		.4byte	.LFE29-.LFB29
 3649 0650 01       		.uleb128 0x1
 3650 0651 9C       		.byte	0x9c
 3651 0652 66060000 		.4byte	0x666
 3652 0656 0A       		.uleb128 0xa
 3653 0657 E2020000 		.4byte	.LASF56
 3654 065b 01       		.byte	0x1
 3655 065c D50B     		.2byte	0xbd5
 3656 065e 6B000000 		.4byte	0x6b
 3657 0662 02       		.uleb128 0x2
 3658 0663 91       		.byte	0x91
 3659 0664 77       		.sleb128 -9
 3660 0665 00       		.byte	0
 3661 0666 0C       		.uleb128 0xc
 3662 0667 F8030000 		.4byte	.LASF72
 3663 066b 01       		.byte	0x1
 3664 066c E40B     		.2byte	0xbe4
 3665 066e 00000000 		.4byte	.LFB30
 3666 0672 2C000000 		.4byte	.LFE30-.LFB30
 3667 0676 01       		.uleb128 0x1
 3668 0677 9C       		.byte	0x9c
 3669 0678 8C060000 		.4byte	0x68c
 3670 067c 0A       		.uleb128 0xa
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 128


 3671 067d E2020000 		.4byte	.LASF56
 3672 0681 01       		.byte	0x1
 3673 0682 E40B     		.2byte	0xbe4
 3674 0684 6B000000 		.4byte	0x6b
 3675 0688 02       		.uleb128 0x2
 3676 0689 91       		.byte	0x91
 3677 068a 77       		.sleb128 -9
 3678 068b 00       		.byte	0
 3679 068c 0C       		.uleb128 0xc
 3680 068d C8040000 		.4byte	.LASF73
 3681 0691 01       		.byte	0x1
 3682 0692 F30B     		.2byte	0xbf3
 3683 0694 00000000 		.4byte	.LFB31
 3684 0698 16000000 		.4byte	.LFE31-.LFB31
 3685 069c 01       		.uleb128 0x1
 3686 069d 9C       		.byte	0x9c
 3687 069e B2060000 		.4byte	0x6b2
 3688 06a2 0A       		.uleb128 0xa
 3689 06a3 2A050000 		.4byte	.LASF50
 3690 06a7 01       		.byte	0x1
 3691 06a8 F30B     		.2byte	0xbf3
 3692 06aa 6B000000 		.4byte	0x6b
 3693 06ae 02       		.uleb128 0x2
 3694 06af 91       		.byte	0x91
 3695 06b0 77       		.sleb128 -9
 3696 06b1 00       		.byte	0
 3697 06b2 10       		.uleb128 0x10
 3698 06b3 96000000 		.4byte	.LASF74
 3699 06b7 01       		.byte	0x1
 3700 06b8 0B0C     		.2byte	0xc0b
 3701 06ba 00000000 		.4byte	.LFB32
 3702 06be 24000000 		.4byte	.LFE32-.LFB32
 3703 06c2 01       		.uleb128 0x1
 3704 06c3 9C       		.byte	0x9c
 3705 06c4 09       		.uleb128 0x9
 3706 06c5 9B050000 		.4byte	.LASF75
 3707 06c9 01       		.byte	0x1
 3708 06ca 1F0C     		.2byte	0xc1f
 3709 06cc 00000000 		.4byte	.LFB33
 3710 06d0 4C000000 		.4byte	.LFE33-.LFB33
 3711 06d4 01       		.uleb128 0x1
 3712 06d5 9C       		.byte	0x9c
 3713 06d6 EA060000 		.4byte	0x6ea
 3714 06da 0A       		.uleb128 0xa
 3715 06db AC040000 		.4byte	.LASF76
 3716 06df 01       		.byte	0x1
 3717 06e0 1F0C     		.2byte	0xc1f
 3718 06e2 83000000 		.4byte	0x83
 3719 06e6 02       		.uleb128 0x2
 3720 06e7 91       		.byte	0x91
 3721 06e8 74       		.sleb128 -12
 3722 06e9 00       		.byte	0
 3723 06ea 09       		.uleb128 0x9
 3724 06eb 20050000 		.4byte	.LASF77
 3725 06ef 01       		.byte	0x1
 3726 06f0 360C     		.2byte	0xc36
 3727 06f2 00000000 		.4byte	.LFB34
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 129


 3728 06f6 28000000 		.4byte	.LFE34-.LFB34
 3729 06fa 01       		.uleb128 0x1
 3730 06fb 9C       		.byte	0x9c
 3731 06fc 10070000 		.4byte	0x710
 3732 0700 0A       		.uleb128 0xa
 3733 0701 B8060000 		.4byte	.LASF78
 3734 0705 01       		.byte	0x1
 3735 0706 360C     		.2byte	0xc36
 3736 0708 77000000 		.4byte	0x77
 3737 070c 02       		.uleb128 0x2
 3738 070d 91       		.byte	0x91
 3739 070e 76       		.sleb128 -10
 3740 070f 00       		.byte	0
 3741 0710 09       		.uleb128 0x9
 3742 0711 EC000000 		.4byte	.LASF79
 3743 0715 01       		.byte	0x1
 3744 0716 440C     		.2byte	0xc44
 3745 0718 00000000 		.4byte	.LFB35
 3746 071c 84000000 		.4byte	.LFE35-.LFB35
 3747 0720 01       		.uleb128 0x1
 3748 0721 9C       		.byte	0x9c
 3749 0722 36070000 		.4byte	0x736
 3750 0726 0A       		.uleb128 0xa
 3751 0727 E7000000 		.4byte	.LASF34
 3752 072b 01       		.byte	0x1
 3753 072c 440C     		.2byte	0xc44
 3754 072e 83000000 		.4byte	0x83
 3755 0732 02       		.uleb128 0x2
 3756 0733 91       		.byte	0x91
 3757 0734 74       		.sleb128 -12
 3758 0735 00       		.byte	0
 3759 0736 13       		.uleb128 0x13
 3760 0737 C2030000 		.4byte	.LASF80
 3761 073b 01       		.byte	0x1
 3762 073c 640C     		.2byte	0xc64
 3763 073e 00000000 		.4byte	.LFB36
 3764 0742 24000000 		.4byte	.LFE36-.LFB36
 3765 0746 01       		.uleb128 0x1
 3766 0747 9C       		.byte	0x9c
 3767 0748 09       		.uleb128 0x9
 3768 0749 D2010000 		.4byte	.LASF81
 3769 074d 01       		.byte	0x1
 3770 074e 810C     		.2byte	0xc81
 3771 0750 00000000 		.4byte	.LFB37
 3772 0754 60000000 		.4byte	.LFE37-.LFB37
 3773 0758 01       		.uleb128 0x1
 3774 0759 9C       		.byte	0x9c
 3775 075a 6C070000 		.4byte	0x76c
 3776 075e 14       		.uleb128 0x14
 3777 075f 6900     		.ascii	"i\000"
 3778 0761 01       		.byte	0x1
 3779 0762 830C     		.2byte	0xc83
 3780 0764 83000000 		.4byte	0x83
 3781 0768 02       		.uleb128 0x2
 3782 0769 91       		.byte	0x91
 3783 076a 74       		.sleb128 -12
 3784 076b 00       		.byte	0
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 130


 3785 076c 13       		.uleb128 0x13
 3786 076d 43050000 		.4byte	.LASF82
 3787 0771 01       		.byte	0x1
 3788 0772 9F0C     		.2byte	0xc9f
 3789 0774 00000000 		.4byte	.LFB38
 3790 0778 20000000 		.4byte	.LFE38-.LFB38
 3791 077c 01       		.uleb128 0x1
 3792 077d 9C       		.byte	0x9c
 3793 077e 10       		.uleb128 0x10
 3794 077f 4B060000 		.4byte	.LASF83
 3795 0783 01       		.byte	0x1
 3796 0784 B00C     		.2byte	0xcb0
 3797 0786 00000000 		.4byte	.LFB39
 3798 078a 1C000000 		.4byte	.LFE39-.LFB39
 3799 078e 01       		.uleb128 0x1
 3800 078f 9C       		.byte	0x9c
 3801 0790 10       		.uleb128 0x10
 3802 0791 A6000000 		.4byte	.LASF84
 3803 0795 01       		.byte	0x1
 3804 0796 C00C     		.2byte	0xcc0
 3805 0798 00000000 		.4byte	.LFB40
 3806 079c 1C000000 		.4byte	.LFE40-.LFB40
 3807 07a0 01       		.uleb128 0x1
 3808 07a1 9C       		.byte	0x9c
 3809 07a2 10       		.uleb128 0x10
 3810 07a3 BB050000 		.4byte	.LASF85
 3811 07a7 01       		.byte	0x1
 3812 07a8 D00C     		.2byte	0xcd0
 3813 07aa 00000000 		.4byte	.LFB41
 3814 07ae 1C000000 		.4byte	.LFE41-.LFB41
 3815 07b2 01       		.uleb128 0x1
 3816 07b3 9C       		.byte	0x9c
 3817 07b4 0C       		.uleb128 0xc
 3818 07b5 CC060000 		.4byte	.LASF86
 3819 07b9 01       		.byte	0x1
 3820 07ba E10C     		.2byte	0xce1
 3821 07bc 00000000 		.4byte	.LFB42
 3822 07c0 20000000 		.4byte	.LFE42-.LFB42
 3823 07c4 01       		.uleb128 0x1
 3824 07c5 9C       		.byte	0x9c
 3825 07c6 DA070000 		.4byte	0x7da
 3826 07ca 0A       		.uleb128 0xa
 3827 07cb E0010000 		.4byte	.LASF66
 3828 07cf 01       		.byte	0x1
 3829 07d0 E10C     		.2byte	0xce1
 3830 07d2 83000000 		.4byte	0x83
 3831 07d6 02       		.uleb128 0x2
 3832 07d7 91       		.byte	0x91
 3833 07d8 74       		.sleb128 -12
 3834 07d9 00       		.byte	0
 3835 07da 12       		.uleb128 0x12
 3836 07db 07010000 		.4byte	.LASF88
 3837 07df 01       		.byte	0x1
 3838 07e0 F10C     		.2byte	0xcf1
 3839 07e2 83000000 		.4byte	0x83
 3840 07e6 00000000 		.4byte	.LFB43
 3841 07ea 18000000 		.4byte	.LFE43-.LFB43
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 131


 3842 07ee 01       		.uleb128 0x1
 3843 07ef 9C       		.byte	0x9c
 3844 07f0 12       		.uleb128 0x12
 3845 07f1 45040000 		.4byte	.LASF89
 3846 07f5 01       		.byte	0x1
 3847 07f6 010D     		.2byte	0xd01
 3848 07f8 83000000 		.4byte	0x83
 3849 07fc 00000000 		.4byte	.LFB44
 3850 0800 18000000 		.4byte	.LFE44-.LFB44
 3851 0804 01       		.uleb128 0x1
 3852 0805 9C       		.byte	0x9c
 3853 0806 0C       		.uleb128 0xc
 3854 0807 BB020000 		.4byte	.LASF90
 3855 080b 01       		.byte	0x1
 3856 080c 210D     		.2byte	0xd21
 3857 080e 00000000 		.4byte	.LFB45
 3858 0812 34000000 		.4byte	.LFE45-.LFB45
 3859 0816 01       		.uleb128 0x1
 3860 0817 9C       		.byte	0x9c
 3861 0818 2C080000 		.4byte	0x82c
 3862 081c 0A       		.uleb128 0xa
 3863 081d E6010000 		.4byte	.LASF91
 3864 0821 01       		.byte	0x1
 3865 0822 210D     		.2byte	0xd21
 3866 0824 83000000 		.4byte	0x83
 3867 0828 02       		.uleb128 0x2
 3868 0829 91       		.byte	0x91
 3869 082a 74       		.sleb128 -12
 3870 082b 00       		.byte	0
 3871 082c 12       		.uleb128 0x12
 3872 082d A3050000 		.4byte	.LASF92
 3873 0831 01       		.byte	0x1
 3874 0832 3A0D     		.2byte	0xd3a
 3875 0834 83000000 		.4byte	0x83
 3876 0838 00000000 		.4byte	.LFB46
 3877 083c 18000000 		.4byte	.LFE46-.LFB46
 3878 0840 01       		.uleb128 0x1
 3879 0841 9C       		.byte	0x9c
 3880 0842 12       		.uleb128 0x12
 3881 0843 00020000 		.4byte	.LASF93
 3882 0847 01       		.byte	0x1
 3883 0848 510D     		.2byte	0xd51
 3884 084a 83000000 		.4byte	0x83
 3885 084e 00000000 		.4byte	.LFB47
 3886 0852 18000000 		.4byte	.LFE47-.LFB47
 3887 0856 01       		.uleb128 0x1
 3888 0857 9C       		.byte	0x9c
 3889 0858 10       		.uleb128 0x10
 3890 0859 23020000 		.4byte	.LASF94
 3891 085d 01       		.byte	0x1
 3892 085e 5E0D     		.2byte	0xd5e
 3893 0860 00000000 		.4byte	.LFB48
 3894 0864 14000000 		.4byte	.LFE48-.LFB48
 3895 0868 01       		.uleb128 0x1
 3896 0869 9C       		.byte	0x9c
 3897 086a 11       		.uleb128 0x11
 3898 086b 6A050000 		.4byte	.LASF95
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 132


 3899 086f 01       		.byte	0x1
 3900 0870 810D     		.2byte	0xd81
 3901 0872 F3000000 		.4byte	0xf3
 3902 0876 00000000 		.4byte	.LFB49
 3903 087a 2C000000 		.4byte	.LFE49-.LFB49
 3904 087e 01       		.uleb128 0x1
 3905 087f 9C       		.byte	0x9c
 3906 0880 B2080000 		.4byte	0x8b2
 3907 0884 0A       		.uleb128 0xa
 3908 0885 E2020000 		.4byte	.LASF56
 3909 0889 01       		.byte	0x1
 3910 088a 810D     		.2byte	0xd81
 3911 088c 83000000 		.4byte	0x83
 3912 0890 02       		.uleb128 0x2
 3913 0891 91       		.byte	0x91
 3914 0892 6C       		.sleb128 -20
 3915 0893 0A       		.uleb128 0xa
 3916 0894 2B040000 		.4byte	.LASF96
 3917 0898 01       		.byte	0x1
 3918 0899 810D     		.2byte	0xd81
 3919 089b F3000000 		.4byte	0xf3
 3920 089f 02       		.uleb128 0x2
 3921 08a0 91       		.byte	0x91
 3922 08a1 68       		.sleb128 -24
 3923 08a2 0B       		.uleb128 0xb
 3924 08a3 52000000 		.4byte	.LASF97
 3925 08a7 01       		.byte	0x1
 3926 08a8 830D     		.2byte	0xd83
 3927 08aa F3000000 		.4byte	0xf3
 3928 08ae 02       		.uleb128 0x2
 3929 08af 91       		.byte	0x91
 3930 08b0 74       		.sleb128 -12
 3931 08b1 00       		.byte	0
 3932 08b2 11       		.uleb128 0x11
 3933 08b3 7F020000 		.4byte	.LASF98
 3934 08b7 01       		.byte	0x1
 3935 08b8 990D     		.2byte	0xd99
 3936 08ba F3000000 		.4byte	0xf3
 3937 08be 00000000 		.4byte	.LFB50
 3938 08c2 1C000000 		.4byte	.LFE50-.LFB50
 3939 08c6 01       		.uleb128 0x1
 3940 08c7 9C       		.byte	0x9c
 3941 08c8 DC080000 		.4byte	0x8dc
 3942 08cc 0A       		.uleb128 0xa
 3943 08cd E2020000 		.4byte	.LASF56
 3944 08d1 01       		.byte	0x1
 3945 08d2 990D     		.2byte	0xd99
 3946 08d4 83000000 		.4byte	0x83
 3947 08d8 02       		.uleb128 0x2
 3948 08d9 91       		.byte	0x91
 3949 08da 74       		.sleb128 -12
 3950 08db 00       		.byte	0
 3951 08dc 15       		.uleb128 0x15
 3952 08dd DF060000 		.4byte	.LASF112
 3953 08e1 01       		.byte	0x1
 3954 08e2 A60D     		.2byte	0xda6
 3955 08e4 00000000 		.4byte	.LFB51
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 133


 3956 08e8 44000000 		.4byte	.LFE51-.LFB51
 3957 08ec 01       		.uleb128 0x1
 3958 08ed 9C       		.byte	0x9c
 3959 08ee 00090000 		.4byte	0x900
 3960 08f2 14       		.uleb128 0x14
 3961 08f3 6900     		.ascii	"i\000"
 3962 08f5 01       		.byte	0x1
 3963 08f6 A80D     		.2byte	0xda8
 3964 08f8 83000000 		.4byte	0x83
 3965 08fc 02       		.uleb128 0x2
 3966 08fd 91       		.byte	0x91
 3967 08fe 74       		.sleb128 -12
 3968 08ff 00       		.byte	0
 3969 0900 0C       		.uleb128 0xc
 3970 0901 F2010000 		.4byte	.LASF99
 3971 0905 01       		.byte	0x1
 3972 0906 C60D     		.2byte	0xdc6
 3973 0908 00000000 		.4byte	.LFB52
 3974 090c C0000000 		.4byte	.LFE52-.LFB52
 3975 0910 01       		.uleb128 0x1
 3976 0911 9C       		.byte	0x9c
 3977 0912 26090000 		.4byte	0x926
 3978 0916 0A       		.uleb128 0xa
 3979 0917 92050000 		.4byte	.LASF100
 3980 091b 01       		.byte	0x1
 3981 091c C60D     		.2byte	0xdc6
 3982 091e 26090000 		.4byte	0x926
 3983 0922 02       		.uleb128 0x2
 3984 0923 91       		.byte	0x91
 3985 0924 74       		.sleb128 -12
 3986 0925 00       		.byte	0
 3987 0926 06       		.uleb128 0x6
 3988 0927 04       		.byte	0x4
 3989 0928 83000000 		.4byte	0x83
 3990 092c 0E       		.uleb128 0xe
 3991 092d F3000000 		.4byte	0xf3
 3992 0931 3C090000 		.4byte	0x93c
 3993 0935 0F       		.uleb128 0xf
 3994 0936 EC000000 		.4byte	0xec
 3995 093a 04       		.byte	0x4
 3996 093b 00       		.byte	0
 3997 093c 16       		.uleb128 0x16
 3998 093d 7F050000 		.4byte	.LASF101
 3999 0941 01       		.byte	0x1
 4000 0942 22       		.byte	0x22
 4001 0943 2C090000 		.4byte	0x92c
 4002 0947 05       		.uleb128 0x5
 4003 0948 03       		.byte	0x3
 4004 0949 00000000 		.4byte	CySysTickCallbacks
 4005 094d 17       		.uleb128 0x17
 4006 094e 57040000 		.4byte	.LASF102
 4007 0952 01       		.byte	0x1
 4008 0953 1B       		.byte	0x1b
 4009 0954 83000000 		.4byte	0x83
 4010 0958 05       		.uleb128 0x5
 4011 0959 03       		.byte	0x3
 4012 095a 00000000 		.4byte	cydelayFreqHz
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 134


 4013 095e 17       		.uleb128 0x17
 4014 095f 40010000 		.4byte	.LASF103
 4015 0963 01       		.byte	0x1
 4016 0964 1C       		.byte	0x1c
 4017 0965 83000000 		.4byte	0x83
 4018 0969 05       		.uleb128 0x5
 4019 096a 03       		.byte	0x3
 4020 096b 00000000 		.4byte	cydelayFreqKhz
 4021 096f 17       		.uleb128 0x17
 4022 0970 E5050000 		.4byte	.LASF104
 4023 0974 01       		.byte	0x1
 4024 0975 1D       		.byte	0x1d
 4025 0976 6B000000 		.4byte	0x6b
 4026 097a 05       		.uleb128 0x5
 4027 097b 03       		.byte	0x3
 4028 097c 00000000 		.4byte	cydelayFreqMhz
 4029 0980 17       		.uleb128 0x17
 4030 0981 C5010000 		.4byte	.LASF105
 4031 0985 01       		.byte	0x1
 4032 0986 1E       		.byte	0x1e
 4033 0987 83000000 		.4byte	0x83
 4034 098b 05       		.uleb128 0x5
 4035 098c 03       		.byte	0x3
 4036 098d 00000000 		.4byte	cydelay32kMs
 4037 0991 17       		.uleb128 0x17
 4038 0992 E7030000 		.4byte	.LASF106
 4039 0996 01       		.byte	0x1
 4040 0997 36       		.byte	0x36
 4041 0998 83000000 		.4byte	0x83
 4042 099c 05       		.uleb128 0x5
 4043 099d 03       		.byte	0x3
 4044 099e 00000000 		.4byte	CySysTickInitVar
 4045 09a2 0E       		.uleb128 0xe
 4046 09a3 B2090000 		.4byte	0x9b2
 4047 09a7 B2090000 		.4byte	0x9b2
 4048 09ab 0F       		.uleb128 0xf
 4049 09ac EC000000 		.4byte	0xec
 4050 09b0 2D       		.byte	0x2d
 4051 09b1 00       		.byte	0
 4052 09b2 18       		.uleb128 0x18
 4053 09b3 6B000000 		.4byte	0x6b
 4054 09b7 17       		.uleb128 0x17
 4055 09b8 34040000 		.4byte	.LASF107
 4056 09bc 01       		.byte	0x1
 4057 09bd 3B       		.byte	0x3b
 4058 09be C8090000 		.4byte	0x9c8
 4059 09c2 05       		.uleb128 0x5
 4060 09c3 03       		.byte	0x3
 4061 09c4 00000000 		.4byte	cyImoFreqMhz2Reg
 4062 09c8 18       		.uleb128 0x18
 4063 09c9 A2090000 		.4byte	0x9a2
 4064 09cd 17       		.uleb128 0x17
 4065 09ce 38000000 		.4byte	.LASF108
 4066 09d2 01       		.byte	0x1
 4067 09d3 58       		.byte	0x58
 4068 09d4 83000000 		.4byte	0x83
 4069 09d8 05       		.uleb128 0x5
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 135


 4070 09d9 03       		.byte	0x3
 4071 09da 00000000 		.4byte	CySysClkPumpConfig
 4072 09de 00       		.byte	0
 4073              		.section	.debug_abbrev,"",%progbits
 4074              	.Ldebug_abbrev0:
 4075 0000 01       		.uleb128 0x1
 4076 0001 11       		.uleb128 0x11
 4077 0002 01       		.byte	0x1
 4078 0003 25       		.uleb128 0x25
 4079 0004 0E       		.uleb128 0xe
 4080 0005 13       		.uleb128 0x13
 4081 0006 0B       		.uleb128 0xb
 4082 0007 03       		.uleb128 0x3
 4083 0008 0E       		.uleb128 0xe
 4084 0009 1B       		.uleb128 0x1b
 4085 000a 0E       		.uleb128 0xe
 4086 000b 55       		.uleb128 0x55
 4087 000c 17       		.uleb128 0x17
 4088 000d 11       		.uleb128 0x11
 4089 000e 01       		.uleb128 0x1
 4090 000f 10       		.uleb128 0x10
 4091 0010 17       		.uleb128 0x17
 4092 0011 00       		.byte	0
 4093 0012 00       		.byte	0
 4094 0013 02       		.uleb128 0x2
 4095 0014 24       		.uleb128 0x24
 4096 0015 00       		.byte	0
 4097 0016 0B       		.uleb128 0xb
 4098 0017 0B       		.uleb128 0xb
 4099 0018 3E       		.uleb128 0x3e
 4100 0019 0B       		.uleb128 0xb
 4101 001a 03       		.uleb128 0x3
 4102 001b 0E       		.uleb128 0xe
 4103 001c 00       		.byte	0
 4104 001d 00       		.byte	0
 4105 001e 03       		.uleb128 0x3
 4106 001f 24       		.uleb128 0x24
 4107 0020 00       		.byte	0
 4108 0021 0B       		.uleb128 0xb
 4109 0022 0B       		.uleb128 0xb
 4110 0023 3E       		.uleb128 0x3e
 4111 0024 0B       		.uleb128 0xb
 4112 0025 03       		.uleb128 0x3
 4113 0026 08       		.uleb128 0x8
 4114 0027 00       		.byte	0
 4115 0028 00       		.byte	0
 4116 0029 04       		.uleb128 0x4
 4117 002a 16       		.uleb128 0x16
 4118 002b 00       		.byte	0
 4119 002c 03       		.uleb128 0x3
 4120 002d 0E       		.uleb128 0xe
 4121 002e 3A       		.uleb128 0x3a
 4122 002f 0B       		.uleb128 0xb
 4123 0030 3B       		.uleb128 0x3b
 4124 0031 05       		.uleb128 0x5
 4125 0032 49       		.uleb128 0x49
 4126 0033 13       		.uleb128 0x13
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 136


 4127 0034 00       		.byte	0
 4128 0035 00       		.byte	0
 4129 0036 05       		.uleb128 0x5
 4130 0037 35       		.uleb128 0x35
 4131 0038 00       		.byte	0
 4132 0039 49       		.uleb128 0x49
 4133 003a 13       		.uleb128 0x13
 4134 003b 00       		.byte	0
 4135 003c 00       		.byte	0
 4136 003d 06       		.uleb128 0x6
 4137 003e 0F       		.uleb128 0xf
 4138 003f 00       		.byte	0
 4139 0040 0B       		.uleb128 0xb
 4140 0041 0B       		.uleb128 0xb
 4141 0042 49       		.uleb128 0x49
 4142 0043 13       		.uleb128 0x13
 4143 0044 00       		.byte	0
 4144 0045 00       		.byte	0
 4145 0046 07       		.uleb128 0x7
 4146 0047 15       		.uleb128 0x15
 4147 0048 00       		.byte	0
 4148 0049 27       		.uleb128 0x27
 4149 004a 19       		.uleb128 0x19
 4150 004b 00       		.byte	0
 4151 004c 00       		.byte	0
 4152 004d 08       		.uleb128 0x8
 4153 004e 2E       		.uleb128 0x2e
 4154 004f 00       		.byte	0
 4155 0050 3F       		.uleb128 0x3f
 4156 0051 19       		.uleb128 0x19
 4157 0052 03       		.uleb128 0x3
 4158 0053 0E       		.uleb128 0xe
 4159 0054 3A       		.uleb128 0x3a
 4160 0055 0B       		.uleb128 0xb
 4161 0056 3B       		.uleb128 0x3b
 4162 0057 0B       		.uleb128 0xb
 4163 0058 27       		.uleb128 0x27
 4164 0059 19       		.uleb128 0x19
 4165 005a 11       		.uleb128 0x11
 4166 005b 01       		.uleb128 0x1
 4167 005c 12       		.uleb128 0x12
 4168 005d 06       		.uleb128 0x6
 4169 005e 40       		.uleb128 0x40
 4170 005f 18       		.uleb128 0x18
 4171 0060 9742     		.uleb128 0x2117
 4172 0062 19       		.uleb128 0x19
 4173 0063 00       		.byte	0
 4174 0064 00       		.byte	0
 4175 0065 09       		.uleb128 0x9
 4176 0066 2E       		.uleb128 0x2e
 4177 0067 01       		.byte	0x1
 4178 0068 3F       		.uleb128 0x3f
 4179 0069 19       		.uleb128 0x19
 4180 006a 03       		.uleb128 0x3
 4181 006b 0E       		.uleb128 0xe
 4182 006c 3A       		.uleb128 0x3a
 4183 006d 0B       		.uleb128 0xb
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 137


 4184 006e 3B       		.uleb128 0x3b
 4185 006f 05       		.uleb128 0x5
 4186 0070 27       		.uleb128 0x27
 4187 0071 19       		.uleb128 0x19
 4188 0072 11       		.uleb128 0x11
 4189 0073 01       		.uleb128 0x1
 4190 0074 12       		.uleb128 0x12
 4191 0075 06       		.uleb128 0x6
 4192 0076 40       		.uleb128 0x40
 4193 0077 18       		.uleb128 0x18
 4194 0078 9642     		.uleb128 0x2116
 4195 007a 19       		.uleb128 0x19
 4196 007b 01       		.uleb128 0x1
 4197 007c 13       		.uleb128 0x13
 4198 007d 00       		.byte	0
 4199 007e 00       		.byte	0
 4200 007f 0A       		.uleb128 0xa
 4201 0080 05       		.uleb128 0x5
 4202 0081 00       		.byte	0
 4203 0082 03       		.uleb128 0x3
 4204 0083 0E       		.uleb128 0xe
 4205 0084 3A       		.uleb128 0x3a
 4206 0085 0B       		.uleb128 0xb
 4207 0086 3B       		.uleb128 0x3b
 4208 0087 05       		.uleb128 0x5
 4209 0088 49       		.uleb128 0x49
 4210 0089 13       		.uleb128 0x13
 4211 008a 02       		.uleb128 0x2
 4212 008b 18       		.uleb128 0x18
 4213 008c 00       		.byte	0
 4214 008d 00       		.byte	0
 4215 008e 0B       		.uleb128 0xb
 4216 008f 34       		.uleb128 0x34
 4217 0090 00       		.byte	0
 4218 0091 03       		.uleb128 0x3
 4219 0092 0E       		.uleb128 0xe
 4220 0093 3A       		.uleb128 0x3a
 4221 0094 0B       		.uleb128 0xb
 4222 0095 3B       		.uleb128 0x3b
 4223 0096 05       		.uleb128 0x5
 4224 0097 49       		.uleb128 0x49
 4225 0098 13       		.uleb128 0x13
 4226 0099 02       		.uleb128 0x2
 4227 009a 18       		.uleb128 0x18
 4228 009b 00       		.byte	0
 4229 009c 00       		.byte	0
 4230 009d 0C       		.uleb128 0xc
 4231 009e 2E       		.uleb128 0x2e
 4232 009f 01       		.byte	0x1
 4233 00a0 3F       		.uleb128 0x3f
 4234 00a1 19       		.uleb128 0x19
 4235 00a2 03       		.uleb128 0x3
 4236 00a3 0E       		.uleb128 0xe
 4237 00a4 3A       		.uleb128 0x3a
 4238 00a5 0B       		.uleb128 0xb
 4239 00a6 3B       		.uleb128 0x3b
 4240 00a7 05       		.uleb128 0x5
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 138


 4241 00a8 27       		.uleb128 0x27
 4242 00a9 19       		.uleb128 0x19
 4243 00aa 11       		.uleb128 0x11
 4244 00ab 01       		.uleb128 0x1
 4245 00ac 12       		.uleb128 0x12
 4246 00ad 06       		.uleb128 0x6
 4247 00ae 40       		.uleb128 0x40
 4248 00af 18       		.uleb128 0x18
 4249 00b0 9742     		.uleb128 0x2117
 4250 00b2 19       		.uleb128 0x19
 4251 00b3 01       		.uleb128 0x1
 4252 00b4 13       		.uleb128 0x13
 4253 00b5 00       		.byte	0
 4254 00b6 00       		.byte	0
 4255 00b7 0D       		.uleb128 0xd
 4256 00b8 2E       		.uleb128 0x2e
 4257 00b9 01       		.byte	0x1
 4258 00ba 3F       		.uleb128 0x3f
 4259 00bb 19       		.uleb128 0x19
 4260 00bc 03       		.uleb128 0x3
 4261 00bd 0E       		.uleb128 0xe
 4262 00be 3A       		.uleb128 0x3a
 4263 00bf 0B       		.uleb128 0xb
 4264 00c0 3B       		.uleb128 0x3b
 4265 00c1 05       		.uleb128 0x5
 4266 00c2 27       		.uleb128 0x27
 4267 00c3 19       		.uleb128 0x19
 4268 00c4 49       		.uleb128 0x49
 4269 00c5 13       		.uleb128 0x13
 4270 00c6 11       		.uleb128 0x11
 4271 00c7 01       		.uleb128 0x1
 4272 00c8 12       		.uleb128 0x12
 4273 00c9 06       		.uleb128 0x6
 4274 00ca 40       		.uleb128 0x40
 4275 00cb 18       		.uleb128 0x18
 4276 00cc 9642     		.uleb128 0x2116
 4277 00ce 19       		.uleb128 0x19
 4278 00cf 01       		.uleb128 0x1
 4279 00d0 13       		.uleb128 0x13
 4280 00d1 00       		.byte	0
 4281 00d2 00       		.byte	0
 4282 00d3 0E       		.uleb128 0xe
 4283 00d4 01       		.uleb128 0x1
 4284 00d5 01       		.byte	0x1
 4285 00d6 49       		.uleb128 0x49
 4286 00d7 13       		.uleb128 0x13
 4287 00d8 01       		.uleb128 0x1
 4288 00d9 13       		.uleb128 0x13
 4289 00da 00       		.byte	0
 4290 00db 00       		.byte	0
 4291 00dc 0F       		.uleb128 0xf
 4292 00dd 21       		.uleb128 0x21
 4293 00de 00       		.byte	0
 4294 00df 49       		.uleb128 0x49
 4295 00e0 13       		.uleb128 0x13
 4296 00e1 2F       		.uleb128 0x2f
 4297 00e2 0B       		.uleb128 0xb
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 139


 4298 00e3 00       		.byte	0
 4299 00e4 00       		.byte	0
 4300 00e5 10       		.uleb128 0x10
 4301 00e6 2E       		.uleb128 0x2e
 4302 00e7 00       		.byte	0
 4303 00e8 3F       		.uleb128 0x3f
 4304 00e9 19       		.uleb128 0x19
 4305 00ea 03       		.uleb128 0x3
 4306 00eb 0E       		.uleb128 0xe
 4307 00ec 3A       		.uleb128 0x3a
 4308 00ed 0B       		.uleb128 0xb
 4309 00ee 3B       		.uleb128 0x3b
 4310 00ef 05       		.uleb128 0x5
 4311 00f0 27       		.uleb128 0x27
 4312 00f1 19       		.uleb128 0x19
 4313 00f2 11       		.uleb128 0x11
 4314 00f3 01       		.uleb128 0x1
 4315 00f4 12       		.uleb128 0x12
 4316 00f5 06       		.uleb128 0x6
 4317 00f6 40       		.uleb128 0x40
 4318 00f7 18       		.uleb128 0x18
 4319 00f8 9742     		.uleb128 0x2117
 4320 00fa 19       		.uleb128 0x19
 4321 00fb 00       		.byte	0
 4322 00fc 00       		.byte	0
 4323 00fd 11       		.uleb128 0x11
 4324 00fe 2E       		.uleb128 0x2e
 4325 00ff 01       		.byte	0x1
 4326 0100 3F       		.uleb128 0x3f
 4327 0101 19       		.uleb128 0x19
 4328 0102 03       		.uleb128 0x3
 4329 0103 0E       		.uleb128 0xe
 4330 0104 3A       		.uleb128 0x3a
 4331 0105 0B       		.uleb128 0xb
 4332 0106 3B       		.uleb128 0x3b
 4333 0107 05       		.uleb128 0x5
 4334 0108 27       		.uleb128 0x27
 4335 0109 19       		.uleb128 0x19
 4336 010a 49       		.uleb128 0x49
 4337 010b 13       		.uleb128 0x13
 4338 010c 11       		.uleb128 0x11
 4339 010d 01       		.uleb128 0x1
 4340 010e 12       		.uleb128 0x12
 4341 010f 06       		.uleb128 0x6
 4342 0110 40       		.uleb128 0x40
 4343 0111 18       		.uleb128 0x18
 4344 0112 9742     		.uleb128 0x2117
 4345 0114 19       		.uleb128 0x19
 4346 0115 01       		.uleb128 0x1
 4347 0116 13       		.uleb128 0x13
 4348 0117 00       		.byte	0
 4349 0118 00       		.byte	0
 4350 0119 12       		.uleb128 0x12
 4351 011a 2E       		.uleb128 0x2e
 4352 011b 00       		.byte	0
 4353 011c 3F       		.uleb128 0x3f
 4354 011d 19       		.uleb128 0x19
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 140


 4355 011e 03       		.uleb128 0x3
 4356 011f 0E       		.uleb128 0xe
 4357 0120 3A       		.uleb128 0x3a
 4358 0121 0B       		.uleb128 0xb
 4359 0122 3B       		.uleb128 0x3b
 4360 0123 05       		.uleb128 0x5
 4361 0124 27       		.uleb128 0x27
 4362 0125 19       		.uleb128 0x19
 4363 0126 49       		.uleb128 0x49
 4364 0127 13       		.uleb128 0x13
 4365 0128 11       		.uleb128 0x11
 4366 0129 01       		.uleb128 0x1
 4367 012a 12       		.uleb128 0x12
 4368 012b 06       		.uleb128 0x6
 4369 012c 40       		.uleb128 0x40
 4370 012d 18       		.uleb128 0x18
 4371 012e 9742     		.uleb128 0x2117
 4372 0130 19       		.uleb128 0x19
 4373 0131 00       		.byte	0
 4374 0132 00       		.byte	0
 4375 0133 13       		.uleb128 0x13
 4376 0134 2E       		.uleb128 0x2e
 4377 0135 00       		.byte	0
 4378 0136 3F       		.uleb128 0x3f
 4379 0137 19       		.uleb128 0x19
 4380 0138 03       		.uleb128 0x3
 4381 0139 0E       		.uleb128 0xe
 4382 013a 3A       		.uleb128 0x3a
 4383 013b 0B       		.uleb128 0xb
 4384 013c 3B       		.uleb128 0x3b
 4385 013d 05       		.uleb128 0x5
 4386 013e 27       		.uleb128 0x27
 4387 013f 19       		.uleb128 0x19
 4388 0140 11       		.uleb128 0x11
 4389 0141 01       		.uleb128 0x1
 4390 0142 12       		.uleb128 0x12
 4391 0143 06       		.uleb128 0x6
 4392 0144 40       		.uleb128 0x40
 4393 0145 18       		.uleb128 0x18
 4394 0146 9642     		.uleb128 0x2116
 4395 0148 19       		.uleb128 0x19
 4396 0149 00       		.byte	0
 4397 014a 00       		.byte	0
 4398 014b 14       		.uleb128 0x14
 4399 014c 34       		.uleb128 0x34
 4400 014d 00       		.byte	0
 4401 014e 03       		.uleb128 0x3
 4402 014f 08       		.uleb128 0x8
 4403 0150 3A       		.uleb128 0x3a
 4404 0151 0B       		.uleb128 0xb
 4405 0152 3B       		.uleb128 0x3b
 4406 0153 05       		.uleb128 0x5
 4407 0154 49       		.uleb128 0x49
 4408 0155 13       		.uleb128 0x13
 4409 0156 02       		.uleb128 0x2
 4410 0157 18       		.uleb128 0x18
 4411 0158 00       		.byte	0
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 141


 4412 0159 00       		.byte	0
 4413 015a 15       		.uleb128 0x15
 4414 015b 2E       		.uleb128 0x2e
 4415 015c 01       		.byte	0x1
 4416 015d 03       		.uleb128 0x3
 4417 015e 0E       		.uleb128 0xe
 4418 015f 3A       		.uleb128 0x3a
 4419 0160 0B       		.uleb128 0xb
 4420 0161 3B       		.uleb128 0x3b
 4421 0162 05       		.uleb128 0x5
 4422 0163 27       		.uleb128 0x27
 4423 0164 19       		.uleb128 0x19
 4424 0165 11       		.uleb128 0x11
 4425 0166 01       		.uleb128 0x1
 4426 0167 12       		.uleb128 0x12
 4427 0168 06       		.uleb128 0x6
 4428 0169 40       		.uleb128 0x40
 4429 016a 18       		.uleb128 0x18
 4430 016b 9642     		.uleb128 0x2116
 4431 016d 19       		.uleb128 0x19
 4432 016e 01       		.uleb128 0x1
 4433 016f 13       		.uleb128 0x13
 4434 0170 00       		.byte	0
 4435 0171 00       		.byte	0
 4436 0172 16       		.uleb128 0x16
 4437 0173 34       		.uleb128 0x34
 4438 0174 00       		.byte	0
 4439 0175 03       		.uleb128 0x3
 4440 0176 0E       		.uleb128 0xe
 4441 0177 3A       		.uleb128 0x3a
 4442 0178 0B       		.uleb128 0xb
 4443 0179 3B       		.uleb128 0x3b
 4444 017a 0B       		.uleb128 0xb
 4445 017b 49       		.uleb128 0x49
 4446 017c 13       		.uleb128 0x13
 4447 017d 02       		.uleb128 0x2
 4448 017e 18       		.uleb128 0x18
 4449 017f 00       		.byte	0
 4450 0180 00       		.byte	0
 4451 0181 17       		.uleb128 0x17
 4452 0182 34       		.uleb128 0x34
 4453 0183 00       		.byte	0
 4454 0184 03       		.uleb128 0x3
 4455 0185 0E       		.uleb128 0xe
 4456 0186 3A       		.uleb128 0x3a
 4457 0187 0B       		.uleb128 0xb
 4458 0188 3B       		.uleb128 0x3b
 4459 0189 0B       		.uleb128 0xb
 4460 018a 49       		.uleb128 0x49
 4461 018b 13       		.uleb128 0x13
 4462 018c 3F       		.uleb128 0x3f
 4463 018d 19       		.uleb128 0x19
 4464 018e 02       		.uleb128 0x2
 4465 018f 18       		.uleb128 0x18
 4466 0190 00       		.byte	0
 4467 0191 00       		.byte	0
 4468 0192 18       		.uleb128 0x18
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 142


 4469 0193 26       		.uleb128 0x26
 4470 0194 00       		.byte	0
 4471 0195 49       		.uleb128 0x49
 4472 0196 13       		.uleb128 0x13
 4473 0197 00       		.byte	0
 4474 0198 00       		.byte	0
 4475 0199 00       		.byte	0
 4476              		.section	.debug_aranges,"",%progbits
 4477 0000 AC010000 		.4byte	0x1ac
 4478 0004 0200     		.2byte	0x2
 4479 0006 00000000 		.4byte	.Ldebug_info0
 4480 000a 04       		.byte	0x4
 4481 000b 00       		.byte	0
 4482 000c 0000     		.2byte	0
 4483 000e 0000     		.2byte	0
 4484 0010 00000000 		.4byte	.LFB2
 4485 0014 1C000000 		.4byte	.LFE2-.LFB2
 4486 0018 00000000 		.4byte	.LFB3
 4487 001c 1C000000 		.4byte	.LFE3-.LFB3
 4488 0020 00000000 		.4byte	.LFB4
 4489 0024 48000000 		.4byte	.LFE4-.LFB4
 4490 0028 00000000 		.4byte	.LFB5
 4491 002c 50000000 		.4byte	.LFE5-.LFB5
 4492 0030 00000000 		.4byte	.LFB6
 4493 0034 34000000 		.4byte	.LFE6-.LFB6
 4494 0038 00000000 		.4byte	.LFB7
 4495 003c 48000000 		.4byte	.LFE7-.LFB7
 4496 0040 00000000 		.4byte	.LFB8
 4497 0044 9C000000 		.4byte	.LFE8-.LFB8
 4498 0048 00000000 		.4byte	.LFB9
 4499 004c 74000000 		.4byte	.LFE9-.LFB9
 4500 0050 00000000 		.4byte	.LFB10
 4501 0054 30000000 		.4byte	.LFE10-.LFB10
 4502 0058 00000000 		.4byte	.LFB11
 4503 005c 20000000 		.4byte	.LFE11-.LFB11
 4504 0060 00000000 		.4byte	.LFB12
 4505 0064 58000000 		.4byte	.LFE12-.LFB12
 4506 0068 00000000 		.4byte	.LFB13
 4507 006c 64000000 		.4byte	.LFE13-.LFB13
 4508 0070 00000000 		.4byte	.LFB14
 4509 0074 2C000000 		.4byte	.LFE14-.LFB14
 4510 0078 00000000 		.4byte	.LFB15
 4511 007c 18000000 		.4byte	.LFE15-.LFB15
 4512 0080 00000000 		.4byte	.LFB16
 4513 0084 14000000 		.4byte	.LFE16-.LFB16
 4514 0088 00000000 		.4byte	.LFB17
 4515 008c 30000000 		.4byte	.LFE17-.LFB17
 4516 0090 00000000 		.4byte	.LFB18
 4517 0094 24000000 		.4byte	.LFE18-.LFB18
 4518 0098 00000000 		.4byte	.LFB19
 4519 009c 1C000000 		.4byte	.LFE19-.LFB19
 4520 00a0 00000000 		.4byte	.LFB20
 4521 00a4 48000000 		.4byte	.LFE20-.LFB20
 4522 00a8 00000000 		.4byte	.LFB21
 4523 00ac 34000000 		.4byte	.LFE21-.LFB21
 4524 00b0 00000000 		.4byte	.LFB22
 4525 00b4 4C000000 		.4byte	.LFE22-.LFB22
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 143


 4526 00b8 00000000 		.4byte	.LFB23
 4527 00bc 36000000 		.4byte	.LFE23-.LFB23
 4528 00c0 00000000 		.4byte	.LFB24
 4529 00c4 A8000000 		.4byte	.LFE24-.LFB24
 4530 00c8 00000000 		.4byte	.LFB25
 4531 00cc 58000000 		.4byte	.LFE25-.LFB25
 4532 00d0 00000000 		.4byte	.LFB26
 4533 00d4 2C000000 		.4byte	.LFE26-.LFB26
 4534 00d8 00000000 		.4byte	.LFB27
 4535 00dc 30000000 		.4byte	.LFE27-.LFB27
 4536 00e0 00000000 		.4byte	.LFB28
 4537 00e4 2C000000 		.4byte	.LFE28-.LFB28
 4538 00e8 00000000 		.4byte	.LFB29
 4539 00ec 2C000000 		.4byte	.LFE29-.LFB29
 4540 00f0 00000000 		.4byte	.LFB30
 4541 00f4 2C000000 		.4byte	.LFE30-.LFB30
 4542 00f8 00000000 		.4byte	.LFB31
 4543 00fc 16000000 		.4byte	.LFE31-.LFB31
 4544 0100 00000000 		.4byte	.LFB32
 4545 0104 24000000 		.4byte	.LFE32-.LFB32
 4546 0108 00000000 		.4byte	.LFB33
 4547 010c 4C000000 		.4byte	.LFE33-.LFB33
 4548 0110 00000000 		.4byte	.LFB34
 4549 0114 28000000 		.4byte	.LFE34-.LFB34
 4550 0118 00000000 		.4byte	.LFB35
 4551 011c 84000000 		.4byte	.LFE35-.LFB35
 4552 0120 00000000 		.4byte	.LFB36
 4553 0124 24000000 		.4byte	.LFE36-.LFB36
 4554 0128 00000000 		.4byte	.LFB37
 4555 012c 60000000 		.4byte	.LFE37-.LFB37
 4556 0130 00000000 		.4byte	.LFB38
 4557 0134 20000000 		.4byte	.LFE38-.LFB38
 4558 0138 00000000 		.4byte	.LFB39
 4559 013c 1C000000 		.4byte	.LFE39-.LFB39
 4560 0140 00000000 		.4byte	.LFB40
 4561 0144 1C000000 		.4byte	.LFE40-.LFB40
 4562 0148 00000000 		.4byte	.LFB41
 4563 014c 1C000000 		.4byte	.LFE41-.LFB41
 4564 0150 00000000 		.4byte	.LFB42
 4565 0154 20000000 		.4byte	.LFE42-.LFB42
 4566 0158 00000000 		.4byte	.LFB43
 4567 015c 18000000 		.4byte	.LFE43-.LFB43
 4568 0160 00000000 		.4byte	.LFB44
 4569 0164 18000000 		.4byte	.LFE44-.LFB44
 4570 0168 00000000 		.4byte	.LFB45
 4571 016c 34000000 		.4byte	.LFE45-.LFB45
 4572 0170 00000000 		.4byte	.LFB46
 4573 0174 18000000 		.4byte	.LFE46-.LFB46
 4574 0178 00000000 		.4byte	.LFB47
 4575 017c 18000000 		.4byte	.LFE47-.LFB47
 4576 0180 00000000 		.4byte	.LFB48
 4577 0184 14000000 		.4byte	.LFE48-.LFB48
 4578 0188 00000000 		.4byte	.LFB49
 4579 018c 2C000000 		.4byte	.LFE49-.LFB49
 4580 0190 00000000 		.4byte	.LFB50
 4581 0194 1C000000 		.4byte	.LFE50-.LFB50
 4582 0198 00000000 		.4byte	.LFB51
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 144


 4583 019c 44000000 		.4byte	.LFE51-.LFB51
 4584 01a0 00000000 		.4byte	.LFB52
 4585 01a4 C0000000 		.4byte	.LFE52-.LFB52
 4586 01a8 00000000 		.4byte	0
 4587 01ac 00000000 		.4byte	0
 4588              		.section	.debug_ranges,"",%progbits
 4589              	.Ldebug_ranges0:
 4590 0000 00000000 		.4byte	.LFB2
 4591 0004 1C000000 		.4byte	.LFE2
 4592 0008 00000000 		.4byte	.LFB3
 4593 000c 1C000000 		.4byte	.LFE3
 4594 0010 00000000 		.4byte	.LFB4
 4595 0014 48000000 		.4byte	.LFE4
 4596 0018 00000000 		.4byte	.LFB5
 4597 001c 50000000 		.4byte	.LFE5
 4598 0020 00000000 		.4byte	.LFB6
 4599 0024 34000000 		.4byte	.LFE6
 4600 0028 00000000 		.4byte	.LFB7
 4601 002c 48000000 		.4byte	.LFE7
 4602 0030 00000000 		.4byte	.LFB8
 4603 0034 9C000000 		.4byte	.LFE8
 4604 0038 00000000 		.4byte	.LFB9
 4605 003c 74000000 		.4byte	.LFE9
 4606 0040 00000000 		.4byte	.LFB10
 4607 0044 30000000 		.4byte	.LFE10
 4608 0048 00000000 		.4byte	.LFB11
 4609 004c 20000000 		.4byte	.LFE11
 4610 0050 00000000 		.4byte	.LFB12
 4611 0054 58000000 		.4byte	.LFE12
 4612 0058 00000000 		.4byte	.LFB13
 4613 005c 64000000 		.4byte	.LFE13
 4614 0060 00000000 		.4byte	.LFB14
 4615 0064 2C000000 		.4byte	.LFE14
 4616 0068 00000000 		.4byte	.LFB15
 4617 006c 18000000 		.4byte	.LFE15
 4618 0070 00000000 		.4byte	.LFB16
 4619 0074 14000000 		.4byte	.LFE16
 4620 0078 00000000 		.4byte	.LFB17
 4621 007c 30000000 		.4byte	.LFE17
 4622 0080 00000000 		.4byte	.LFB18
 4623 0084 24000000 		.4byte	.LFE18
 4624 0088 00000000 		.4byte	.LFB19
 4625 008c 1C000000 		.4byte	.LFE19
 4626 0090 00000000 		.4byte	.LFB20
 4627 0094 48000000 		.4byte	.LFE20
 4628 0098 00000000 		.4byte	.LFB21
 4629 009c 34000000 		.4byte	.LFE21
 4630 00a0 00000000 		.4byte	.LFB22
 4631 00a4 4C000000 		.4byte	.LFE22
 4632 00a8 00000000 		.4byte	.LFB23
 4633 00ac 36000000 		.4byte	.LFE23
 4634 00b0 00000000 		.4byte	.LFB24
 4635 00b4 A8000000 		.4byte	.LFE24
 4636 00b8 00000000 		.4byte	.LFB25
 4637 00bc 58000000 		.4byte	.LFE25
 4638 00c0 00000000 		.4byte	.LFB26
 4639 00c4 2C000000 		.4byte	.LFE26
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 145


 4640 00c8 00000000 		.4byte	.LFB27
 4641 00cc 30000000 		.4byte	.LFE27
 4642 00d0 00000000 		.4byte	.LFB28
 4643 00d4 2C000000 		.4byte	.LFE28
 4644 00d8 00000000 		.4byte	.LFB29
 4645 00dc 2C000000 		.4byte	.LFE29
 4646 00e0 00000000 		.4byte	.LFB30
 4647 00e4 2C000000 		.4byte	.LFE30
 4648 00e8 00000000 		.4byte	.LFB31
 4649 00ec 16000000 		.4byte	.LFE31
 4650 00f0 00000000 		.4byte	.LFB32
 4651 00f4 24000000 		.4byte	.LFE32
 4652 00f8 00000000 		.4byte	.LFB33
 4653 00fc 4C000000 		.4byte	.LFE33
 4654 0100 00000000 		.4byte	.LFB34
 4655 0104 28000000 		.4byte	.LFE34
 4656 0108 00000000 		.4byte	.LFB35
 4657 010c 84000000 		.4byte	.LFE35
 4658 0110 00000000 		.4byte	.LFB36
 4659 0114 24000000 		.4byte	.LFE36
 4660 0118 00000000 		.4byte	.LFB37
 4661 011c 60000000 		.4byte	.LFE37
 4662 0120 00000000 		.4byte	.LFB38
 4663 0124 20000000 		.4byte	.LFE38
 4664 0128 00000000 		.4byte	.LFB39
 4665 012c 1C000000 		.4byte	.LFE39
 4666 0130 00000000 		.4byte	.LFB40
 4667 0134 1C000000 		.4byte	.LFE40
 4668 0138 00000000 		.4byte	.LFB41
 4669 013c 1C000000 		.4byte	.LFE41
 4670 0140 00000000 		.4byte	.LFB42
 4671 0144 20000000 		.4byte	.LFE42
 4672 0148 00000000 		.4byte	.LFB43
 4673 014c 18000000 		.4byte	.LFE43
 4674 0150 00000000 		.4byte	.LFB44
 4675 0154 18000000 		.4byte	.LFE44
 4676 0158 00000000 		.4byte	.LFB45
 4677 015c 34000000 		.4byte	.LFE45
 4678 0160 00000000 		.4byte	.LFB46
 4679 0164 18000000 		.4byte	.LFE46
 4680 0168 00000000 		.4byte	.LFB47
 4681 016c 18000000 		.4byte	.LFE47
 4682 0170 00000000 		.4byte	.LFB48
 4683 0174 14000000 		.4byte	.LFE48
 4684 0178 00000000 		.4byte	.LFB49
 4685 017c 2C000000 		.4byte	.LFE49
 4686 0180 00000000 		.4byte	.LFB50
 4687 0184 1C000000 		.4byte	.LFE50
 4688 0188 00000000 		.4byte	.LFB51
 4689 018c 44000000 		.4byte	.LFE51
 4690 0190 00000000 		.4byte	.LFB52
 4691 0194 C0000000 		.4byte	.LFE52
 4692 0198 00000000 		.4byte	0
 4693 019c 00000000 		.4byte	0
 4694              		.section	.debug_line,"",%progbits
 4695              	.Ldebug_line0:
 4696 0000 E1040000 		.section	.debug_str,"MS",%progbits,1
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 146


 4696      02004D00 
 4696      00000201 
 4696      FB0E0D00 
 4696      01010101 
 4697              	.LASF59:
 4698 0000 72616D56 		.ascii	"ramVectorTable\000"
 4698      6563746F 
 4698      72546162 
 4698      6C6500
 4699              	.LASF10:
 4700 000f 75696E74 		.ascii	"uint16\000"
 4700      313600
 4701              	.LASF52:
 4702 0016 696E7453 		.ascii	"intState\000"
 4702      74617465 
 4702      00
 4703              	.LASF26:
 4704 001f 43795379 		.ascii	"CySysClkWriteHfclkDirect\000"
 4704      73436C6B 
 4704      57726974 
 4704      65486663 
 4704      6C6B4469 
 4705              	.LASF108:
 4706 0038 43795379 		.ascii	"CySysClkPumpConfig\000"
 4706      73436C6B 
 4706      50756D70 
 4706      436F6E66 
 4706      696700
 4707              	.LASF58:
 4708 004b 6F6C6449 		.ascii	"oldIsr\000"
 4708      737200
 4709              	.LASF97:
 4710 0052 72657456 		.ascii	"retVal\000"
 4710      616C00
 4711              	.LASF51:
 4712 0059 43794469 		.ascii	"CyDisableInts\000"
 4712      7361626C 
 4712      65496E74 
 4712      7300
 4713              	.LASF7:
 4714 0067 6C6F6E67 		.ascii	"long long unsigned int\000"
 4714      206C6F6E 
 4714      6720756E 
 4714      7369676E 
 4714      65642069 
 4715              	.LASF35:
 4716 007e 70617261 		.ascii	"parameters\000"
 4716      6D657465 
 4716      727300
 4717              	.LASF53:
 4718 0089 4379456E 		.ascii	"CyEnableInts\000"
 4718      61626C65 
 4718      496E7473 
 4718      00
 4719              	.LASF74:
 4720 0096 4379536F 		.ascii	"CySoftwareReset\000"
 4720      66747761 
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 147


 4720      72655265 
 4720      73657400 
 4721              	.LASF84:
 4722 00a6 43795379 		.ascii	"CySysTickEnableInterrupt\000"
 4722      73546963 
 4722      6B456E61 
 4722      626C6549 
 4722      6E746572 
 4723              	.LASF69:
 4724 00bf 4379496E 		.ascii	"CyIntGetState\000"
 4724      74476574 
 4724      53746174 
 4724      6500
 4725              	.LASF6:
 4726 00cd 6C6F6E67 		.ascii	"long long int\000"
 4726      206C6F6E 
 4726      6720696E 
 4726      7400
 4727              	.LASF0:
 4728 00db 7369676E 		.ascii	"signed char\000"
 4728      65642063 
 4728      68617200 
 4729              	.LASF34:
 4730 00e7 66726571 		.ascii	"freq\000"
 4730      00
 4731              	.LASF79:
 4732 00ec 43794465 		.ascii	"CyDelayFreq\000"
 4732      6C617946 
 4732      72657100 
 4733              	.LASF24:
 4734 00f8 696E7465 		.ascii	"interruptState\000"
 4734      72727570 
 4734      74537461 
 4734      746500
 4735              	.LASF88:
 4736 0107 43795379 		.ascii	"CySysTickGetReload\000"
 4736      73546963 
 4736      6B476574 
 4736      52656C6F 
 4736      616400
 4737              	.LASF4:
 4738 011a 6C6F6E67 		.ascii	"long int\000"
 4738      20696E74 
 4738      00
 4739              	.LASF70:
 4740 0123 4379496E 		.ascii	"CyIntDisable\000"
 4740      74446973 
 4740      61626C65 
 4740      00
 4741              	.LASF36:
 4742 0130 72656756 		.ascii	"regValues\000"
 4742      616C7565 
 4742      7300
 4743              	.LASF9:
 4744 013a 75696E74 		.ascii	"uint8\000"
 4744      3800
 4745              	.LASF103:
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 148


 4746 0140 63796465 		.ascii	"cydelayFreqKhz\000"
 4746      6C617946 
 4746      7265714B 
 4746      687A00
 4747              	.LASF29:
 4748 014f 656E6162 		.ascii	"enable\000"
 4748      6C6500
 4749              	.LASF13:
 4750 0156 646F7562 		.ascii	"double\000"
 4750      6C6500
 4751              	.LASF65:
 4752 015d 73686966 		.ascii	"shift\000"
 4752      7400
 4753              	.LASF48:
 4754 0163 43795379 		.ascii	"CySysLvdClearInterrupt\000"
 4754      734C7664 
 4754      436C6561 
 4754      72496E74 
 4754      65727275 
 4755              	.LASF11:
 4756 017a 75696E74 		.ascii	"uint32\000"
 4756      333200
 4757              	.LASF42:
 4758 0181 43795379 		.ascii	"CySysClkEcoReadStatus\000"
 4758      73436C6B 
 4758      45636F52 
 4758      65616453 
 4758      74617475 
 4759              	.LASF54:
 4760 0197 6D61736B 		.ascii	"mask\000"
 4760      00
 4761              	.LASF37:
 4762 019c 43795379 		.ascii	"CySysClkGetSysclkSource\000"
 4762      73436C6B 
 4762      47657453 
 4762      7973636C 
 4762      6B536F75 
 4763              	.LASF67:
 4764 01b4 4379496E 		.ascii	"CyIntGetPriority\000"
 4764      74476574 
 4764      5072696F 
 4764      72697479 
 4764      00
 4765              	.LASF105:
 4766 01c5 63796465 		.ascii	"cydelay32kMs\000"
 4766      6C617933 
 4766      326B4D73 
 4766      00
 4767              	.LASF81:
 4768 01d2 43795379 		.ascii	"CySysTickInit\000"
 4768      73546963 
 4768      6B496E69 
 4768      7400
 4769              	.LASF66:
 4770 01e0 76616C75 		.ascii	"value\000"
 4770      6500
 4771              	.LASF91:
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 149


 4772 01e6 636C6F63 		.ascii	"clockSource\000"
 4772      6B536F75 
 4772      72636500 
 4773              	.LASF99:
 4774 01f2 43794765 		.ascii	"CyGetUniqueId\000"
 4774      74556E69 
 4774      71756549 
 4774      6400
 4775              	.LASF93:
 4776 0200 43795379 		.ascii	"CySysTickGetCountFlag\000"
 4776      73546963 
 4776      6B476574 
 4776      436F756E 
 4776      74466C61 
 4777              	.LASF8:
 4778 0216 756E7369 		.ascii	"unsigned int\000"
 4778      676E6564 
 4778      20696E74 
 4778      00
 4779              	.LASF94:
 4780 0223 43795379 		.ascii	"CySysTickClear\000"
 4780      73546963 
 4780      6B436C65 
 4780      617200
 4781              	.LASF5:
 4782 0232 6C6F6E67 		.ascii	"long unsigned int\000"
 4782      20756E73 
 4782      69676E65 
 4782      6420696E 
 4782      7400
 4783              	.LASF87:
 4784 0244 43795379 		.ascii	"CySysLvdGetInterruptSource\000"
 4784      734C7664 
 4784      47657449 
 4784      6E746572 
 4784      72757074 
 4785              	.LASF23:
 4786 025f 43795379 		.ascii	"CySysClkImoStop\000"
 4786      73436C6B 
 4786      496D6F53 
 4786      746F7000 
 4787              	.LASF71:
 4788 026f 4379496E 		.ascii	"CyIntSetPending\000"
 4788      74536574 
 4788      50656E64 
 4788      696E6700 
 4789              	.LASF98:
 4790 027f 43795379 		.ascii	"CySysTickGetCallback\000"
 4790      73546963 
 4790      6B476574 
 4790      43616C6C 
 4790      6261636B 
 4791              	.LASF49:
 4792 0294 43795379 		.ascii	"CySysGetResetReason\000"
 4792      73476574 
 4792      52657365 
 4792      74526561 
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 150


 4792      736F6E00 
 4793              	.LASF3:
 4794 02a8 73686F72 		.ascii	"short unsigned int\000"
 4794      7420756E 
 4794      7369676E 
 4794      65642069 
 4794      6E7400
 4795              	.LASF90:
 4796 02bb 43795379 		.ascii	"CySysTickSetClockSource\000"
 4796      73546963 
 4796      6B536574 
 4796      436C6F63 
 4796      6B536F75 
 4797              	.LASF61:
 4798 02d3 4379496E 		.ascii	"CyIntSetVector\000"
 4798      74536574 
 4798      56656374 
 4798      6F7200
 4799              	.LASF56:
 4800 02e2 6E756D62 		.ascii	"number\000"
 4800      657200
 4801              	.LASF64:
 4802 02e9 7072696F 		.ascii	"priority\000"
 4802      72697479 
 4802      00
 4803              	.LASF33:
 4804 02f2 43795379 		.ascii	"CySysClkWriteImoFreq\000"
 4804      73436C6B 
 4804      57726974 
 4804      65496D6F 
 4804      46726571 
 4805              	.LASF109:
 4806 0307 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4806      43313120 
 4806      352E342E 
 4806      31203230 
 4806      31363036 
 4807 033a 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 4807      20726576 
 4807      6973696F 
 4807      6E203233 
 4807      37373135 
 4808 036d 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4808      66756E63 
 4808      74696F6E 
 4808      2D736563 
 4808      74696F6E 
 4809              	.LASF55:
 4810 0395 4379496E 		.ascii	"CyIntSetSysVector\000"
 4810      74536574 
 4810      53797356 
 4810      6563746F 
 4810      7200
 4811              	.LASF27:
 4812 03a7 43795379 		.ascii	"CySysEnablePumpClock\000"
 4812      73456E61 
 4812      626C6550 
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 151


 4812      756D7043 
 4812      6C6F636B 
 4813              	.LASF17:
 4814 03bc 72656733 		.ascii	"reg32\000"
 4814      3200
 4815              	.LASF80:
 4816 03c2 43795379 		.ascii	"CySysTickStart\000"
 4816      73546963 
 4816      6B537461 
 4816      727400
 4817              	.LASF40:
 4818 03d1 72657475 		.ascii	"returnStatus\000"
 4818      726E5374 
 4818      61747573 
 4818      00
 4819              	.LASF20:
 4820 03de 73697A65 		.ascii	"sizetype\000"
 4820      74797065 
 4820      00
 4821              	.LASF106:
 4822 03e7 43795379 		.ascii	"CySysTickInitVar\000"
 4822      73546963 
 4822      6B496E69 
 4822      74566172 
 4822      00
 4823              	.LASF72:
 4824 03f8 4379496E 		.ascii	"CyIntClearPending\000"
 4824      74436C65 
 4824      61725065 
 4824      6E64696E 
 4824      6700
 4825              	.LASF19:
 4826 040a 6C6F6E67 		.ascii	"long double\000"
 4826      20646F75 
 4826      626C6500 
 4827              	.LASF57:
 4828 0416 61646472 		.ascii	"address\000"
 4828      65737300 
 4829              	.LASF30:
 4830 041e 73797363 		.ascii	"sysclkSource\000"
 4830      6C6B536F 
 4830      75726365 
 4830      00
 4831              	.LASF96:
 4832 042b 66756E63 		.ascii	"function\000"
 4832      74696F6E 
 4832      00
 4833              	.LASF107:
 4834 0434 6379496D 		.ascii	"cyImoFreqMhz2Reg\000"
 4834      6F467265 
 4834      714D687A 
 4834      32526567 
 4834      00
 4835              	.LASF89:
 4836 0445 43795379 		.ascii	"CySysTickGetValue\000"
 4836      73546963 
 4836      6B476574 
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 152


 4836      56616C75 
 4836      6500
 4837              	.LASF102:
 4838 0457 63796465 		.ascii	"cydelayFreqHz\000"
 4838      6C617946 
 4838      72657148 
 4838      7A00
 4839              	.LASF63:
 4840 0465 4379496E 		.ascii	"CyIntSetPriority\000"
 4840      74536574 
 4840      5072696F 
 4840      72697479 
 4840      00
 4841              	.LASF12:
 4842 0476 666C6F61 		.ascii	"float\000"
 4842      7400
 4843              	.LASF45:
 4844 047c 43795379 		.ascii	"CySysLvdEnable\000"
 4844      734C7664 
 4844      456E6162 
 4844      6C6500
 4845              	.LASF21:
 4846 048b 63795379 		.ascii	"cySysTickCallback\000"
 4846      73546963 
 4846      6B43616C 
 4846      6C626163 
 4846      6B00
 4847              	.LASF62:
 4848 049d 4379496E 		.ascii	"CyIntGetVector\000"
 4848      74476574 
 4848      56656374 
 4848      6F7200
 4849              	.LASF76:
 4850 04ac 6D696C6C 		.ascii	"milliseconds\000"
 4850      69736563 
 4850      6F6E6473 
 4850      00
 4851              	.LASF16:
 4852 04b9 72656738 		.ascii	"reg8\000"
 4852      00
 4853              	.LASF46:
 4854 04be 74687265 		.ascii	"threshold\000"
 4854      73686F6C 
 4854      6400
 4855              	.LASF73:
 4856 04c8 43794861 		.ascii	"CyHalt\000"
 4856      6C7400
 4857              	.LASF1:
 4858 04cf 756E7369 		.ascii	"unsigned char\000"
 4858      676E6564 
 4858      20636861 
 4858      7200
 4859              	.LASF2:
 4860 04dd 73686F72 		.ascii	"short int\000"
 4860      7420696E 
 4860      7400
 4861              	.LASF68:
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 153


 4862 04e7 4379496E 		.ascii	"CyIntEnable\000"
 4862      74456E61 
 4862      626C6500 
 4863              	.LASF60:
 4864 04f3 4379496E 		.ascii	"CyIntGetSysVector\000"
 4864      74476574 
 4864      53797356 
 4864      6563746F 
 4864      7200
 4865              	.LASF28:
 4866 0505 636C6B53 		.ascii	"clkSelect\000"
 4866      656C6563 
 4866      7400
 4867              	.LASF38:
 4868 050f 43795379 		.ascii	"CySysClkEcoStart\000"
 4868      73436C6B 
 4868      45636F53 
 4868      74617274 
 4868      00
 4869              	.LASF77:
 4870 0520 43794465 		.ascii	"CyDelayUs\000"
 4870      6C617955 
 4870      7300
 4871              	.LASF50:
 4872 052a 72656173 		.ascii	"reason\000"
 4872      6F6E00
 4873              	.LASF14:
 4874 0531 63686172 		.ascii	"char\000"
 4874      00
 4875              	.LASF18:
 4876 0536 63796973 		.ascii	"cyisraddress\000"
 4876      72616464 
 4876      72657373 
 4876      00
 4877              	.LASF82:
 4878 0543 43795379 		.ascii	"CySysTickEnable\000"
 4878      73546963 
 4878      6B456E61 
 4878      626C6500 
 4879              	.LASF31:
 4880 0553 43795379 		.ascii	"CySysClkWriteSysclkDiv\000"
 4880      73436C6B 
 4880      57726974 
 4880      65537973 
 4880      636C6B44 
 4881              	.LASF95:
 4882 056a 43795379 		.ascii	"CySysTickSetCallback\000"
 4882      73546963 
 4882      6B536574 
 4882      43616C6C 
 4882      6261636B 
 4883              	.LASF101:
 4884 057f 43795379 		.ascii	"CySysTickCallbacks\000"
 4884      73546963 
 4884      6B43616C 
 4884      6C626163 
 4884      6B7300
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 154


 4885              	.LASF100:
 4886 0592 756E6971 		.ascii	"uniqueId\000"
 4886      75654964 
 4886      00
 4887              	.LASF75:
 4888 059b 43794465 		.ascii	"CyDelay\000"
 4888      6C617900 
 4889              	.LASF92:
 4890 05a3 43795379 		.ascii	"CySysTickGetClockSource\000"
 4890      73546963 
 4890      6B476574 
 4890      436C6F63 
 4890      6B536F75 
 4891              	.LASF85:
 4892 05bb 43795379 		.ascii	"CySysTickDisableInterrupt\000"
 4892      73546963 
 4892      6B446973 
 4892      61626C65 
 4892      496E7465 
 4893              	.LASF47:
 4894 05d5 43795379 		.ascii	"CySysLvdDisable\000"
 4894      734C7664 
 4894      44697361 
 4894      626C6500 
 4895              	.LASF104:
 4896 05e5 63796465 		.ascii	"cydelayFreqMhz\000"
 4896      6C617946 
 4896      7265714D 
 4896      687A00
 4897              	.LASF41:
 4898 05f4 43795379 		.ascii	"CySysClkEcoStop\000"
 4898      73436C6B 
 4898      45636F53 
 4898      746F7000 
 4899              	.LASF111:
 4900 0604 433A5C63 		.ascii	"C:\\code\\PSoC BLE\\dht22-psoc-ble\\DHT22_BLE\\WS_D"
 4900      6F64655C 
 4900      50536F43 
 4900      20424C45 
 4900      5C646874 
 4901 0632 48543232 		.ascii	"HT22_BLE\\DHT22_BLE.cydsn\000"
 4901      5F424C45 
 4901      5C444854 
 4901      32325F42 
 4901      4C452E63 
 4902              	.LASF83:
 4903 064b 43795379 		.ascii	"CySysTickStop\000"
 4903      73546963 
 4903      6B53746F 
 4903      7000
 4904              	.LASF39:
 4905 0659 74696D65 		.ascii	"timeoutUs\000"
 4905      6F757455 
 4905      7300
 4906              	.LASF32:
 4907 0663 64697669 		.ascii	"divider\000"
 4907      64657200 
ARM GAS  C:\Users\Tech\AppData\Local\Temp\ccnnkLId.s 			page 155


 4908              	.LASF44:
 4909 066b 43795379 		.ascii	"CySysClkWriteEcoDiv\000"
 4909      73436C6B 
 4909      57726974 
 4909      6545636F 
 4909      44697600 
 4910              	.LASF15:
 4911 067f 63797374 		.ascii	"cystatus\000"
 4911      61747573 
 4911      00
 4912              	.LASF22:
 4913 0688 43795379 		.ascii	"CySysClkImoStart\000"
 4913      73436C6B 
 4913      496D6F53 
 4913      74617274 
 4913      00
 4914              	.LASF110:
 4915 0699 47656E65 		.ascii	"Generated_Source\\PSoC4\\CyLib.c\000"
 4915      72617465 
 4915      645F536F 
 4915      75726365 
 4915      5C50536F 
 4916              	.LASF78:
 4917 06b8 6D696372 		.ascii	"microseconds\000"
 4917      6F736563 
 4917      6F6E6473 
 4917      00
 4918              	.LASF25:
 4919 06c5 746D7052 		.ascii	"tmpReg\000"
 4919      656700
 4920              	.LASF86:
 4921 06cc 43795379 		.ascii	"CySysTickSetReload\000"
 4921      73546963 
 4921      6B536574 
 4921      52656C6F 
 4921      616400
 4922              	.LASF112:
 4923 06df 43795379 		.ascii	"CySysTickServiceCallbacks\000"
 4923      73546963 
 4923      6B536572 
 4923      76696365 
 4923      43616C6C 
 4924              	.LASF43:
 4925 06f9 72657475 		.ascii	"returnValue\000"
 4925      726E5661 
 4925      6C756500 
 4926              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
